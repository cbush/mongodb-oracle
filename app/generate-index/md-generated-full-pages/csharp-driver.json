{
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Fundamentals * [Connecting to MongoDB](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/#std-label-csharp-connection)\n* [CRUD Operations](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/#std-label-csharp-crud)\n* [Operations with Builders](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders)\n* [Atlas Search](https://mongodb.com/docs/drivers/csharp/current/fundamentals/atlas-search/#std-label-csharp-atlas-search)\n* [Data Formats](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/#std-label-csharp-data-formats)\n* [Stable API](https://mongodb.com/docs/drivers/csharp/current/fundamentals/stable-api/#std-label-csharp-stable-api)\n* [Authentication Mechanisms](https://mongodb.com/docs/drivers/csharp/current/fundamentals/authentication/#std-label-csharp-authentication-mechanisms)\n* [Enterprise Authentication Mechanisms](https://mongodb.com/docs/drivers/csharp/current/fundamentals/enterprise-authentication/#std-label-csharp-enterprise-authentication-mechanisms)\n* [LINQ](https://mongodb.com/docs/drivers/csharp/current/fundamentals/linq/#std-label-csharp-linq)\n* [Class Mapping](https://mongodb.com/docs/drivers/csharp/current/fundamentals/class-mapping/#std-label-csharp-class-mapping)\n* [Logging](https://mongodb.com/docs/drivers/csharp/current/fundamentals/logging/#std-label-csharp-logging) ← [Delete Many Documents](https://mongodb.com/docs/drivers/csharp/current/usage-examples/deleteMany/ \"Previous Section\")[Connection](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/usage-examples/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Usage Examples On this page * [Overview](#overview)\n* [How to Use the Usage Examples](#how-to-use-the-usage-examples) ## Overview Usage examples provide convenient starting points for popular MongoDB operations. Each example provides the following information: * A code snippet that shows how to perform the operation in synchronous and asynchronous frameworks\n* A link to a fully runnable console application using the operation\n* The expected result after running the example ## How to Use the Usage Examples These examples use the [sample datasets](https://www.mongodb.com/docs/atlas/sample-data/)provided by Atlas. You can load them into your database on the free tier of MongoDB Atlas by following the[Get Started with Atlas Guide](https://www.mongodb.com/docs/atlas/getting-started/#atlas-getting-started)or you can[import the sample dataset into a local MongoDB instance.](https://www.mongodb.com/docs/guides/server/import/) Once you have imported the dataset, you can copy and paste a usage example into your development environment of choice. You can follow the[Quick Start](https://mongodb.com/docs/drivers/csharp/current/quick-start/#std-label-csharp-quickstart) to learn more about getting started with the MongoDB .NET/C# Driver. Once you've copied a usage example, you'll need to edit the connection URI to get the example connected to your MongoDB instance: `| // Replace the following with your MongoDB deployment's connection string. |\n| -------------------------------------------------------------------------- |\n| private static string _mongoConnectionString = \"<Your MongoDB URI>\";       | ` For more information about connecting to your MongoDB instance, see the[Connection Guide.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/#std-label-csharp-connection) ← [Quick Reference](https://mongodb.com/docs/drivers/csharp/current/quick-reference/ \"Previous Section\")[Find a Document](https://mongodb.com/docs/drivers/csharp/current/usage-examples/findOne/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/previous-versions/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Previous Versions The following links direct you to documentation for previous versions of the driver. * [Version 2.18](https://mongodb.github.io/mongo-csharp-driver/2.18/)\n* [Version 2.17](https://mongodb.github.io/mongo-csharp-driver/2.17/)\n* [Version 2.16](https://mongodb.github.io/mongo-csharp-driver/2.16/)\n* [Version 2.15](https://mongodb.github.io/mongo-csharp-driver/2.15/)\n* [Version 2.14](https://mongodb.github.io/mongo-csharp-driver/2.14/)\n* [Version 2.13](https://mongodb.github.io/mongo-csharp-driver/2.13/)\n* [Version 2.12](https://mongodb.github.io/mongo-csharp-driver/2.12/)\n* [Version 2.11](https://mongodb.github.io/mongo-csharp-driver/2.11/)\n* [Version 2.10](https://mongodb.github.io/mongo-csharp-driver/2.10/)\n* [Version 2.9](https://mongodb.github.io/mongo-csharp-driver/2.9/)\n* [Version 2.8](https://mongodb.github.io/mongo-csharp-driver/2.8/)\n* [Version 2.7](https://mongodb.github.io/mongo-csharp-driver/2.7/)\n* [Version 2.6](https://mongodb.github.io/mongo-csharp-driver/2.6/)\n* [Version 2.5](https://mongodb.github.io/mongo-csharp-driver/2.5/)\n* [Version 2.4](https://mongodb.github.io/mongo-csharp-driver/2.4/)\n* [Version 2.3](https://mongodb.github.io/mongo-csharp-driver/2.3/)\n* [Version 2.2](https://mongodb.github.io/mongo-csharp-driver/2.2/)\n* [Version 2.1](https://mongodb.github.io/mongo-csharp-driver/2.1/)\n* [Version 2.0](https://mongodb.github.io/mongo-csharp-driver/2.0/)\n* [Version 1.11](https://mongodb.github.io/mongo-csharp-driver/1.11/) ← [MongoDB C# Driver](https://mongodb.com/docs/drivers/csharp/current/ \"Previous Section\")[Quick Start](https://mongodb.com/docs/drivers/csharp/current/quick-start/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/whats-new/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # What's New On this page * [What's New in 2.19](#what-s-new-in-2.19) Learn what's new in: * [Version 2.19](#std-label-version-2.19) ## What's New in 2.19 The 2.19 driver release includes the following new features: * The `ObjectSerializer` allows deserialization of only safe types, as determined by the configurable `AllowedTypes` function.\n* Changed the default `LinqProvider` to LINQ3.\n* Added Atlas Search (`$search`) support to builders, aggregation pipelines, and LINQ3.\n* Added support for `$bucket` and `$bucketAuto` aggregation pipeline stages in LINQ3.\n* Added support for automatic KMS credentials for Azure VM Managed Identities.\n* Added native support for AWS IAM roles. ← [Compatibility](https://mongodb.com/docs/drivers/csharp/current/compatibility/ \"Previous Section\")[Issues & Help](https://mongodb.com/docs/drivers/csharp/current/issues-and-help/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/quick-start/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Quick Start On this page * [Create a MongoDB Cluster](#create-a-mongodb-cluster)\n* [Set Up a Free Tier Cluster in Atlas](#set-up-a-free-tier-cluster-in-atlas)\n* [Set Your Connection String](#set-your-connection-string)\n* [Set Up Your Project](#set-up-your-project)\n* [Create the Project](#create-the-project)\n* [Add MongoDB as a Dependency](#add-mongodb-as-a-dependency)\n* [Query Your MongoDB Cluster from Your Application](#query-your-mongodb-cluster-from-your-application)\n* [Next steps](#next-steps) This guide shows you how to create an application that uses the **.NET/C# Driver**to connect to a **MongoDB Atlas cluster**. If you prefer to connect to MongoDB using a different driver or programming language, see our[list of official MongoDB drivers.](https://www.mongodb.com/docs/drivers/) The .NET/C# driver lets you connect to and communicate with MongoDB clusters from a .NET application. MongoDB Atlas is a fully-managed cloud database service that hosts your data on MongoDB clusters. In this guide, we show you how to get started with your own free (no credit card required) cluster. Follow the steps below to connect your .NET application with a MongoDB Atlas cluster. ## Create a MongoDB Cluster ### Set Up a Free Tier Cluster in Atlas To set up your Atlas Free Tier Cluster required for this guide, complete the guide on[MongoDB Atlas Setup.](https://www.mongodb.com/docs/guides/atlas/account/) After completing the steps in the Atlas guide, you have a new MongoDB cluster deployed in Atlas, a new database user, and[sample datasets loaded](https://www.mongodb.com/docs/atlas/sample-data/) into your cluster. You also have a connection string similar to the following in your copy buffer: `| \"mongodb+srv://<username>:<password>@cluster0.abc.mongodb.net/?retryWrites=true&w=majority\" |\n| ------------------------------------------------------------------------------------------- | ` ### Set Your Connection String Run the following code at the command prompt to save your MongoDB connection string to an environment variable. This method is safer than including your credentials in your source code. ```bash export MONGODB_URI='<your MongoDB connection string>' \n``` ## Important Make sure to replace the `<username>` and `<password>` sections of the connection string with the username and password of your Atlas user. ## Set Up Your Project ### Create the Project Create a new directory and initialize your project with the `dotnet new` command, as follows: ```shell mkdir csharp-quickstart cd csharp-quickstart dotnet new console \n``` ### Add MongoDB as a Dependency Use the `dotnet add` command to add the .NET/C# Driver to your project as a dependency. ```shell dotnet add package MongoDB.Driver \n``` ## Query Your MongoDB Cluster from Your Application In this step, you'll use the .NET/C# Driver to connect to your MongoDB cluster and run a query on the sample data. Open the file named `Program.cs` in the base directory of your project. Copy the following sample code into `Program.cs` ```csharp using MongoDB.Driver; using MongoDB.Bson; var connectionString = Environment.GetEnvironmentVariable(\"MONGODB_URI\"); if (connectionString == null) {     Console.WriteLine(\"You must set your 'MONGODB_URI' environmental variable. See\\n\\t https://www.mongodb.com/docs/drivers/go/current/usage-examples/#environment-variable\");     Environment.Exit(0); } var client = new MongoClient(connectionString); var collection = client.GetDatabase(\"sample_mflix\").GetCollection<BsonDocument>(\"movies\"); var filter = Builders<BsonDocument>.Filter.Eq(\"title\", \"Back to the Future\"); var document = collection.Find(filter).First(); Console.WriteLine(document); \n```\n\n ```bash dotnet run csharp-quickstart.csproj \n``` When you run `Program.cs`, it should output the details of the following movie from the sample dataset: ``` {     \"_id\": \"573a1398f29313caabce9682\",     ...     \"title\": \"Back to the Future\",     ... } \n``` ## Tip If your output is empty, ensure you have loaded the[sample datasets](https://www.mongodb.com/docs/atlas/sample-data/) into your cluster. After completing this step, you should have a working application that uses the .NET/C# Driver to connect to your MongoDB cluster, run a query on the sample data, and print out the result. To learn more about connecting to Atlas with the .NET/C# Driver, see the [Atlas driver connection](https://www.mongodb.com/docs/atlas/driver-connection/) guide and select C# from the Select your language dropdown. ## Next steps Learn how to read and modify data using the .NET/C# Driver in the CRUD Operations guide or how to perform common operations in Usage Examples. ← [Previous Versions](https://mongodb.com/docs/drivers/csharp/current/previous-versions/ \"Previous Section\")[Quick Reference](https://mongodb.com/docs/drivers/csharp/current/quick-reference/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/issues-and-help/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Issues & Help We are lucky to have a vibrant community of MongoDB .NET/C# Driver users. We recommend seeking support for general questions through the [MongoDB Community Forums.](https://www.mongodb.com/community/forums) ## Bugs / Feature Requests To report a bug or to request a new feature in the .NET/C# Driver, please open an issue in JIRA, our issue management tool, using the following steps: 1. [Create a JIRA account.](https://jira.mongodb.org)\n2. Navigate to [the CSHARP Driver project.](https://jira.mongodb.org/browse/CSHARP)\n3. Click Create Issue. Please provide as much information as possible about the issue and the steps to reproduce it. Bug reports in JIRA for the CSHARP Driver project can be viewed by everyone. If you identify a security vulnerability in the driver or in any other MongoDB project, please report it according to the instructions found in[Create a Vulnerability Report.](https://www.mongodb.com/docs/manual/tutorial/create-a-vulnerability-report/) ## Pull Requests We are happy to accept contributions to help improve the driver. To contribute to the official driver, follow the [development and testing guidelines](https://github.com/mongodb/mongo-csharp-driver/blob/master/CONTRIBUTING.md). We will guide user contributions to ensure they meet the standards of the codebase. ← [What's New](https://mongodb.com/docs/drivers/csharp/current/whats-new/ \"Previous Section\")[FAQ](https://mongodb.com/docs/drivers/csharp/current/faq/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # MongoDB C# Driver ## Introduction Welcome to the documentation site for the official MongoDB .NET/C# Driver. You can add the driver to your application to work with MongoDB in C#. Download the driver using [NuGet](https://www.nuget.org/packages/MongoDB.Driver), or set up a runnable project by following our [Quick Start guide.](https://mongodb.com/docs/drivers/csharp/current/quick-start/#std-label-csharp-quickstart) ## Previous Versions For documentation on versions of the driver v2.18 and earlier, see the [Previous Versions](https://mongodb.com/docs/drivers/csharp/current/previous-versions/#std-label-csharp-previous-versions) section. ## Quick Start Learn how to establish a connection to MongoDB Atlas and begin working with data in the [Quick Start](https://mongodb.com/docs/drivers/csharp/current/quick-start/#std-label-csharp-quickstart) section. ## Quick Reference See driver syntax examples for common MongoDB commands in the[Quick Reference](https://mongodb.com/docs/drivers/csharp/current/quick-reference/#std-label-csharp-quick-reference) section. ## Usage Examples For fully runnable code snippets and explanations for common methods, see [Usage Examples.](https://mongodb.com/docs/drivers/csharp/current/usage-examples/#std-label-csharp-usage-examples) ## Fundamentals For detailed information on key concepts of using the .NET/C# Driver, see[Fundamentals.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/#std-label-csharp-fundamentals) ## API Documentation For detailed information about types and methods in the .NET/C# Driver, see the [MongoDB .NET/C# Driver API documentation.](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/R%5FProject%5FCSharpDriverDocs.htm) ## Take the Free Online Course Taught by MongoDB | ![Banner for the C# MongoDB University Course](https://mongodb.com/docs/drivers/csharp/current/includes/figures/M220N.png) | [Using MongoDB with C#](https://learn.mongodb.com/learning-paths/using-mongodb-with-csharp)Learn the essentials of C# & ASP.NET application development with MongoDB. |\n| ------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ## Compatibility For the compatibility charts that show the recommended .NET/C# Driver version for each MongoDB Server version, see [Compatibility.](https://mongodb.com/docs/drivers/csharp/current/compatibility/#std-label-csharp-compatibility-tables) ## What's New For a list of new features and changes in each version, see the [What's New](https://mongodb.com/docs/drivers/csharp/current/whats-new/)section. ## Issues & Help Learn how to report bugs, contribute to the driver, and find additional resources for asking questions in the [Issues & Help](https://mongodb.com/docs/drivers/csharp/current/issues-and-help/#std-label-csharp-issues-help) section. ## FAQ For answers to commonly asked questions about the MongoDB .NET/C# Driver, see the [FAQ](https://mongodb.com/docs/drivers/csharp/current/faq/#std-label-csharp-faq)section. [Previous Versions](https://mongodb.com/docs/drivers/csharp/current/previous-versions/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/faq/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # FAQ On this page * [Why Does the Driver Throw a Timeout During Server Selection?](#why-does-the-driver-throw-a-timeout-during-server-selection-)\n* [Why is the Wait Queue for Acquiring a Connection to the Server Full?](#why-is-the-wait-queue-for-acquiring-a-connection-to-the-server-full-)\n* [Why are Certain LINQ or Builder Expressions Unsupported?](#why-are-certain-linq-or-builder-expressions-unsupported-) ## Why Does the Driver Throw a Timeout During Server Selection? Each driver operation requires that you choose a healthy server satisfying the [server selection criteria](https://www.mongodb.com/docs/manual/core/read-preference-mechanics/). If you do not select an appropriate server within the [server selection timeout](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/P%5FMongoDB%5FDriver%5FMongoServerSettings%5FServerSelectionTimeout.htm), the driver throws a server selection timeout exception. The exception looks similar to the following:\n\n ` The error message consists of multiple parts: 1. The server selection timeout (30000 ms).\n2. The server selectors considered (`CompositeServerSelector`containing `AreSessionsSupportedServerSelector`,`LatencyLimitingServerSelector`, and`OperationsCountServerSelector`).\n3. The driver’s current view of the cluster topology. The list of servers that the driver is aware of is a key part of this view. Each server description contains an exhaustive description of its current state including information about an endpoint, a server version, a server type, and its current health state. If the server is not heathy, `HeartbeatException` contains the exception from the last failed heartbeat. Analyzing the `HeartbeatException` on each cluster node can assist in diagnosing most server selection issues. The following heartbeat exceptions are common:  \n   * `No connection could be made because the target machine actively refused it`: The driver cannot see this cluster node. This can be because the cluster node has crashed, a firewall is preventing network traffic from reaching the cluster node or port, or some other network error is preventing traffic from being successfully routed to the cluster node.  \n   * `Attempted to read past the end of the stream`: This error happens when the driver cannot connect to the cluster nodes due to a network error, misconfigured firewall, or other network issue. To address this exception, ensure that all cluster nodes are reachable. This error commonly occurs when the client machine’s IP address is not configured in the Atlas IPs Access List, which can be found under the Network Access tab for your Atlas Project.  \n   * `The remote certificate is invalid according to the validation procedure`: This error typically indicates a TLS/SSL-related problem such as an expired/invalid certificate or an untrusted root CA. You can use tools like `openssl s_client` to debug TLS/SSL-related certificate problems. ## Why is the Wait Queue for Acquiring a Connection to the Server Full? This exception usually indicates a threading or concurrency problem in your application. The driver checks out a connection from the selected server’s connection pool for every read or write operation. If the connection pool is already at `maxPoolSize` \\- 100 by default - then the requesting thread blocks in a wait queue. The wait queue's default size is 5 times `maxPoolSize`, or 500\\. If the wait queue is also full, the driver throws a `MongoWaitQueueFullException`. The exception looks similar to the following: ``` MongoDB.Driver.MongoWaitQueueFullException: The wait queue for acquiring a connection to server myServer is full. \n``` To resolve this issue, try the following steps: 1. Tune your indexes. By improving the performance of your queries, you can reduce the time that operations take and reduce the number of concurrent connections needed for your workload.\n2. If you have long-running analytical queries, you may wish to isolate them to dedicated analytics nodes using [read preference tags](https://www.mongodb.com/docs/manual/core/read-preference/) or a hidden secondary.\n3. Increase `maxPoolSize` to allow more simultaneous operations to a given cluster node. If your MongoDB cluster does not have sufficient resources to handle the additional connections and simultaneous workload, performance can decrease due to resource contention on the cluster nodes. Adjust this setting only with careful consideration and testing.\n4. Increase `waitQueueMultiple` to allow more threads/tasks to block waiting for a connection. This is rarely the appropriate solution and can severely affect your application performance. Before considering changes to this setting, address the concurrency problems in your application. ## Why are Certain LINQ or Builder Expressions Unsupported? Each LINQ or Builder expression must be available in the Query API. This is not always possible for the following reasons: 1. You are attempting to use a .NET/C# feature that does not have an equivalent MongoDB representation. For example, .NET/C# and MongoDB have different semantics around collations.\n2. The driver does not support a particular transformation from LINQ or Builder expression into MQL (MongoDB Query Language). This may happen because the provided query has no MQL translation or because a feature has not been implemented yet in the driver. If you receive an `Unsupported filter ...` or `Expression not supported ...` exception message, try the following steps:\n\n ```csharp FilterDefinition<Entity> typedFilter = Builders<Entity>.Filter.Eq(e => e.A, 1); FilterDefinition<Entity> bsonFilter = new BsonDocument {{ \"a\", 1 }}; FilterDefinition<Entity> jsonFilter = \"{ a : 1 }\"; \n``` ## Note If you use `BsonDocument` or JSON string, then [BsonClassMap](https://mongodb.github.io/mongo-csharp-driver/2.17/reference/bson/mapping/), BSON serialization attributes, and serialization conventions are not taken into account in the Query API. Field names must match the names and casing as stored by the server. For example, when referencing the `_id` field, you must refer to it using `_id` in`BsonDocument` or JSON string definitions. Similarly, if a document has a field `FirstName` annotated with `[BsonElement(\"first_name\")]`, you must refer to it as `first_name` in `BsonDocument` or JSON string definitions. You can combine the raw and typed forms in the same query, as the following code demonstrates: ```csharp FilterDefinition<Entity> filter = Builders<Entity>.Filter     .And(Builders<Entity>.Filter         .Eq(e => e.A, 1), BsonDocument         .Parse(\"{ b : 2 }\")); \n``` ← [Issues & Help](https://mongodb.com/docs/drivers/csharp/current/issues-and-help/ \"Previous Section\")",
  "https://www.mongodb.com/docs/drivers/csharp/current/usage-examples/findMany/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Find Multiple Documents On this page * [Examples](#examples)\n* [Find Documents Using Builders](#find-documents-using-builders)\n* [Find Documents Using LINQ](#find-documents-using-linq)\n* [Find All Documents](#find-all-documents)\n* [Expected Result](#expected-result)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) You can retrieve multiple documents from a collection by using the`Find()` method. ## Examples The examples on this page use the following `Restaurant`, `Address`, and `GradeEntry`classes as models: `| public class Restaurant                      |\n| -------------------------------------------- |\n| {                                            |\n| public ObjectId Id { get; set; }             |\n| public string Name { get; set; }             |\n| [BsonElement(\"restaurant_id\")]               |\n| public string RestaurantId { get; set; }     |\n| public string Cuisine { get; set; }          |\n| public Address Address { get; set; }         |\n| public string Borough { get; set; }          |\n| public List<GradeEntry> Grades { get; set; } |\n| }                                            | ` ```csharp public class Address {     public string Building { get; set; }     [BsonElement(\"coord\")]     public double[] Coordinates { get; set; }     public string Street { get; set; }     [BsonElement(\"zipcode\")]     public string ZipCode { get; set; } } \n``` ```csharp public class GradeEntry {     public DateTime Date { get; set; }     public string Grade { get; set; }     public float Score { get; set; } } \n``` ## Note The documents in the `restaurants` collection use the camel-case naming convention. The examples in this guide use a `ConventionPack`to deserialize the fields in the collection into Pascal case and map them to the properties in the `Restaurant` class. To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) ### Find Documents Using Builders The following example uses `Builders` to find documents in the `restaurants` collection with the `cuisine` \"Pizza\". Select the Asynchronous or Synchronous tab to see the corresponding code. ### Find Documents Using LINQ The following example uses LINQ to find documents in the`restaurants` collection with the `cuisine` \"Pizza\". Select the Asynchronous or Synchronous tab to see the corresponding code. ### Find All Documents The following example finds all documents in the `restaurants` collection. Select the Asynchronous or Synchronous tab to see the corresponding code. ### Expected Result Running the preceding full examples prints the following results: ``` Finding documents with builders...: Number of documents found: 1163 Finding documents with LINQ...: Number of documents found: 1163 Finding all documents...: Number of documents found: 25359 \n``` ## Tip ### Sample Datasets These examples use the [sample datasets](https://www.mongodb.com/docs/atlas/sample-data/) provided by Atlas. The number of documents returned may differ depending on the data in your collection. ## Additional Information\n\n To learn more about using builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders) To learn how to find documents using LINQ, see [LINQ.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/linq/#std-label-csharp-linq) ## API Documentation * [Find()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/Overload%5FMongoDB%5FDriver%5FIMongoCollectionExtensions%5FFind.htm) ← [Find a Document](https://mongodb.com/docs/drivers/csharp/current/usage-examples/findOne/ \"Previous Section\")[Insert a Document](https://mongodb.com/docs/drivers/csharp/current/usage-examples/insertOne/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/usage-examples/deleteMany/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Delete Many Documents On this page * [Example](#example)\n* [Expected Result](#expected-result)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) You can delete more than one document using the `DeleteMany()` synchronous method or the `DeleteManyAsync()` asynchronous method on a collection object. ## Example The examples on this page use the following `Restaurant`, `Address`, and `GradeEntry`classes as models: `| public class Restaurant                      |\n| -------------------------------------------- |\n| {                                            |\n| public ObjectId Id { get; set; }             |\n| public string Name { get; set; }             |\n| [BsonElement(\"restaurant_id\")]               |\n| public string RestaurantId { get; set; }     |\n| public string Cuisine { get; set; }          |\n| public Address Address { get; set; }         |\n| public string Borough { get; set; }          |\n| public List<GradeEntry> Grades { get; set; } |\n| }                                            | ` ```csharp public class Address {     public string Building { get; set; }     [BsonElement(\"coord\")]     public double[] Coordinates { get; set; }     public string Street { get; set; }     [BsonElement(\"zipcode\")]     public string ZipCode { get; set; } } \n``` ```csharp public class GradeEntry {     public DateTime Date { get; set; }     public string Grade { get; set; }     public float Score { get; set; } } \n``` ## Note The documents in the `restaurants` collection use the camel-case naming convention. The examples in this guide use a `ConventionPack`to deserialize the fields in the collection into Pascal case and map them to the properties in the `Restaurant` class. To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) The following code deletes all documents in the `restaurants` collection whose`borough` field value equals the word \"Brooklyn\". Select the Asynchronous or Synchronous tab to see the corresponding code. ### Expected Result Running either of the preceding full examples prints the following results: ``` Deleting documents... Deleted documents: 6086 Resetting sample data...done. \n``` ## Additional Information To learn more about deleting documents, see the [Delete Documents](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/delete/#std-label-csharp-delete-guide) guide. To learn more about using builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders) ## API Documentation * [DeleteMany()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/Overload%5FMongoDB%5FDriver%5FIMongoCollectionExtensions%5FDeleteMany.htm)\n* [DeleteManyAsync()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/Overload%5FMongoDB%5FDriver%5FIMongoCollectionExtensions%5FDeleteManyAsync.htm)\n\n",
  "https://www.mongodb.com/docs/drivers/csharp/current/usage-examples/findOne/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Find a Document On this page * [Examples](#examples)\n* [Find a Document Using Builders](#find-a-document-using-builders)\n* [Find a Document Using LINQ](#find-a-document-using-linq)\n* [Expected Result](#expected-result)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) You can retrieve a document by using the `Find()` method on a collection object. ## Examples The examples on this page use the following `Restaurant`, `Address`, and `GradeEntry`classes as models: `| public class Restaurant                      |\n| -------------------------------------------- |\n| {                                            |\n| public ObjectId Id { get; set; }             |\n| public string Name { get; set; }             |\n| [BsonElement(\"restaurant_id\")]               |\n| public string RestaurantId { get; set; }     |\n| public string Cuisine { get; set; }          |\n| public Address Address { get; set; }         |\n| public string Borough { get; set; }          |\n| public List<GradeEntry> Grades { get; set; } |\n| }                                            | ` ```csharp public class Address {     public string Building { get; set; }     [BsonElement(\"coord\")]     public double[] Coordinates { get; set; }     public string Street { get; set; }     [BsonElement(\"zipcode\")]     public string ZipCode { get; set; } } \n``` ```csharp public class GradeEntry {     public DateTime Date { get; set; }     public string Grade { get; set; }     public float Score { get; set; } } \n``` ## Note The documents in the `restaurants` collection use the camel-case naming convention. The examples in this guide use a `ConventionPack`to deserialize the fields in the collection into Pascal case and map them to the properties in the `Restaurant` class. To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) ### Find a Document Using Builders The following example uses `Builders` to find a document in the `restaurants`collection that has a `name` field with a value of \"Bagels N Buns\". Select the Asynchronous or Synchronous tab to see the corresponding code. ### Find a Document Using LINQ The following example uses LINQ to find a document in the `restaurants`collection that has a `name` field with a value of \"Bagels N Buns\". Select the Asynchronous or Synchronous tab to see the corresponding code. ### Expected Result Running any of the preceding full examples prints results similar to the following: ``` {    \"_id\" : ObjectId(\"5eb3d668b31de5d588f42950\"),    \"name\" : \"Bagels N Buns\",    \"restaurant_id\" : \"40363427\",    \"cuisine\" : \"Delicatessen\",    \"address\" : {...},    \"borough\" : \"Staten Island\",    \"grades\" : [...] } \n``` ## Additional Information\n\n To learn more about using builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders) To learn how to find a document using LINQ, see [LINQ.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/linq/#std-label-csharp-linq) ## API Documentation * [Find()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/Overload%5FMongoDB%5FDriver%5FIMongoCollectionExtensions%5FFind.htm)\n* [FirstOrDefault()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/M%5FMongoDB%5FDriver%5FIFindFluentExtensions%5FFirstOrDefault%5F%5F2.htm)\n* [FirstOrDefaultAsync()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html//M%5FMongoDB%5FDriver%5FLinq%5FMongoQueryable%5FFirstOrDefaultAsync%5F%5F1.htm) ← [Usage Examples](https://mongodb.com/docs/drivers/csharp/current/usage-examples/ \"Previous Section\")[Find Multiple Documents](https://mongodb.com/docs/drivers/csharp/current/usage-examples/findMany/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/compatibility/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Compatibility On this page * [MongoDB Compatibility](#mongodb-compatibility)\n* [Compatibility Table Legend](#compatibility-table-legend)\n* [Language Compatibility](#language-compatibility) ## MongoDB Compatibility The following compatibility table specifies the recommended version(s) of the MongoDB .NET/C# Driver for use with a specific version of MongoDB. The first column lists the driver version. ### Compatibility Table Legend | Icon    | Explanation                                                                                            |\n| ------- | ------------------------------------------------------------------------------------------------------ |\n| ✓       | All features are supported.                                                                            |\n| ⊛       | The Driver version will work with the MongoDB version, but not all new MongoDB features are supported. |\n| No mark | The Driver version is not tested with the MongoDB version.                                             |\n\n The driver doesn't support older versions of MongoDB. ## Language Compatibility The following compatibility table specifies the recommended version of the MongoDB .NET/C# Driver for use with a specific version of C#. The first column lists the driver version.\n\n Versions 1.10 and 1.11 of the driver are compatible with .NET 3.5 through 4.8 only. | \\[[1](#ref-atlas-connection-id1)\\] | When using .NET 5/6, you can't connect to Atlas clusters running MongoDB 4.0 due to a certificate issue. This does not impact clusters running MongoDB 4.2+. |\n| ---------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | | \\[[2](#ref-2.14-note-id2)\\] | .NET/C# Driver versions 2.14 or later requires .NET Framework 4.7.2 or later. |\n| --------------------------- | ----------------------------------------------------------------------------- | | \\[[3](#ref-4.5.2-id3)\\] | .NET/C# Driver versions 2.8 to 2.13 requires .NET Framework 4.5.2 or later. |\n| ----------------------- | --------------------------------------------------------------------------- | For more information on how to read the compatibility tables, see our guide on[MongoDB Compatibility Tables.](https://www.mongodb.com/docs/drivers/about-compatibility/#std-label-about-driver-compatibility) ← [Logging](https://mongodb.com/docs/drivers/csharp/current/fundamentals/logging/ \"Previous Section\")[What's New](https://mongodb.com/docs/drivers/csharp/current/whats-new/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/usage-examples/updateOne/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Update a Document On this page * [Examples](#examples)\n* [Expected Result](#expected-result)\n* [More Information](#more-information)\n* [API Documentation](#api-documentation) You can update a single document using the [UpdateOne()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/M%5FMongoDB%5FDriver%5FIMongoCollection%5F1%5FUpdateOne.htm) method on a `MongoCollection` object. This method requires a **query filter**, which specifies which document to update, and an **update** statement, which specifies the changes the driver should make to the first document matching the query filter. ## Note The `UpdateOne()` method updates only the first document that matches the filter. To update more than one document, use the [UpdateMany() method.](https://mongodb.com/docs/drivers/csharp/current/usage-examples/updateMany/#std-label-csharp-update-many) ## Tip You can pass an instance of [UpdateOptions](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FDriver%5FUpdateOptions.htm) to the `UpdateOne()` method in order to customize its behavior. ## Examples The examples on this page use the following `Restaurant`, `Address`, and `GradeEntry`classes as models: `| public class Restaurant                      |\n| -------------------------------------------- |\n| {                                            |\n| public ObjectId Id { get; set; }             |\n| public string Name { get; set; }             |\n| [BsonElement(\"restaurant_id\")]               |\n| public string RestaurantId { get; set; }     |\n| public string Cuisine { get; set; }          |\n| public Address Address { get; set; }         |\n| public string Borough { get; set; }          |\n| public List<GradeEntry> Grades { get; set; } |\n| }                                            | ` ```csharp public class Address {     public string Building { get; set; }     [BsonElement(\"coord\")]     public double[] Coordinates { get; set; }     public string Street { get; set; }     [BsonElement(\"zipcode\")]     public string ZipCode { get; set; } } \n``` ```csharp public class GradeEntry {     public DateTime Date { get; set; }     public string Grade { get; set; }     public float Score { get; set; } } \n``` ## Note The documents in the `restaurants` collection use the camel-case naming convention. The examples in this guide use a `ConventionPack`to deserialize the fields in the collection into Pascal case and map them to the properties in the `Restaurant` class. To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) The following example uses `Builders` to update the `name` of the first document named \"Bagels N Buns\" in the `restaurants` collection to \"2 Bagels 2 Buns\". Select the Asynchronous or Synchronous tab to see the corresponding code. ### Expected Result\n\n ``` Updated documents: 1 \n``` ## Tip `UpdateOne()` returns an [UpdateResult](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FDriver%5FUpdateResult.htm) object. ## More Information To learn more about updating documents, see the [Change Documents](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/change/#std-label-csharp-change-guide) guide. To learn more about using builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders) ## API Documentation * [UpdateOne()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/M%5FMongoDB%5FDriver%5FIMongoCollection%5F1%5FUpdateOne.htm)\n* [UpdateOptions](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FDriver%5FUpdateOptions.htm)\n* [UpdateResult](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FDriver%5FUpdateResult.htm) ← [Insert Multiple Documents](https://mongodb.com/docs/drivers/csharp/current/usage-examples/insertMany/ \"Previous Section\")[Update Many Documents](https://mongodb.com/docs/drivers/csharp/current/usage-examples/updateMany/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/usage-examples/insertMany/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Insert Multiple Documents On this page * [Examples](#examples)\n* [Expected Result](#expected-result)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) You can insert multiple documents into a collection by using the synchronous`InsertMany()` method or the asynchronous `InsertManyAsync()` method. ## Examples The examples on this page use the following `Restaurant`, `Address`, and `GradeEntry`classes as models: `| public class Restaurant                      |\n| -------------------------------------------- |\n| {                                            |\n| public ObjectId Id { get; set; }             |\n| public string Name { get; set; }             |\n| [BsonElement(\"restaurant_id\")]               |\n| public string RestaurantId { get; set; }     |\n| public string Cuisine { get; set; }          |\n| public Address Address { get; set; }         |\n| public string Borough { get; set; }          |\n| public List<GradeEntry> Grades { get; set; } |\n| }                                            | ` ```csharp public class Address {     public string Building { get; set; }     [BsonElement(\"coord\")]     public double[] Coordinates { get; set; }     public string Street { get; set; }     [BsonElement(\"zipcode\")]     public string ZipCode { get; set; } } \n``` ```csharp public class GradeEntry {     public DateTime Date { get; set; }     public string Grade { get; set; }     public float Score { get; set; } } \n``` ## Note The documents in the `restaurants` collection use the camel-case naming convention. The examples in this guide use a `ConventionPack`to deserialize the fields in the collection into Pascal case and map them to the properties in the `Restaurant` class. To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) The following example inserts multiple documents into the `restaurants` collection. Select the Asynchronous or Synchronous tab to see the corresponding code. ### Expected Result After running either of the preceding full examples, the output is as follows: ``` Number of restaurants found before insert: 0 Inserting documents... Number of restaurants inserted: 5 \n``` ## Additional Information To learn more about using builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders) ## API Documentation * [InsertMany()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/M%5FMongoDB%5FDriver%5FIMongoCollection%5F1%5FInsertMany.htm)\n* [InsertManyAsync()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/M%5FMongoDB%5FDriver%5FIMongoCollection%5F1%5FInsertManyAsync.htm) ← [Insert a Document](https://mongodb.com/docs/drivers/csharp/current/usage-examples/insertOne/ \"Previous Section\")[Update a Document](https://mongodb.com/docs/drivers/csharp/current/usage-examples/updateOne/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/usage-examples/updateMany/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Update Many Documents On this page * [Example](#example)\n* [Expected Result](#expected-result)\n* [More Information](#more-information)\n* [API Documentation](#api-documentation) You can update more than one document using the `UpdateMany()` method on a collection object. ## Example The examples on this page use the following `Restaurant`, `Address`, and `GradeEntry`classes as models: `| public class Restaurant                      |\n| -------------------------------------------- |\n| {                                            |\n| public ObjectId Id { get; set; }             |\n| public string Name { get; set; }             |\n| [BsonElement(\"restaurant_id\")]               |\n| public string RestaurantId { get; set; }     |\n| public string Cuisine { get; set; }          |\n| public Address Address { get; set; }         |\n| public string Borough { get; set; }          |\n| public List<GradeEntry> Grades { get; set; } |\n| }                                            | ` ```csharp public class Address {     public string Building { get; set; }     [BsonElement(\"coord\")]     public double[] Coordinates { get; set; }     public string Street { get; set; }     [BsonElement(\"zipcode\")]     public string ZipCode { get; set; } } \n``` ```csharp public class GradeEntry {     public DateTime Date { get; set; }     public string Grade { get; set; }     public float Score { get; set; } } \n``` ## Note The documents in the `restaurants` collection use the camel-case naming convention. The examples in this guide use a `ConventionPack`to deserialize the fields in the collection into Pascal case and map them to the properties in the `Restaurant` class. To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) The following code updates all documents in the `restaurants` collection that have a`cuisine` field with the value of \"Pizza\". After the update, these documents will have a `cuisine` field with a value of \"Pasta and breadsticks\". Select the Asynchronous or Synchronous tab to see the corresponding code. ### Expected Result Running either of the preceding full examples prints the following results: ``` Restaurants with cuisine \"Pizza\" found: 1163 Restaurants modified by update: 1163 Restaurants with cuisine \"Pasta and breadsticks\" found after update: 1163 Resetting sample data...done. \n``` ## More Information To learn more about updating documents, see the [Change Documents](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/change/#std-label-csharp-change-guide) guide. To learn more about using builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders) ## API Documentation\n\n ← [Update a Document](https://mongodb.com/docs/drivers/csharp/current/usage-examples/updateOne/ \"Previous Section\")[Replace a Document](https://mongodb.com/docs/drivers/csharp/current/usage-examples/replaceOne/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/quick-reference/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Quick Reference This page shows the driver syntax for several MongoDB commands and links to their related reference and API documentation. ## Tip ### Using LINQ You can perform many of the operations on this page using LINQ. For more information on using LINQ with the .NET/C# Driver, see the[LINQ Fundamentals page.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/linq/#std-label-csharp-linq)\n\n ← [Quick Start](https://mongodb.com/docs/drivers/csharp/current/quick-start/ \"Previous Section\")[Usage Examples](https://mongodb.com/docs/drivers/csharp/current/usage-examples/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/usage-examples/replaceOne/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Replace a Document On this page * [Example](#example)\n* [Expected Result](#expected-result)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) You can replace one document with another by using the `ReplaceOne()` synchronous method or the `ReplaceOneAsync()` asynchronous method on a collection object. ## Example The examples on this page use the following `Restaurant`, `Address`, and `GradeEntry`classes as models: `| public class Restaurant                      |\n| -------------------------------------------- |\n| {                                            |\n| public ObjectId Id { get; set; }             |\n| public string Name { get; set; }             |\n| [BsonElement(\"restaurant_id\")]               |\n| public string RestaurantId { get; set; }     |\n| public string Cuisine { get; set; }          |\n| public Address Address { get; set; }         |\n| public string Borough { get; set; }          |\n| public List<GradeEntry> Grades { get; set; } |\n| }                                            | ` ```csharp public class Address {     public string Building { get; set; }     [BsonElement(\"coord\")]     public double[] Coordinates { get; set; }     public string Street { get; set; }     [BsonElement(\"zipcode\")]     public string ZipCode { get; set; } } \n``` ```csharp public class GradeEntry {     public DateTime Date { get; set; }     public string Grade { get; set; }     public float Score { get; set; } } \n``` ## Note The documents in the `restaurants` collection use the camel-case naming convention. The examples in this guide use a `ConventionPack`to deserialize the fields in the collection into Pascal case and map them to the properties in the `Restaurant` class. To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) The following code replaces the first document in the `restaurants` collection that has a value of \"Pizza\" in the `cuisine` field. After the replacement, this document will have a `name` field with a value of \"Mongo's Pizza\" and new values for the`address` and `borough` fields. Select the Asynchronous or Synchronous tab to see the corresponding code. ### Expected Result Running either of the preceding full examples prints the following results: ``` First pizza restaurant before replacement: J&V Famous Pizza Restaurants modified by replacement: 1 First pizza restaurant after replacement: Mongo's Pizza Resetting sample data...done. \n``` ## Additional Information To learn more about replacing documents, see the [Replace Operation](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/change/#std-label-csharp-replace-operation)guide. To learn more about using builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders) ## API Documentation\n\n ← [Update Many Documents](https://mongodb.com/docs/drivers/csharp/current/usage-examples/updateMany/ \"Previous Section\")[Delete a Document](https://mongodb.com/docs/drivers/csharp/current/usage-examples/deleteOne/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/usage-examples/insertOne/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Insert a Document On this page * [Examples](#examples)\n* [Expected Result](#expected-result)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) You can insert a single document into a collection by using the synchronous`InsertOne()` method, or the asynchronous `InsertOneAsync()` method. ## Examples The examples on this page use the following `Restaurant`, `Address`, and `GradeEntry`classes as models: `| public class Restaurant                      |\n| -------------------------------------------- |\n| {                                            |\n| public ObjectId Id { get; set; }             |\n| public string Name { get; set; }             |\n| [BsonElement(\"restaurant_id\")]               |\n| public string RestaurantId { get; set; }     |\n| public string Cuisine { get; set; }          |\n| public Address Address { get; set; }         |\n| public string Borough { get; set; }          |\n| public List<GradeEntry> Grades { get; set; } |\n| }                                            | ` ```csharp public class Address {     public string Building { get; set; }     [BsonElement(\"coord\")]     public double[] Coordinates { get; set; }     public string Street { get; set; }     [BsonElement(\"zipcode\")]     public string ZipCode { get; set; } } \n``` ```csharp public class GradeEntry {     public DateTime Date { get; set; }     public string Grade { get; set; }     public float Score { get; set; } } \n``` ## Note The documents in the `restaurants` collection use the camel-case naming convention. The examples in this guide use a `ConventionPack`to deserialize the fields in the collection into Pascal case and map them to the properties in the `Restaurant` class. To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) The following example inserts a document into the `restaurants` collection. Select the Asynchronous or Synchronous tab to see the corresponding code. ### Expected Result After running either of the preceding full examples, the `InsertOne()`method inserts the document, and the [Find()](https://mongodb.com/docs/drivers/csharp/current/usage-examples/findOne/#std-label-csharp-find-one) method returns the newly inserted document. The output is similar to the following: ``` Inserting a document... Document Inserted: { \"_id\" : ObjectId(\"...\"), \"name\" : \"Mongo's Pizza\", \"restaurant_id\" : \"12345\", \"cuisine\" : \"Pizza\", \"address\" : { \"_t\" : \"MongoDB.Bson.BsonDocument, MongoDB.Bson\", \"_v\" : { \"street\" : \"Pizza St\", \"zipcode\" : \"10003\" } }, \"borough\" : \"Manhatten\", \"grades\" : [{ \"_t\" : \"MongoDB.Bson.BsonDocument, MongoDB.Bson\", \"_v\" : { } }] } \n``` ## Additional Information To learn more about using builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders) ## API Documentation\n\n ← [Find Multiple Documents](https://mongodb.com/docs/drivers/csharp/current/usage-examples/findMany/ \"Previous Section\")[Insert Multiple Documents](https://mongodb.com/docs/drivers/csharp/current/usage-examples/insertMany/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/usage-examples/deleteOne/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Delete a Document On this page * [Examples](#examples)\n* [Delete a Document Using Builders](#delete-a-document-using-builders)\n* [Expected Result](#expected-result)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) You can delete a document from a collection by using the synchronous`DeleteOne()` method, or the asynchronous `DeleteOneAsync()` method. ## Note The `DeleteOne()` method deletes only the first document that matches the filter. To delete more than one document, use the `DeleteMany()` method. To learn more about using `DeleteMany()`, see [Delete Many Documents.](https://mongodb.com/docs/drivers/csharp/current/usage-examples/deleteMany/#std-label-csharp-delete-many) ## Examples The examples on this page use the following `Restaurant`, `Address`, and `GradeEntry`classes as models: `| public class Restaurant                      |\n| -------------------------------------------- |\n| {                                            |\n| public ObjectId Id { get; set; }             |\n| public string Name { get; set; }             |\n| [BsonElement(\"restaurant_id\")]               |\n| public string RestaurantId { get; set; }     |\n| public string Cuisine { get; set; }          |\n| public Address Address { get; set; }         |\n| public string Borough { get; set; }          |\n| public List<GradeEntry> Grades { get; set; } |\n| }                                            | ` ```csharp public class Address {     public string Building { get; set; }     [BsonElement(\"coord\")]     public double[] Coordinates { get; set; }     public string Street { get; set; }     [BsonElement(\"zipcode\")]     public string ZipCode { get; set; } } \n``` ```csharp public class GradeEntry {     public DateTime Date { get; set; }     public string Grade { get; set; }     public float Score { get; set; } } \n``` ## Note The documents in the `restaurants` collection use the camel-case naming convention. The examples in this guide use a `ConventionPack`to deserialize the fields in the collection into Pascal case and map them to the properties in the `Restaurant` class. To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) ### Delete a Document Using Builders The following example uses `Builders` to delete a document in the `restaurants` collection with the `name` \"Ready Penny Inn\". Select the Asynchronous or Synchronous tab to see the corresponding code. ### Expected Result Running either of the preceding full examples prints the following results: ``` Deleting a document with builders... Deleted documents: 1 \n``` ## Additional Information To learn more about deleting documents, see the [Delete Documents](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/delete/#std-label-csharp-delete-guide) guide. To learn more about using builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders) ## API Documentation\n\n ← [Replace a Document](https://mongodb.com/docs/drivers/csharp/current/usage-examples/replaceOne/ \"Previous Section\")[Delete Many Documents](https://mongodb.com/docs/drivers/csharp/current/usage-examples/deleteMany/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/logging/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Logging On this page * [Overview](#overview)\n* [Configure Logging](#configure-logging)\n* [Log Messages by Category](#log-messages-by-category)\n* [Configure Log Verbosity](#configure-log-verbosity) ## Overview Starting in version 2.18, the .NET/C# Driver uses the standard[.NET logging API.](https://learn.microsoft.com/en-us/dotnet/core/extensions/logging?tabs=command-line)In this guide, you can learn how to use the driver to configure logging for your application. ## Configure Logging To specify the logging settings for your application, create a new instance of the`LoggingSettings` class, then assign it to the `LoggingSettings` property of your`MongoClientSettings` object. The `LoggingSettings` constructor accepts the following parameters: | Property        | Description                                                                                                                                                                                                                                                                                               |\n| --------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LoggerFactory   | The ILoggerFactory object that creates an ILogger. You can create an ILoggerFactory object by using the LoggerFactory.Create() method.**Data Type**: [ILoggerFactory](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.iloggerfactory?view=dotnet-plat-ext-7.0)**Default**: null |\n| MaxDocumentSize | Optional. The maximum number of characters for extended JSON documents in logged messages.For example, when the driver logs the CommandStarted message, it truncates the Command field to the number of characters specified in this parameter.**Data Type**: integer**Default**: 1000                    | The following code sample shows how to create a `MongoClient` that logs all debug messages to the console:\n\n ` ## Log Messages by Category Each message generated by a MongoDB cluster is assigned a _category_. This lets you specify different log levels for different types of messages. MongoDB uses the following categories to classify messages: | Category                | Description                                                                                                                                                                                        |\n| ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| MongoDB.Command         | The progress of commands run against your cluster, represented byCommandStartedEvent, CommandSucceededEvent, and CommandFailedEvent                                                                |\n| MongoDB.SDAM            | Changes in the topology of the cluster, includingClusterAddedServerEvent, ClusterRemovedServerEvent,ServerHeartbeatStartedEvent, ClusterDescriptionChangedEvent, and ServerDescriptionChangedEvent |\n| MongoDB.ServerSelection | The decisions that determine which server to send a particular command to                                                                                                                          |\n| MongoDB.Connection      | Changes in the cluster connection pool, including ConnectionPoolReadyEvent,ConnectionPoolClosedEvent, ConnectionCreatedEvent, andConnectionCheckoutEvent                                           |\n| MongoDB.Internal.\\*     | Prefix for all other .NET/C# Driver internal components                                                                                                                                            | ## Tip You can specify the minimum verbosity for all logging categories by configuring the`Default` category. ## Configure Log Verbosity You can configure the log verbosity of each message category by using the standard .NET logging mechanism. The following code sample shows how to configure a `MongoClient`to log two types of messages: * All messages with log level `Error` or higher from all categories\n* All messages with log level `Debug` or higher from the SDAM category In this example, the configuration is done in-memory. The code creates a`Dictionary<string, string>` where the key is `\"LogLevel:<category>\"` and the value is the minimum log level of messages in that category. The code then adds the dictionary to a `ConfigurationBuilder` object, then adds the `ConfigurationBuilder`to a `LoggerFactory`. ```csharp\n\n {   { \"LogLevel:Default\", \"Error\" },   { \"LogLevel:MongoDB.SDAM\", \"Debug\" } }; var config = new ConfigurationBuilder()   .AddInMemoryCollection(categoriesConfiguration)   .Build(); using var loggerFactory = LoggerFactory.Create(b => {   b.AddConfiguration(config);   b.AddSimpleConsole(); }); var settings = MongoClientSettings.FromConnectionString(\"<your connection string>\"); settings.LoggingSettings = new LoggingSettings(loggerFactory); var client = new MongoClient(settings); \n``` ## Tip For more information on configuring log verbosity, see the[Microsoft .NET logging documentation.](https://learn.microsoft.com/en-us/dotnet/core/extensions/logging?tabs=command-line#configure-logging) ← [Class Mapping](https://mongodb.com/docs/drivers/csharp/current/fundamentals/class-mapping/ \"Previous Section\")[Compatibility](https://mongodb.com/docs/drivers/csharp/current/compatibility/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/crud/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # CRUD Operations * [Read Operations](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/#std-label-csharp-crud-read-operations)\n* [Write Operations](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/#std-label-csharp-crud-write-operations) ← [Enable TLS on a Connection](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/tls/ \"Previous Section\")[Write Operations](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/authentication/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Authentication Mechanisms On this page * [Overview](#overview)\n* [Specify an Authentication Mechanism](#specify-an-authentication-mechanism)\n* [Mechanisms](#mechanisms)\n* [Default](#default)\n* [SCRAM-SHA-256](#scram-sha-256)\n* [SCRAM-SHA-1](#scram-sha-1)\n* [X.509](#x.509)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to authenticate with MongoDB using the**authentication mechanisms** available in the MongoDB Community Edition. Authentication mechanisms are processes by which the driver and server confirm the identity of a client to ensure security before connecting. You can use the following authentication mechanisms with the latest version of MongoDB Community Edition: * [SCRAM-SHA-256](#std-label-csharp-scram-sha-256)\n* [SCRAM-SHA-1](#std-label-csharp-scram-sha-1)\n* [X.509](#std-label-csharp-x509) To authenticate using `GSSAPI/Kerberos` or `LDAP`, see the[Enterprise Authentication Mechanisms](https://mongodb.com/docs/drivers/csharp/current/fundamentals/enterprise-authentication/#std-label-csharp-enterprise-authentication-mechanisms) fundamentals page. For more information on establishing a connection to your MongoDB cluster, see the[Connection Guide.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/connect/#std-label-csharp-connect-to-mongodb) ## Specify an Authentication Mechanism You can specify your authentication mechanism and credentials when connecting to MongoDB using either of the following methods: * A **connection string**, also known as a **connection URI**, which is a string that tells the driver how to connect to a MongoDB deployment and how to behave while connected.\n* A factory method for the supported authentication mechanism, contained in the`MongoCredential` class. ## Mechanisms The following examples specify authentication mechanisms using the following placeholders: * `<username>`: Your MongoDB username.\n* `<password>`: Your MongoDB user's password.\n* `<hostname>`: The network address of your MongoDB server, accessible by your client.\n* `<port>`: The port number of your MongoDB server.\n* `<authenticationDb>`: The MongoDB database that contains your user's authentication data. If you omit this parameter, the driver uses the default value `admin`. ### Default The default authentication mechanism setting uses one of the following authentication mechanisms, depending on which MongoDB versions your server supports: * `SCRAM-SHA-256`\n* `SCRAM-SHA-1`\n* `MONGODB-CR` ## Note MongoDB version 4.0 uses SCRAM as the default mechanism, and no longer supports `MONGODB-CR`. Select the Connection String or MongoCredential tab to see the corresponding syntax for specifying the default authentication mechanism: ### SCRAM-SHA-256 `SCRAM-SHA-256` is a salted challenge-response authentication mechanism (SCRAM) that uses your username and password, encrypted with the `SHA-256` algorithm, to authenticate your user. You can specify the `SCRAM-SHA-256` authentication mechanism with your connection string as follow: `| var mongoClient = new MongoClient(\"mongodb://<username>:<password>@<hostname>:<port>/?authSource=<authenticationDb>&authMechanism=SCRAM-SHA-256\"); |\n| -------------------------------------------------------------------------------------------------------------------------------------------------- | ` ## Tip ### Default Mechanism MongoDB version 4.0 and later uses `SCRAM-SHA-256` as the default authentication mechanism if the MongoDB server version supports it. To learn more on specifying the default mechanism, see [Default.](#std-label-csharp-authentication-default) ### SCRAM-SHA-1 `SCRAM-SHA-1` is s a salted challenge-response mechanism (SCRAM) that uses your username and password, encrypted with the `SHA-1` algorithm, to authenticate your user. You can specify the `SCRAM-SHA-1` authentication mechanism with your connection string as follow: ```csharp\n\n \n``` ## Tip ### Default Mechanism MongoDB version 4.0 uses `SCRAM-SHA-1` as the default authorization mechanism if the server does not support `SCRAM-SHA-256`. To learn more on specifying the default mechanism, see [Default.](#std-label-csharp-authentication-default) ### X.509 The `X.509` authentication mechanism uses [TLS](https://en.wikipedia.org/wiki/Transport%5FLayer%5FSecurity)with `X.509` certificates to authenticate your user, identified by the distinguished names of your client certificate. When you specify the`X.509` authentication mechanism, the server authenticates the connection using the subject name of the client certificate. To learn more about using TLS/SSL, see our [TLS/SSL guide.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/tls/#std-label-csharp-tls) To learn more about `X.509` certificates, see the [X.509 Server Manual Entry.](https://www.mongodb.com/docs/manual/tutorial/configure-x509-client-authentication/#std-label-x509-client-authentication) Select the Connection String or MongoCredential tab to see the corresponding syntax for specifying the `X.509` authentication mechanism: ## API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation: * [MongoCredential()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FDriver%5FMongoCredential.htm)\n* [MongoClient()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FDriver%5FMongoClient.htm)\n* [MongoClientSettings](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FDriver%5FMongoClientSettings.htm)\n* [CreateCredential()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/M%5FMongoDB%5FDriver%5FMongoCredential%5FCreateCredential%5F1.htm)\n* [CreateMongoX509Credential()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/M%5FMongoDB%5FDriver%5FMongoCredential%5FCreateMongoX509Credential.htm) ← [Stable API](https://mongodb.com/docs/drivers/csharp/current/fundamentals/stable-api/ \"Previous Section\")[Enterprise Authentication Mechanisms](https://mongodb.com/docs/drivers/csharp/current/fundamentals/enterprise-authentication/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Data Formats * [Work with BSON](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/bson/#std-label-csharp-bson)\n* [Work with POCOs](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-poco)\n* [GUID Serialization](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/guid-serialization/#std-label-csharp-guids) ← [Atlas Search](https://mongodb.com/docs/drivers/csharp/current/fundamentals/atlas-search/ \"Previous Section\")[Work with BSON](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/bson/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/stable-api/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Stable API On this page * [Overview](#overview)\n* [Enable the Stable API on a MongoDB Client](#enable-the-stable-api-on-a-mongodb-client)\n* [Stable API Options](#stable-api-options)\n* [API Documentation](#api-documentation) ## Note The Stable API feature requires MongoDB Server 5.0 or later. You should use the Stable API feature only if all of the MongoDB servers you're connecting to support this feature. ## Overview In this guide, you can learn how to specify **Stable API** compatibility when connecting to a MongoDB instance or replica set. The Stable API feature forces the server to run operations with behaviors compatible with the API version you specify. When you update either your driver or server, the API version changes, which can change the way these operations behave. Using the Stable API ensures consistent responses from the server and provides long-term API stability for your application. The following sections describe how you can enable and customize Stable API for your MongoDB client. For more information about the Stable API, including a list of the commands it covers, see the [MongoDB reference page.](https://www.mongodb.com/docs/manual/reference/stable-api/) ## Enable the Stable API on a MongoDB Client To enable the Stable API, you must specify an API version in the settings of your MongoDB client. Once you instantiate a `MongoClient` instance with a specified API version, all commands you run with the client use that version of the Stable API. ## Tip Once you've created a `MongoClient`, you can't change its Stable API version. If you need to run commands using more than one version of the Stable API, instantiate a separate client with that version. If you need to run commands not covered by the Stable API, make sure the \"strict\" option is disabled. See the section on[Stable API Options](#std-label-stable-api-options) for more information. The following example shows how you can instantiate a `MongoClient` with a Stable API version and connect to a server through the following operations: 1. Construct a `ServerApi` instance and specify a Stable API version.\n2. Construct a `MongoClientSettings` object and set the `ServerApi` property.\n3. Create a `MongoClient` with the `MongoClientSettings` object. `| var serverApi = new ServerApi(ServerApiVersion.V1);               |\n| ----------------------------------------------------------------- |\n| var settings = new MongoClientSettings { ServerApi = serverApi }; |\n| var client = new MongoClient(settings);                           | ` ## Warning If you specify an API version and connect to a MongoDB server that does not support the Stable API, your code might raise an exception when executing a command on your MongoDB server. If you use a `MongoClient`that specifies the API version to query a server that doesn't support that version, your query could fail with an exception message that includes the following text: ``` 'Unrecognized field 'apiVersion' on server... \n``` ## Stable API Options You can use the options in the following table to customize the behavior of the Stable API.\n\n The following example shows how you can set these options when constructing a`ServerApi` object: ```csharp var serverApi = new ServerApi(ServerApiVersion.V1, strict: true,     deprecationErrors: true); \n``` ## API Documentation For more information on using the Stable API with the MongoDB .NET/C# Driver, see the following API documentation: * [MongoClient](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FDriver%5FMongoClient.htm)\n* [MongoClientSettings](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FDriver%5FMongoClientSettings.htm)\n* [ServerApiVersion](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FDriver%5FServerApiVersion.htm)\n* [ServerApi](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FDriver%5FServerApi.htm) ← [GUID Serialization](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/guid-serialization/ \"Previous Section\")[Authentication Mechanisms](https://mongodb.com/docs/drivers/csharp/current/fundamentals/authentication/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/enterprise-authentication/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Enterprise Authentication Mechanisms On this page * [Overview](#overview)\n* [Authenticate with GSSAPI/Kerberos](#authenticate-with-gssapi-kerberos)\n* [Additional Properties](#additional-properties)\n* [Authenticate with LDAP (PLAIN)](#authenticate-with-ldap--plain-)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to authenticate with MongoDB using the**authentication mechanisms** available only in the MongoDB Enterprise Edition. Authentication mechanisms are processes by which the driver and server confirm the identity of a client to ensure security before connecting. You can use the following authentication mechanisms with the latest version of MongoDB Enterprise Edition. * [GSSAPI/Kerberos](#std-label-csharp-kerberos)\n* [LDAP (Plain)](#std-label-csharp-LDAP) To authenticate using another mechanism, see the[Authentication Mechanisms](https://mongodb.com/docs/drivers/csharp/current/fundamentals/authentication/#std-label-csharp-authentication-mechanisms) fundamentals page. For more information on establishing a connection to your MongoDB cluster, see the[Connection Guide.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/connect/#std-label-csharp-connect-to-mongodb) You can specify your authentication mechanism and credentials when connecting to MongoDB using either of the following methods: * A **connection string**, also known as a **connection URI**, which is a string that tells the driver how to connect to a MongoDB deployment and how to behave while connected.\n* A factory method for the supported authentication mechanism, contained in the`MongoCredential` class. ## Authenticate with GSSAPI/Kerberos The Generic Security Services API (GSSAPI) authentication mechanism allows the user to authenticate to a Kerberos service using the user's principal name. The following examples specify the authentication mechanism using the following placeholders: * `<username>`: Your [URL-encoded](https://en.wikipedia.org/wiki/Percent-encoding) principal name; for example \"username%40REALM.ME\"\n* `<password>`: Your Kerberos user's password\n* `<hostname>`: The network address of your MongoDB server, accessible by your client Select the Connection String or MongoCredential tab to see the corresponding syntax for specifying the GSSAPI/Kerberos authentication mechanism: ## Tip ### Omitting the Password You can omit the password if one of the following are true: * On Windows, the process owner running the application is the same as the user needing authentication.\n* On Linux, the user has initialized their keytab via `kinit username@REALM.COM`. ### Additional Properties You can specify additional properties with your authentication mechanism using the connection string or a factory method in the `MongoCredential`class. #### Fully Qualified Domain Name The following example shows how to use the DNS server to retrieve the fully qualified domain name of the host: #### Realm The following example shows how to specify the user's realm when it is different from the service's realm: #### Service name The following example shows how to specify the service name when it is not the default `mongodb`: #### Multiple properties The following example shows how to specify multiple authentication mechanism properties: ## Authenticate with LDAP (PLAIN) You can authenticate to a Lightweight Directory Access Protocol (LDAP) server using your directory-server username and password. The following examples specify the authentication mechanism using the following placeholders: * `<username>`: Your LDAP username\n* `<password>`: Your LDAP password\n* `<hostname>`: The network address of your MongoDB server, accessible by your client\n* `<authenticationDb>`: The MongoDB database that contains your user's authentication Select the Connection String or MongoCredential tab to see the corresponding syntax for specifying the LDAP authentication mechanism: ## API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation:\n\n ← [Authentication Mechanisms](https://mongodb.com/docs/drivers/csharp/current/fundamentals/authentication/ \"Previous Section\")[LINQ](https://mongodb.com/docs/drivers/csharp/current/fundamentals/linq/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/connection/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Connection On this page * [Overview](#overview) ## Overview In this section, you'll learn how to use the .NET/C# Driver to connect your application to a MongoDB deployment. Click a link in the following list to jump to a topic: * [How to Connect to MongoDB](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/connect/#std-label-csharp-connect-to-mongodb)\n* [Connection Options](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/connection-options/#std-label-csharp-connection-options) ← [Fundamentals](https://mongodb.com/docs/drivers/csharp/current/fundamentals/ \"Previous Section\")[Connection Guide](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/connect/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/builders/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Operations with Builders On this page * [Overview](#overview)\n* [Sample Class](#sample-class)\n* [Construct a Filter](#construct-a-filter)\n* [Array Operators](#array-operators)\n* [Create a Projection](#create-a-projection)\n* [Lambda Expressions](#lambda-expressions)\n* [Define a Sort](#define-a-sort)\n* [Define an Update](#define-an-update)\n* [Define Index Keys](#define-index-keys)\n* [Build an Aggregation Pipeline](#build-an-aggregation-pipeline)\n* [Build an Atlas Search Query](#build-an-atlas-search-query)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn about the helper classes, or **builders**, that the .NET/C# Driver provides to create types used in your operations. Using builders helps you identify errors at compile time and avoid them at runtime. This guide provides information on builder classes that you can use for the following tasks: * Creating a filter definition\n* Creating a projection\n* Defining a sort order\n* Defining an update operation\n* Selecting index keys ## Tip ### MongoDB Analyzer The MongoDB Analyzer is a tool that helps you analyze your builders definitions and understand how your .NET/C# code translates into the MongoDB Query API. For more information and installation instructions, see the [MongoDB Analyzer reference page.](https://www.mongodb.com/docs/mongodb-analyzer/current/) You should read this guide if you want to learn more about how to construct definitions and build up syntax using builders. ## Sample Class The code examples in this guide demonstrate how you can use builders to create types to interact with documents in the sample collection `plants.flowers`. Documents in this collection are modeled by the following `Flower` class: `| public class Flower                      |\n| ---------------------------------------- |\n| {                                        |\n| public ObjectId Id { get; set; }         |\n| public string Name { get; set; }         |\n| public string Category { get; set; }     |\n| public double Price { get; set; }        |\n| public List<string> Season { get; set; } |\n| public double Stock { get; set; }        |\n| public string Description { get; set; }  |\n| }                                        | ` Each builder class takes a generic type parameter`TDocument` which represents the type of document that you are working with. In this guide, the `Flower` class is the document type used in each builder class example. ## Construct a Filter The `FilterDefinitionBuilder` class provides a type-safe interface for building up queries. Suppose you want to query your collection for documents matching the following criteria: * `Price` field value less than 20\n* `Category` field value is \"Perennial\" Use builders to create the filter definition with the typed variant: ```csharp var builder = Builders<Flower>.Filter; var filter = builder.Lt(f => f.Price, 20) & builder.Eq(f => f.Category, \"Perennial\"); \n``` Using the typed variant form provides compile-time safety. Additionally, your IDE can provide refactoring support. Alternatively, you can use string-based field names to contruct the filter: ```csharp var builder = Builders<Flower>.Filter; var filter = builder.Lt(\"Price\", 20) & builder.Eq(\"Category\", \"Perennial\"); \n``` ### Array Operators\n\n Use builders to check which documents in the collection have a`Season` array that includes \"winter\": ```csharp var builder = Builders<Flower>.Filter; var filter = builder.AnyEq(f => f.Season, \"winter\"); \n``` ## Create a Projection The `ProjectionDefinitionBuilder` class provides a type-safe interface for defining a projection. Suppose you want to create a projection on the`Name` and `Price` fields, but exclude the `Id` field. Use builders to create the projection definition with the typed variant: ```csharp var builder = Builders<Flower>.Projection; var projection = builder.Include(f => f.Name).Include(f => f.Price).Exclude(f => f.Id); \n``` You can also use string-based field names to define the projection: ```csharp var builder = Builders<Flower>.Projection; var projection = builder.Include(\"Name\").Include(\"Price\").Exclude(\"Id\"); \n``` Finally, you can use the `Expression()` method to define the projection: ```csharp var builder = Builders<Flower>.Projection; var projection = builder.Expression(f => new { Name = f.Name, Price = f.Price }); \n``` This definition has a return type of `ProjectionDefinition<TDocument, TProjection>` whereas the others return a`ProjectionDefinition<TDocument>`. ### Lambda Expressions The driver supports using lambda expressions to render projections. When you define a `Find()` projection with the `Expression()` method to create a lambda expression, the driver inspects the expression to determine which fields are referenced and automatically constructs a server-side projection to return only those fields. You can also use lambda expressions to create new fields by performing operations on values in your documents. The following example shows how you can use a lambda expression to project a new `Profit` field using the `Price` and `Stock` fields: ```csharp var builder = Builders<Flower>.Projection; var projection = builder.Expression(f => new { Profit = f.Price * f.Stock }); \n``` ## Note ### Id Field Exclusion When you create a projection using a lambda expression, the output automatically excludes the `Id` field unless you explicitly include is as a projection field. ## Define a Sort The `SortDefinitionBuilder` class provides a type-safe interface for building up sort syntax. Suppose you want to define a sort with the following order: * Ascending on `Price`\n* Descending on `Category` Use builders to create the sort definition with the typed variant: ```csharp var builder = Builders<Flower>.Sort; var sort = builder.Ascending(f => f.Price).Descending(f => f.Category); \n``` Alternatively, you can use string-based field names to define the sort: ```csharp var builder = Builders<Flower>.Sort; var sort = builder.Ascending(\"Price\").Descending(\"Category\"); \n``` ## Define an Update The `UpdateDefinitionBuilder` class provides a type-safe interface for building up an update specification. Suppose you want to create an update specification with the following criteria: * Create the new field `SunRequirement`\n* Multiply the `Price` field value by 0.9 Use builders to create the update specification with the typed variant: ```csharp var builder = Builders<Flower>.Update; var update = builder.Set(f => f.SunRequirement, \"Full sun\").Mul(f => f.Price, 0.9); \n``` Alternatively, you can use string-based field names to define the update: ```csharp var builder = Builders<Flower>.Update; var update = builder.Set(\"SunRequirement\", \"Full sun\").Mul(\"Price\", 0.9); \n``` ## Define Index Keys The `IndexKeysDefinitionBuilder` class provides a type-safe interface for defining index keys. Suppose you want to select `Category` as an ascending index key. Use builders to select the index key with the typed variant: ```csharp var builder = Builders<Flower>.IndexKeys; var keys = builder.Ascending(f => f.Category); \n``` Alternatively, you can use string-based field names to select the index key: ```csharp var builder = Builders<BsonDocument>.IndexKeys; var keys = builder.Ascending(\"Category\"); \n```\n\n ## Build an Aggregation Pipeline The `PipelineDefinitionBuilder` class provides a type-safe interface for defining an **aggregation pipeline**. An aggregation pipeline is a series of stages that are used to transform a document. Suppose you want to create a pipeline that performs the following operations: * Matches all documents with \"spring\" in the `Season` field\n* Sorts the results by the `Category` field\n* Groups the documents by category and shows the average price and total available for all documents in that category Use `PipelineDefinitionBuilder` classes to build the pipeline: ```csharp var sortBuilder = Builders<Flower>.Sort.Ascending(f => f.Category); var matchFilter = Builders<Flower>.Filter.AnyEq(f => f.Season, \"spring\"); var pipeline = new EmptyPipelineDefinition<Flower>()     .Match(matchFilter)     .Sort(sortBuilder)     .Group(f => f.Category,            g => new               {                  name = g.Key,                  avgPrice = g.Average(f => f.Price),                  totalAvailable = g.Sum(f => f.Stock)                }           ); \n``` The preceding example creates the following pipeline: ``` [{ \"$match\" : { \"season\" : \"spring\" } }, { \"$sort\" : { \"category\" : 1 } }, { \"$group\" : { \"_id\" : \"$category\", \"avgPrice\" : { \"$avg\" : \"$price\" }, \"totalAvailable\" : { \"$sum\" : \"$stock\" } } }] \n``` You can add stages to your pipeline that don't have corresponding type-safe methods in the `PipelineDefinitionBuilder` interface by providing your query as a `BsonDocument` to the [AppendStage() method.](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/M%5FMongoDB%5FDriver%5FPipelineDefinitionBuilder%5FAppendStage%5F%5F3.htm) ```csharp var pipeline = new EmptyPipelineDefinition<BsonDocument>().AppendStage<BsonDocument, BsonDocument, BsonDocument>(\"{ $set: { field1: '$field2' } }\"); \n``` ## Note When using a `BsonDocument` to define your pipeline stage, the driver does not take into account any `BsonClassMap`, serialization attributes or serialization conventions. The field names used in the `BsonDocument` must match those stored on the server. For more information on providing a query as a `BsonDocument`, see our[FAQ page.](https://mongodb.com/docs/drivers/csharp/current/faq/#std-label-csharp-faq-unsupported-expressions) To learn more about the Aggregation Pipeline, see the[Aggregation Pipeline](https://www.mongodb.com/docs/manual/core/aggregation-pipeline/) server manual page. ## Build an Atlas Search Query The `Search` class provides a type-safe interface for creating a[$search](https://www.mongodb.com/docs/manual/reference/operator/aggregation/search/)pipeline stage. To learn how to construct search queries with the `Search` class, see[Atlas Search.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/atlas-search/#std-label-csharp-atlas-search) ## Additional Information Find runnable examples using builders for various operations under[Usage Examples.](https://mongodb.com/docs/drivers/csharp/current/usage-examples/#std-label-csharp-usage-examples) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation:\n\n ← [Specify a Query](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/specify-query/ \"Previous Section\")[Atlas Search](https://mongodb.com/docs/drivers/csharp/current/fundamentals/atlas-search/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/atlas-search/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Atlas Search On this page * [Overview](#overview)\n* [Create an Atlas Search Index](#create-an-atlas-search-index)\n* [Atlas Search Operators](#atlas-search-operators)\n* [Autocomplete](#autocomplete)\n* [Compound](#compound)\n* [Equals](#equals)\n* [Exists](#exists)\n* [GeoShape](#geoshape)\n* [GeoWithin](#geowithin)\n* [MoreLikeThis](#morelikethis)\n* [Near](#near)\n* [Phrase](#phrase)\n* [QueryString](#querystring)\n* [Range](#range)\n* [Regex](#regex)\n* [Span](#span)\n* [Text](#text)\n* [Wildcard](#wildcard) ## Overview In this guide you can learn how to use the `Search` builder to build a `$search`aggregation pipeline stage with the MongoDB .NET/C# Driver. To learn more about the `$search` pipeline stage, see [$search.](https://www.mongodb.com/docs/manual/reference/operator/aggregation/search/) ## Note ### Only Available on Atlas for MongoDB v4.2 and Later The `$search` aggregation-pipeline operator is available only for collections hosted on [MongoDB Atlas](https://www.mongodb.com/docs/atlas/) clusters running MongoDB v4.2 or later that are covered by an [Atlas search index](https://www.mongodb.com/docs/atlas/reference/atlas-search/index-definitions/). To earn more about the required setup and the functionality of this operator, see the [Atlas Search](https://www.mongodb.com/docs/atlas/atlas-search/#std-label-fts-top-ref) documentation. The examples in this guide use the following documents in a collection called`guitars`: `| { \"_id\": 1, \"make\": \"Fender\", \"description\": \"Classic guitars known for their versatility.\", \"establishedYear\": 1946, \"in-stock\": true, \"rating\": 9 }               |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| { \"_id\": 2, \"make\": \"Gibson\", \"description\": \"Classic guitars known for their rich, full tones.\", \"establishedYear\": 1902, \"in-stock\": true, \"rating\": 8 }          |\n| { \"_id\": 3, \"make\": \"PRS\", \"description\": \"High-end guitars known for their quality.\", \"establishedYear\": 1985, \"in-stock\": true, \"rating\": 9 }                     |\n| { \"_id\": 4, \"make\": \"Kiesel\", \"description\": \"Quality guitars made only for custom orders.\", \"establishedYear\": 2015, \"in-stock\": false }                           |\n| { \"_id\": 5, \"make\": \"Ibanez\", \"description\": \"Well-crafted guitars used by many professional guitarists.\", \"establishedYear\": 1957, \"in-stock\": true, \"rating\": 7 } |\n| { \"_id\": 6, \"make\": \"Strandberg\", \"description\": \"Modern guitars known for their headless models.\", \"establishedYear\": 1982, \"in-stock\": false }                    | ` The following `Guitar` class models the documents in this collection. ```csharp public class Guitar {     public int Id { get; set; }     public string Make { get; set; }     public List<string> Models { get; set; }     public int EstablishedYear { get; set; }     [BsonElement(\"in-stock\")]     public bool InStock { get; set; }     public int? Rating { get; set; } } \n``` ## Note\n\n To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) ## Create an Atlas Search Index Before you can perform a search on an Atlas collection, you must first create an **Atlas Search index** on the collection. An Atlas Search index is a data structure that categorizes data in a searchable format. To learn how to create an Atlas Search Index see the[Create an Atlas Search Index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/) Atlas guide. ## Atlas Search Operators The `Search` class contains methods you can use to perform `$search`operations. For a full list of available `$search` operators, see the [Operators and Collectors](https://www.mongodb.com/docs/atlas/atlas-search/operators-and-collectors/) Atlas guide. ## Note The `Search` class does not currently support the `$embeddedDocument` operator. ### Autocomplete Use the `Autocomplete` method to search for a word or phrase that contains a sequence of characters from an incomplete input string. The following example performs an autocomplete search on the `guitars`collection using the string \"Gib\" in the `make` field. ```csharp var result = guitarsCollection.Aggregate()     .Search(Builders<Guitar>.Search.Autocomplete(g => g.Make, \"Gib\"))     .ToList(); \n``` The search returns the following document: ``` { \"_id\" : 2, \"make\" : \"Gibson\", \"description\" : \"Classic guitars known for their rich, full tones.\", \"establishedYear\" : 1902, \"in-stock\" : true, \"rating\" : 8 } \n``` To learn more about the `autocomplete` operator, see the [autocomplete](https://www.mongodb.com/docs/atlas/atlas-search/autocomplete/)Atlas guide. ### Compound Use the `Compound` method to combine two or more operators into a single search. The following example searches the `guitars` collection for any documents that match all of the following criteria: * The `rating` field exists on the document\n* The `in-stock` field is not `false`\n* The `establishedYear` field has a value greater than 1940 ```csharp var result = guitarsCollection.Aggregate()     .Search(Builders<Guitar>.Search.Compound()         .Must(Builders<Guitar>.Search.Exists(g => g.Rating))         .MustNot(Builders<Guitar>.Search.Equals(g => g.InStock, false))         .Must(Builders<Guitar>.Search.Range(g => g.EstablishedYear, SearchRangeBuilder.Gt(1940))))     .ToList(); \n``` The search returns the following documents: ``` { \"_id\" : 1, \"make\" : \"Fender\", \"description\" : \"...\", \"establishedYear\" : 1946, \"in-stock\" : true, \"rating\" : 9 } { \"_id\" : 3, \"make\" : \"PRS\", \"description\" : \"...\", \"establishedYear\" : 1985, \"in-stock\" : true, \"rating\" : 9 } { \"_id\" : 5, \"make\" : \"Ibanez\", \"description\" : \"...\", \"establishedYear\" : 1957, \"in-stock\" : true, \"rating\" : 7 } \n``` To learn more about the `compound` operator, see the [compound](https://www.mongodb.com/docs/atlas/atlas-search/compound/)Atlas guide. ### Equals Use the `Equals` method to check whether a field matches a specified `bool`or `ObjectId` value. The following example searches the `guitars` collection for any documents in which the value of the `in-stock` field is `true`. ```csharp var result = guitarsCollection.Aggregate()     .Search(Builders<Guitar>.Search.Equals(g => g.InStock, true))     .ToList(); \n``` The search returns the following documents: ```\n\n { \"_id\" : 2, \"make\" : \"Gibson\", \"description\" : \"...\", \"establishedYear\" : 1902, \"in-stock\" : true, \"rating\" : 8 } { \"_id\" : 3, \"make\" : \"PRS\", \"description\" : \"...\", \"establishedYear\" : 1985, \"in-stock\" : true, \"rating\" : 9 } { \"_id\" : 5, \"make\" : \"Ibanez\", \"description\" : \"...\", \"establishedYear\" : 1957, \"in-stock\" : true, \"rating\" : 7 } \n``` To learn more about the `equals` operator, see the [equals](https://www.mongodb.com/docs/atlas/atlas-search/equals/)Atlas guide. ### Exists Use the `Exists` method to search for documents in which a specified indexed field name exists. If the specified field exists but is not indexed, the document is not included with the result set. The following example searches the `guitars` collection for any documents in which the `rating` field exists. ```csharp var result = guitarsCollection.Aggregate()     .Search(Builders<Guitar>.Search.Exists(g => g.Rating))     .ToList(); \n``` The search returns the following documents: ``` { \"_id\" : 1, \"make\" : \"Fender\", \"description\" : \"...\", \"establishedYear\" : 1946, \"in-stock\" : true, \"rating\" : 9 } { \"_id\" : 2, \"make\" : \"Gibson\", \"description\" : \"...\", \"establishedYear\" : 1902, \"in-stock\" : true, \"rating\" : 8 } { \"_id\" : 3, \"make\" : \"PRS\", \"description\" : \"...\", \"establishedYear\" : 1985, \"in-stock\" : true, \"rating\" : 9 } { \"_id\" : 5, \"make\" : \"Ibanez\", \"description\" : \"...\", \"establishedYear\" : 1957, \"in-stock\" : true, \"rating\" : 7 } \n``` To learn more about the `exists` operator, see the [exists](https://www.mongodb.com/docs/atlas/atlas-search/exists/)Atlas guide. ### GeoShape Use the `GeoShape` method to search for documents in relation to a given geometry. When specifying the coordinates to search, longitude must be specified first, followed by latitude. Longitude values can be between `-180` and`180`, inclusive. Latitude values can be between `-90` and `90`, inclusive. ## Note Atlas Search does not support the following: * Non-default coordinate reference system (CRS)\n* Planar XY coordinate system (2 dimensional)\n* Coordinate pairs Point notation (pointFieldName: \\[12, 34\\]) Consider some documents in the `guitars` collection have added an`in-stock-location` field. The changed documents in the collection now look as follows: ``` { \"_id\": 1, \"make\": \"Fender\", \"description\": \"...\", \"establishedYear\": 1946, \"in-stock\": true, \"in-stock-location\":  { \"type\": \"Point\", \"coordinates\": [ -73.93615, 40.69791 ]}, \"rating\": 9 } { \"_id\": 2, \"make\": \"Gibson\", \"description\": \"...\", \"establishedYear\": 1902, \"in-stock\": true, \"in-stock-location\":  { \"type\": \"Point\", \"coordinates\": [ 47.6062, 122.321 ]}, \"rating\": 8 } \n``` The following example searches for all documents in which the coordinates in the `in-stock-location` field intersect with a specified polygon: ```csharp GeoJsonPolygon<GeoJson2DGeographicCoordinates> searchArea = new(new(new(new GeoJson2DGeographicCoordinates[] {      new(-72.93615, 41.69791),      new(-72.93615, 40.59791),      new(-74.93615, 40.59791),      new(-74.93615, 41.69791),      new(-72.93615, 41.69791), }))); var result = guitarsCollection.Aggregate()\n\n     .ToList(); \n``` The search returns the following document: ``` { \"_id\" : 1, \"make\" : \"Fender\", \"description\" : \"...\", \"establishedYear\" : 1946, \"in-stock\" : true, \"in-stock-location\" : { \"type\" : \"Point\", \"coordinates\" : [\"-73.93615\", \"40.69791\"] }, \"rating\" : 9 } \n``` To learn more about the `geoShape` operator, see the [geoShape](https://www.mongodb.com/docs/atlas/atlas-search/geoShape/)Atlas guide. ### GeoWithin Use the `GeoWithin` method to search for documents in which the coordinates of their specified [GeoJSON](https://www.mongodb.com/docs/manual/reference/geojson/) field are within a given geometry. You can search for points that are within a: * Circle\n* Bounding box\n* Polygon When specifying the coordinates to search, longitude must be specified first, followed by latitude. Longitude values can be between `-180` and`180`, inclusive. Latitude values can be between `-90` and `90`, inclusive. ## Note Atlas Search does not support the following: * Non-default coordinate reference system (CRS)\n* Planar XY coordinate system (2 dimensional)\n* Coordinate pairs Point notation (pointFieldName: \\[12, 34\\]) Consider some documents in the `guitars` collection have added an`in-stock-location` field. The changed documents in the collection now look as follows: ``` { \"_id\": 1, \"make\": \"Fender\", \"description\": \"...\", \"establishedYear\": 1946, \"in-stock\": true, \"in-stock-location\":  { \"type\": \"Point\", \"coordinates\": [ -73.93615, 40.69791 ]}, \"rating\": 9 } { \"_id\": 2, \"make\": \"Gibson\", \"description\": \"...\", \"establishedYear\": 1902, \"in-stock\": true, \"in-stock-location\":  { \"type\": \"Point\", \"coordinates\": [ 47.6062, 122.321 ]}, \"rating\": 8 } \n``` The following example searches for all documents in which the coordinates in the `in-stock-location` field falls within a specified polygon: ```csharp GeoJsonPolygon<GeoJson2DGeographicCoordinates> searchArea = new(new(new(new GeoJson2DGeographicCoordinates[] {      new(-74.3994140625, 40.5305017757),      new(-74.7290039063, 40.5805846641),      new(-74.7729492188, 40.9467136651),      new(-74.0698242188, 41.1290213475),      new(-73.65234375, 40.9964840144),      new(-72.6416015625, 40.9467136651),      new(-72.3559570313, 40.7971774152),      new(-74.3994140625, 40.5305017757), }))); var result = guitarsCollection.Aggregate()     .Search(Builders<Guitar>.Search.GeoWithin(g => g.InStockLocation, searchArea))     .ToList(); \n``` The search returns the following document: ``` { \"_id\" : 1, \"make\" : \"Fender\", \"description\" : \"Classic guitars known for their versatility.\", \"establishedYear\" : 1946, \"in-stock\" : true, \"in-stock-location\" : { \"type\" : \"Point\", \"coordinates\" : [\"-73.93615\", \"40.69791\"] }, \"rating\" : 9 } \n``` To learn more about the `geoWithin` operator, see the [geoWithin](https://www.mongodb.com/docs/atlas/atlas-search/geoWithin/)Atlas guide. ### MoreLikeThis Use the `MoreLikeThis` method to search for documents that are similar to an input document. The following example searches the `guitars` collection for documents that are similar to an object in which the value of the `Description` field is \"high quality.\"\n\n var searchDocument = new GuitarSearch() {     Description = \"high quality\", }; var result = guitarsCollection.Aggregate()     .Search(Builders<Guitar>.Search.MoreLikeThis(searchDocument))     .ToList(); \n``` The search returns the following documents: ``` { \"_id\" : 3, \"make\" : \"PRS\", \"description\" : \"High-end guitars known for their quality.\", \"establishedYear\" : 1985, \"in-stock\" : true, \"rating\" : 9 } { \"_id\" : 4, \"make\" : \"Kiesel\", \"description\" : \"Quality guitars made only for custom orders.\", \"establishedYear\" : 2015, \"in-stock\" : false, \"rating\" : null } \n``` To learn more about the `moreLikeThis` operator, see the [moreLikeThis](https://www.mongodb.com/docs/atlas/atlas-search/morelikethis/)Atlas guide. ### Near Use the `Near` method to search for documents in which a specified field is near a given value. You can perform the search on: * A number field\n* A date field\n* A geographic point The following example searches the `guitars` collection for documents in which the value of the `rating` field is near `9`. The documents are returned in order based on how close the value is to the number `9`. ```csharp var result = guitarsCollection.Aggregate()     .Search(Builders<Guitar>.Search.Near(g => g.Rating, 9, 1))     .ToList(); \n``` The search returns the following documents: ``` { \"_id\" : 1, \"make\" : \"Fender\", \"description\" : \"...\", \"establishedYear\" : 1946, \"in-stock\" : true, \"rating\" : 9 } { \"_id\" : 3, \"make\" : \"PRS\", \"description\" : \"...\", \"establishedYear\" : 1985, \"in-stock\" : true, \"rating\" : 9 } { \"_id\" : 2, \"make\" : \"Gibson\", \"description\" : \"...\", \"establishedYear\" : 1902, \"in-stock\" : true, \"rating\" : 8 } { \"_id\" : 5, \"make\" : \"Ibanez\", \"description\" : \"...\", \"establishedYear\" : 1957, \"in-stock\" : true, \"rating\" : 7 } \n``` To learn more about the `near` operator, see the [near](https://www.mongodb.com/docs/atlas/atlas-search/near/)Atlas guide. ### Phrase Use the `Phrase` method to search for documents in which a specified field contains an input string. The following example searches the `guitars` collection for documents in which the `description` field contains the phrase \"classic guitars.\" ```csharp var result = guitarsCollection.Aggregate()     .Search(Builders<Guitar>.Search.Phrase(g => g.Description, \"classic guitars\"))     .ToList(); \n``` The search returns the following documents: ``` { \"_id\" : 1, \"make\" : \"Fender\", \"description\" : \"Classic guitars known for their versatility.\", \"establishedYear\" : 1946, \"in-stock\" : true, \"rating\" : 9 } { \"_id\" : 2, \"make\" : \"Gibson\", \"description\" : \"Classic guitars known for their rich, full tones.\", \"establishedYear\" : 1902, \"in-stock\" : true, \"rating\" : 8 } \n``` You can also search the collection for documents that match multiple separate phrases as follows: ```csharp var result = guitarsCollection.Aggregate()     .Search(Builders<Guitar>.Search.Phrase(g => g.Description, new List<string>() { \"classic guitars\", \"quality guitars\" }))     .ToList(); \n``` This search returns the following documents: ``` { \"_id\" : 1, \"make\" : \"Fender\", \"description\" : \"Classic guitars known for their versatility.\", \"establishedYear\" : 1946, \"in-stock\" : true, \"rating\" : 9 } { \"_id\" : 4, \"make\" : \"Kiesel\", \"description\" : \"Quality guitars made only for custom orders.\", \"establishedYear\" : 2015, \"in-stock\" : false, \"rating\" : null }\n\n \n``` To learn more about the `phrase` operator, see the [phrase](https://www.mongodb.com/docs/atlas/atlas-search/phrase/)Atlas guide. ### QueryString Use the `QueryString` method to search for documents using a string with the following operators and delimiters: * `AND`\n* `OR`\n* `NOT`\n* `()` The following example searches the `guitars` collection for documents in which the value of the `description` field matches each of the following criteria: * Contains the string \"classic\" _or_ the string \"quality\"\n* Does not contain the string \"custom\" ```csharp var result = guitarsCollection.Aggregate()     .Search(Builders<Guitar>.Search.QueryString(g => g.Description, \"(classic OR quality) AND NOT custom\"))     .ToList(); \n``` The search returns the following documents: ``` { \"_id\" : 1, \"make\" : \"Fender\", \"description\" : \"Classic guitars known for their versatility.\", \"establishedYear\" : 1946, \"in-stock\" : true, \"rating\" : 9 } { \"_id\" : 3, \"make\" : \"PRS\", \"description\" : \"High-end guitars known for their quality.\", \"establishedYear\" : 1985, \"in-stock\" : true, \"rating\" : 9 } { \"_id\" : 2, \"make\" : \"Gibson\", \"description\" : \"Classic guitars known for their rich, full tones.\", \"establishedYear\" : 1902, \"in-stock\" : true, \"rating\" : 8 } \n``` To learn more about the `queryString` operator, see the [queryString](https://www.mongodb.com/docs/atlas/atlas-search/queryString/)Atlas guide. ### Range Use the `Range` method to search for documents in which the value of a specified field falls within a given numeric or date range. The following example searches the `guitars` collection for all documents with an `establishedYear` value greater than 1980 and less than 2020. ```csharp var result = guitarsCollection.Aggregate()     .Search(Builders<Guitar>.Search.Range(g => g.EstablishedYear, SearchRangeBuilder.Gt(1980).Lt(2020)))     .ToList(); \n``` The search returns the following results: ``` { \"_id\" : 3, \"make\" : \"PRS\", \"description\" : \"High-end guitars known for their quality.\", \"establishedYear\" : 1985, \"in-stock\" : true, \"rating\" : 9 } { \"_id\" : 4, \"make\" : \"Kiesel\", \"description\" : \"Quality guitars made only for custom orders.\", \"establishedYear\" : 2015, \"in-stock\" : false, \"rating\" : null } { \"_id\" : 6, \"make\" : \"Strandberg\", \"description\" : \"Modern guitars known for their headless models.\", \"establishedYear\" : 1982, \"in-stock\" : false, \"rating\" : null } \n``` To learn more about the `range` operator, see the [range](https://www.mongodb.com/docs/atlas/atlas-search/range/)Atlas guide. ### Regex Use the `Regex` method to search for documents using a regular expression. The following example searches the `guitars` collection for documents in which the value of the `make` field contains exactly six letters. ```csharp var regex = \"[A-Za-z]{6}\"; var result = guitarsCollection.Aggregate()     .Search(Builders<Guitar>.Search.Regex(g => g.Make, regex))     .ToList(); \n``` The search returns the following results: ``` { \"_id\" : 1, \"make\" : \"Fender\", \"description\" : \"Classic guitars known for their versatility.\", \"establishedYear\" : 1946, \"in-stock\" : true, \"rating\" : 9 } { \"_id\" : 2, \"make\" : \"Gibson\", \"description\" : \"Classic guitars known for their rich, full tones.\", \"establishedYear\" : 1902, \"in-stock\" : true, \"rating\" : 8 } { \"_id\" : 4, \"make\" : \"Kiesel\", \"description\" : \"Quality guitars made only for custom orders.\", \"establishedYear\" : 2015, \"in-stock\" : false, \"rating\" : null }\n\n \n``` ## Note By default the `regex` operator cannot run on an analyzed field. You can allow it to run on an analyzed field by setting `allowAnalyzedField` option to true, as follows: ```csharp var result = guitarsCollection.Aggregate()  .Search(Builders<Guitar>.Search.Regex(g => g.Make, regex, true))  .ToList(); \n``` Setting the `allowAnalyzedField` option to true may lead to unexpected search results. To learn more, see [regex Behavior.](https://www.mongodb.com/docs/atlas/atlas-search/regex/#behavior) To learn more about the `regex` operator, see the [regex](https://www.mongodb.com/docs/atlas/atlas-search/regex/)Atlas guide. ### Span Use the `Span` method to search for text search matches within regions of a field. You can use this method to find strings which are near each other to specified degrees of precision. ## Note The `span` operator is more computationally intensive than other operators because queries must keep track of positional information. The following example searches the `guitars` collection for documents in which the value of the `description` field contains the strings \"guitars\" and \"quality\" within one word of each other. ```csharp var searchTerms = new[] {      Builders<Guitar>.SearchSpan.Term(g => g.Description, \"guitars\"),      Builders<Guitar>.SearchSpan.Term(g => g.Description, \"quality\")  }; var result = guitarsCollection.Aggregate()     .Search(Builders<Guitar>.Search.Span(Builders<Guitar>.SearchSpan.Near(searchTerms, 1)))     .ToList(); \n``` The search returns the following document: ``` { \"_id\" : 4, \"make\" : \"Kiesel\", \"description\" : \"Quality guitars made only for custom orders.\", \"establishedYear\" : 2015, \"in-stock\" : false, \"rating\" : null } \n``` Although the document with `_id: 3` contains the strings \"guitars\" and \"quality\", they are separated by more than one word, so the search omits this document from the results. To learn more about the `span` operator, see the [span](https://www.mongodb.com/docs/atlas/atlas-search/span/)Atlas guide. ### Text Use the `Text` method to search a document for a given string or array of strings. If there are multiple terms in a given string, Atlas Search also looks for a match for each term in the string separately. The following example searches the `guitars` collection for documents in which the value of the `description` field contains the string \"used by professionals\". ```csharp var result = guitarsCollection.Aggregate()     .Search(Builders<Guitar>.Search.Text(g => g.Description, \"used by professional\"))     .ToList(); \n``` The search returns the following document: ``` { \"_id\" : 5, \"make\" : \"Ibanez\", \"description\" : \"Well-crafted guitars used by many professional guitarists.\", \"establishedYear\" : 1957, \"in-stock\" : true, \"rating\" : 7 } \n``` ## Tip If your search string contains multiple terms, the method also looks for a match for each term in the string separately. To learn more about the `text` operator, see the [text](https://www.mongodb.com/docs/atlas/atlas-search/text/)Atlas guide. ### Wildcard Use the `Wildcard` method to search for documents using special characters in your search string that can match any character. You can use the following characters in your search: | Character | Description                  |\n| --------- | ---------------------------- |\n| ?         | Matches any single character |\n| \\*        | Matches 0 or more characters |\n| \\\\        | Escape character             | The following example searches for documents in which the value of the `make`field contains the string \"Strand\" followed by any other characters. ```csharp var result = guitarsCollection.Aggregate()\n\n     .ToList(); \n``` The search returns the following document: ``` { \"_id\" : 6, \"make\" : \"Strandberg\", \"description\" : \"Modern guitars known for their headless models.\", \"establishedYear\" : 1982, \"in-stock\" : false, \"rating\" : null } \n``` ## Note By default the `wildcard` operator cannot run on an analyzed field. You can allow it to run on an analyzed field by setting `allowAnalyzedField` option to true, as follows: ```csharp var result =  guitarsCollection.Aggregate()  .Search(Builders<Guitar>.Search.Wildcard(g => g.Make, \"Strand*\", true))  .ToList(); \n``` Setting the `allowAnalyzedField` option to true may lead to unexpected search results. To learn more, see [wildcard Behavior.](https://www.mongodb.com/docs/atlas/atlas-search/wildcard/#behavior) To learn more about the `wildcard` operator, see the [wildcard](https://www.mongodb.com/docs/atlas/atlas-search/wildcard/)Atlas guide. ← [Operations with Builders](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/ \"Previous Section\")[Data Formats](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/class-mapping/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Class Mapping On this page * [Overview](#overview)\n* [Automatic Class Mapping](#automatic-class-mapping)\n* [Manually Creating A Class Map](#manually-creating-a-class-map)\n* [Customize Class Serialization](#customize-class-serialization)\n* [Ignore Extra Elements](#ignore-extra-elements)\n* [Using Class Discriminators](#using-class-discriminators)\n* [Mapping with Constructors](#mapping-with-constructors)\n* [Customize Property Serialization](#customize-property-serialization)\n* [Support Extra Elements](#support-extra-elements)\n* [Dynamically Serialize Properties](#dynamically-serialize-properties)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to customize the way the MongoDB .NET/C# Driver maps BSON documents to and from C# classes. You should read this page to learn more about the default class mapping behavior, or if you need to customize the way the driver serializes or deserializes your data. ## Automatic Class Mapping When you use a class, rather than a `BsonDocument`, to represent data in a MongoDB collection, the .NET/C# Driver automatically creates a **class map**that it uses to serialize or deserialize your data. It does this mapping by matching the name of the field in the document to the name of the property in the class. ## Important The type of the property in your class should match the type of the field in the document. The .NET/C# Driver instantiates a serializer based on the type of the property in your class. If the types don't match when the driver attempts to deserialize the data, the serializer throws an exception. ## Manually Creating A Class Map You can bypass the driver's automatic class mapping functionality, and manually define the class map by using the `RegisterClassMap()` method. The following example defines a `Person` class: `| public class Person                     |\n| --------------------------------------- |\n| {                                       |\n| public string Name { get; set; }        |\n| public int Age { get; set; }            |\n| public List<string> Hobbies {get; set;} |\n| }                                       | ` The following code demonstrates how to register the class map for the `Person`class: ```csharp BsonClassMap.RegisterClassMap<Person>(classMap => {     classMap.MapMember(p => p.Name);     classMap.MapMember(p => p.Age);     classMap.MapMember(p => p.Hobbies); }); \n``` ## Important You must register a class map _before_ it's needed in your code. We recommend registering class maps prior to initializing a connection with MongoDB. You can also manually map a subset of class properties, while still allowing the driver to automatically map the remaining properties. To do this, register a class map and call the `AutoMap()` method before manually specifying your properties. In the following code example, the `AutoMap()` method maps all properties of the `Person` class, then manually adjusts the mapping for the `Hobbies`field: ```csharp BsonClassMap.RegisterClassMap<Person>(classMap => {     classMap.AutoMap();     classMap.MapMember(p => p.Hobbies).SetElementName(\"favorite_hobbies\"); }); \n``` ## Customize Class Serialization You can customize how the driver serializes and deserializes documents at the class level by using attributes with the class or by calling methods while registering a class map. ### Ignore Extra Elements\n\n You can choose to ignore any elements that do not have a matching class property by using the `BsonIgnoreExtraElements` attribute. This prevents the driver from throwing an exception, and maps any other fields that have matching class properties. The following example shows how to add a `BsonIgnoreExtraElements` attribute to a class. ```csharp [BsonIgnoreExtraElements] public class Person {     public string Name { get; set; }     public int Age { get; set; }     public List<string> Hobbies {get; set;} } \n``` You can also ignore any extra elements when registering a class map: ```csharp BsonClassMap.RegisterClassMap<Person>(classMap => {      classMap.AutoMap();      classMap.SetIgnoreExtraElements(true); }); \n``` ### Using Class Discriminators You can specify **discriminators** to help identify **polymorphic** classes that are serialized to the same collection. Polymorphic classes are classes that inherit properties and methods from a parent class. A discriminator is an element that's added to a document to identify which class the document was serialized from. You can specify a discriminator using the `BsonDiscriminator` attribute as follows: ```csharp [BsonDiscriminator(\"personClass\")] public class Person {     public string Name { get; set; }     public int Age { get; set; }     public List<string> Hobbies {get; set;} } \n``` You can also specify a discriminator when registering a class map as follows: ```csharp BsonClassMap.RegisterClassMap<Person>(classMap => {     classMap.AutoMap();     classMap.SetDiscriminator(\"personClass\"); }); \n``` In BSON, discriminators have the field name `_t`. The following example shows how a document from the `Person` class with the \"personClass\" discriminator appears in the collection after serialization: ``` { \"_id\": \"...\", \"_t\": \"personClass\", \"Name\": \"...\", \"Age\": \"...\", \"Hobbies\": [...]} \n``` ## Mapping with Constructors By default, the .NET/C# Driver can automatically map a class only if the class has a constructor with no arguments. If you want the driver to use a constructor that accepts one or more arguments, you can add the `BsonConstructor` attribute to the constructor. In this case, the driver the driver examines the types to determine how to map the constructor arguments to class properties or fields. When the driver creates a class map for the following `Person` class, it will use the constructor marked with the `BsonConstructor` attribute. The `name` argument will map to the `Name` property and the `age` argument will map to the `Age` property. ```csharp public class Person {     public string Name { get; set; }     public int Age { get; set; }     public List<string> Hobbies {get; set;}     [BsonConstructor]     public Person(string name, string age)     {         Name = name;         Age = age;     } } \n``` ## Tip ### Multiple BsonConstructor attributes If there is more than one constructor with the `BsonConstructor`attribute, the driver uses the constructor that has the most parameters with matching fields in the document. You can also specify the constructor to use when registering your class map: ```csharp public class Person {     public string Name { get; set; }     public int Age { get; set; }     public List<string> Hobbies {get; set;}     public Person(string name, string age)     {         Name = name;         Age = age;     } } BsonClassMap.RegisterClassMap<Person>(classMap => {     classMap.AutoMap();     classMap.MapCreator(p => new Person(p.Name, p.Age)); }); \n``` ## Customize Property Serialization\n\n ### Support Extra Elements You can design your C# class to store any extra elements in your document that don't have matching class properties. To do this your class must have a `BsonDocument` type property to hold the extra elements. The following code uses the `BsonExtraElements` attribute with the`ExtraElements` property to direct the driver to store extra elements: ```csharp public class Person {     public string Name { get; set;     public int Age { get; set; }     public List<string> Hobbies {get; set;}     [BsonExtraElements]     public BsonDocument ExtraElements {get; set;} } \n``` You can also support extra elements when initializing a class map as follows: ```csharp BsonClassMap.RegisterClassMap<Person>(classMap => {     classMap.AutoMap();     classMap.MapExtraElementsMember(p => p.ExtraElements); }); \n``` ## Note After the driver serializes a class with extra elements back to BSON, the extra elements may not be in the same order as they were in the original document. ### Dynamically Serialize Properties You can use a method to determine whether or not to serialize a property. For the driver to automatically use the method when serializing, you must prefix the method name with `ShouldSerialize` followed by the name of the property that the method applies to. When the driver sees a method with this naming convention, it uses that method to determine whether or not to serialize properties that have the provided property name. The following example creates a method that only serializes the `Age` property if its value is not equal to `0`. The driver does not serialize any properties whose values don't meet this requirement: ```csharp public class Person {     public string Name { get; set; }     public int Age { get; set; }     public List<string> Hobbies {get; set;}     public bool ShouldSerializeAge()     {        return Age != 0;     } } \n``` You can also specify the method while registering a class map: ```csharp BsonClassMap.RegisterClassMap<Employee>(classMap => {     classMap.AutoMap();     classMap.MapMember(p => c.Age).SetShouldSerializeMethod(         obj => ((Person) obj).Age != 0     ); }); \n``` ## Additional Information For more information on using C# classes, see [Work with POCOs.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-poco) ## API Documentation * [BsonClassMap](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FBson%5FSerialization%5FBsonClassMap%5F1.htm)\n* [RegisterClassMap](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/M%5FMongoDB%5FBson%5FSerialization%5FBsonClassMap%5FRegisterClassMap%5F%5F1%5F1.htm)\n* [AutoMap](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/M%5FMongoDB%5FBson%5FSerialization%5FBsonClassMap%5FAutoMap.htm) ← [LINQ](https://mongodb.com/docs/drivers/csharp/current/fundamentals/linq/ \"Previous Section\")[Logging](https://mongodb.com/docs/drivers/csharp/current/fundamentals/logging/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Work with POCOs On this page * [Overview](#overview)\n* [Create a POCO](#create-a-poco)\n* [Custom Serialization](#custom-serialization)\n* [Set Field Names](#set-field-names)\n* [Select Type Representation](#select-type-representation)\n* [Set Field Order](#set-field-order)\n* [Identify Id Property](#identify-id-property)\n* [Omit Empty Fields](#omit-empty-fields)\n* [Example](#example)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn about how you can use \"[Plain Old CLR/Class Objects](https://en.wikipedia.org/wiki/Plain%5Fold%5FCLR%5Fobject)\", or **POCOs**, with the .NET/C# Driver for your operations and queries. POCOs are simple class objects that do not inherit features from any framework-specific base classes or interfaces. We recommend using POCOs in your C# code to adhere to idiomatic driver usage and achieve the best performance. You should read this guide if you want to learn more about how to use POCOs with the .NET/C# Driver or if you need to adjust the driver's default field mapping behavior. ## Create a POCO You can create a POCO by defining a simple class that does not implement interfaces or extend classes from a framework. When you execute an operation such as a read or write using a POCO, the driver internally _serializes_, or converts, the POCO to BSON. Select the POCO or BSON tab to see how the driver serializes a sample POCO to BSON: You can define a POCO with any object structure that suits your needs, including nested objects, arrays, lists, and any data types. ## Custom Serialization If the default field mapping behavior does not meet your needs, you can specify custom behavior using serialization-related attributes. These attributes change the way that the driver serializes each property of your POCO. This section describes some of the common serialization-related attributes. ### Set Field Names The driver serializes POCO properties to BSON fields with the same field name and capitalization. To store a property under a different name, use the `[BsonElement()]` attribute. The following code maps the`YearBuilt` property of the `House` class to the `year_built`field in the serialized BSON document: `| public class House                 |\n| ---------------------------------- |\n| {                                  |\n| public ObjectId Id { get; set; }   |\n| [BsonElement(\"year_built\")]        |\n| public int YearBuilt { get; set; } |\n| }                                  | ` Though it is common to use the Pascal case naming convention when defining C# classes, using the `[BsonElement()]` attribute allows you to select a different or custom naming convention in your MongoDB collection. ## Tip ### Set Custom Field Name Convention If you want to serialize every property with a custom field name, you can define a `ConventionPack` instead of using the`[BsonElement()]` attribute. For example, if you define your class using the Pascal case naming convention, you can use the following code to use camel case field names in the serialized document: ```csharp var camelCaseConvention = new ConventionPack { new CamelCaseElementNameConvention() }; ConventionRegistry.Register(\"CamelCase\", camelCaseConvention, type => true); \n``` ### Select Type Representation\n\n ```csharp public class House {     public ObjectId Id { get; set; }     [BsonRepresentation(BsonType.Int32)]     public char YearBuilt { get; set; } } \n``` For more information on valid type conversions, see the [C# Conversions Specification.](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions) ### Set Field Order The driver serializes properties to BSON fields in the order they are specified in the POCO. To store properties in a custom order to match an existing schema, you can specify the `Order` named parameter in the `[BsonElement()]` attribute. In the following code sample, the driver stores the `YearBuilt` property after the`Style` property: ```csharp public class House {     public ObjectId Id { get; set; }     [BsonElement(Order = 2)]     public int YearBuilt { get; set; }     [BsonElement(Order = 1)]     public string Style { get; set; } } \n``` If any properties don't have an explicit `Order`, the driver will serialize them in the default order after those that do. ### Identify `Id` Property By default, the driver maps any public property named `Id`, `id`, or`_id` to the BSON `_id` field. To explicitly select the property to map to the `_id` field, use the `[BsonId()]` attribute. The following code sample maps the `Identifier` property to the`_id` field: ```csharp public class House {     [BsonId]     public string Identifier { get; set; } } \n``` ## Warning ### Multiple Id Fields If you identify more than one property as the `_id` field using the`[BsonId()]` attribute, the driver throws a`DuplicateBsonMemberMapAttributeException`. If you specify the same database field more than once (for example, if your POCO includes properties named `Id` and `_id`), the driver throws a `BsonSerializationException`. ### Omit Empty Fields By default, the driver serializes undefined properties to fields with `null`values. To ignore undefined properties during serialization, use the `[BsonIgnore()]`attribute. The following code shows how you can prevent the driver from serializing the `YearBuilt` property if it is undefined: ```csharp public class House {     public ObjectId Id { get; set; }     [BsonIgnore]     public int YearBuilt { get; set; }     public string Style { get; set; } } \n``` ## Example The following example shows how to insert a `Clothing` document with custom field mapping specifications into MongoDB. The following code defines the `Clothing` class with these serialization-related attributes: * `[BsonElement()]`, which specifies custom field names in the camel case naming convention\n* `[BsonRepresentation()]`, which specifies serialization of the `Price` field as a BSON `Double` type ```csharp public class Clothing {     public ObjectId Id { get; set; }     [BsonElement(\"name\")]     public string Name { get; set; }     [BsonElement(\"inStock\")]     public bool InStock { get; set; }     [BsonElement(\"price\")]     [BsonRepresentation(BsonType.Decimal128)]     public decimal Price { get; set; }     [BsonElement(\"colorSelection\")]     public List<string> ColorSelection { get; set; } } \n``` The following code instantiates a `Clothing` object and inserts the document into a collection: ```csharp var doc = new Clothing {     Name = \"Denim Jacket\",     InStock = false,     Price = 32.99m,     ColorSelection = new List<string> { \"dark wash\", \"light wash\" } }; _myColl.InsertOne(doc); \n``` The BSON representation of the inserted document looks like this: ``` {   \"_id\": ObjectId(\"...\"),   \"name\": \"Denim Jacket\",   \"inStock\": false,   \"price\": 32.99,\n\n } \n``` ## Additional Information For a full list of serialization-related attributes, see the[Serialization.Attributes API documentation.](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/N%5FMongoDB%5FBson%5FSerialization%5FAttributes.htm) For additional read and write operation examples using POCOs, see the [Usage Examples](https://mongodb.com/docs/drivers/csharp/current/usage-examples/#std-label-csharp-usage-examples) or the [CRUD Fundamentals Pages.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/#std-label-csharp-crud) To learn more about how the driver maps BSON documents to POCOs, see[Class Mapping.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/class-mapping/#std-label-csharp-class-mapping) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API documentation: * [\\[BsonElement()\\]](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FBson%5FSerialization%5FAttributes%5FBsonElementAttribute.htm)\n* [\\[BsonRepresentation()\\]](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FBson%5FSerialization%5FAttributes%5FBsonRepresentationAttribute.htm)\n* [\\[BsonId()\\]](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FBson%5FSerialization%5FAttributes%5FBsonIdAttribute.htm)\n* [\\[BsonIgnore()\\]](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FBson%5FSerialization%5FAttributes%5FBsonIgnoreAttribute.htm)\n* [ConventionPack](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FBson%5FSerialization%5FConventions%5FConventionPack.htm)\n* [InsertOne()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/M%5FMongoDB%5FDriver%5FIMongoCollection%5F1%5FInsertOne.htm) ← [Work with BSON](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/bson/ \"Previous Section\")[GUID Serialization](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/guid-serialization/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/bson/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Work with BSON On this page * [Overview](#overview)\n* [BSON Data Format](#bson-data-format)\n* [Create a BSON Document](#create-a-bson-document)\n* [Change a BSON Document](#change-a-bson-document)\n* [Write BSON to a File](#write-bson-to-a-file)\n* [Read BSON from a File](#read-bson-from-a-file)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to create BSON documents, read BSON from a file, and write BSON to a file using the .NET/C# Driver. ## BSON Data Format **BSON**, or Binary JSON, is the data format that MongoDB uses to organize and store data. This data format includes all JSON data structure types and adds support for types including dates, different size integers, ObjectIds, and binary data. For a complete list of supported types, see the[BSON Types](https://www.mongodb.com/docs/manual/reference/bson-types/) server manual page. The code samples in this guide use the following BSON document as an example: `| {                                 |\n| --------------------------------- |\n| \"address\" : {                     |\n| \"street\" : \"Pizza St\",            |\n| \"zipcode\" : \"10003\"               |\n| },                                |\n| \"coord\" : [-73.982419, 41.579505] |\n| \"cuisine\" : \"Pizza\",              |\n| \"name\" : \"Mongo's Pizza\"          |\n| }                                 | ` ## Create a BSON Document To build a BSON document in C#, create an instance of the `BsonDocument` class. The `BsonDocument` constructor accepts `BsonElement` arguments that map to the fields and values in the document. Each `BsonElement` can be either an instance of the`BsonElement` class or a field-value pair inside curly braces ( `{}` ). The following code sample shows how to create a `BsonDocument` object to represent the example BSON document. Each key-value pair in the `BsonDocument` object is a`BsonElement` object. ```csharp var newRestaurant = new BsonDocument {     { \"address\", new BsonDocument         {             { \"street\", \"Pizza St\" },             { \"zipcode\", \"10003\" }         }     },     { \"coord\", new BsonArray         {-73.982419, 41.579505 }     },     { \"cuisine\", \"Pizza\" },     { \"name\", \"Mongo's Pizza\"} }; \n``` ## Change a BSON Document The `BsonDocument` class includes methods that let you change the contents of the BSON document. The following code sample makes three changes to the previous`BsonDocument` object: 1. Adds a new field, `\"restaurant_id\"`, with the value `\"12345\"`\n2. Removes the `\"cuisine\"` field\n3. Sets the value of the `\"name\"` field to `\"Mongo's Pizza Palace\"` ```csharp var newRestaurant = new BsonDocument {     { \"address\", new BsonDocument         {\n\n             { \"zipcode\", \"10003\" }         }     },     { \"coord\", new BsonArray         {-73.982419, 41.579505 }     },     { \"cuisine\", \"Pizza\" },     { \"name\", \"Mongo's Pizza\"} }; newRestaurant.Add(new BsonElement(\"restaurant_id\", \"12345\")); newRestaurant.Remove(\"cuisine\"); newRestaurant.Set(\"name\", \"Mongo's Pizza Palace\"); \n``` ## Note For a full list of methods in the `BsonDocument` class, see the[API Documentation.](#std-label-csharp-bson-api) ## Write BSON to a File You can write BSON to a file using the methods in the `BsonBinaryWriter` class. To write to a file, perform the following steps: 1. Open a file stream for the file containing BSON data.\n2. Create a `BsonBinaryWriter` using the file stream.\n3. For each BSON document and subdocument you want to create, call`WriteStartDocument()`.\n4. Within each BSON document and subdocument, call `WriteName()` to set the field name and the appropriate `Write*` method to set its value. Each data type has a dedicated `Write*` method that you should use.\n5. To start and end arrays, use `WriteStartArray()` and `WriteEndArray()`.\n6. At the end of each document and subdocument, call `WriteEndDocument()`. The following code sample shows how to write the sample BSON document to `myFile.bson`: ```csharp string outputFileName = \"myFile.bson\"; using (var stream = File.OpenWrite(outputFileName)) using (var writer = new BsonBinaryWriter(stream)) {     writer.WriteStartDocument();     //address     writer.WriteName(\"address\");     writer.WriteStartDocument();     writer.WriteName(\"street\");     writer.WriteString(\"Pizza St\");     writer.WriteName(\"zipcode\");     writer.WriteString(\"10003\");     writer.WriteEndDocument();     //coord     writer.WriteName(\"coord\");     writer.WriteStartArray();     writer.WriteDouble(-73.982419);     writer.WriteDouble(41.579505);     writer.WriteEndArray();     //cuisine     writer.WriteName(\"cuisine\");     writer.WriteString(\"Pizza\");     //name     writer.WriteName(\"name\");     writer.WriteString(\"Mongo's Pizza\");     writer.WriteEndDocument(); } \n``` The resulting BSON document looks like the following: ``` {     \"address\" : {         \"street\" : \"Pizza St\",         \"zipcode\" : \"10003\"     },     \"coord\" : [-73.982419, 41.579505]     \"cuisine\" : \"Pizza\",     \"name\" : \"Mongo's Pizza\" } \n``` ## Read BSON from a File To read a BSON document from a file, follow the same steps used for writing a BSON document to a file, with two differences: * Use `BsonBinaryReader` instead of `BsonBinaryWriter`.\n* Use `Read*` methods instead of `Write*` methods. These methods return field names and values from the BSON document. The following code sample shows how to read the fields and values from the sample BSON document stored in `myFile.bson`: ```csharp string inputFileName = \"myFile.bson\"; using (var stream = File.OpenRead(inputFileName)) using (var reader = new BsonBinaryReader(stream)) {     reader.ReadStartDocument();     //address     string addressFieldName = reader.ReadName();     reader.ReadStartDocument();     string streetFieldName = reader.ReadName();     string streetValue = reader.ReadString();     string zipFieldName = reader.ReadName();\n\n     reader.ReadEndDocument();     //coord     string coordFieldName = reader.ReadName();     reader.ReadStartArray();     double coord1 = reader.ReadDouble();     double coord2 = reader.ReadDouble();     reader.ReadEndArray();     //cuisine     string cuisineFieldName = reader.ReadName();     string cuisineValue = reader.ReadString();     //name     string nameFieldName = reader.ReadName();     string nameValue = reader.ReadString();     reader.ReadEndDocument(); } \n``` ## Warning If you call `ReadName()` twice in a row without reading a value, the driver will throw an `InvalidOperationException`. ## Tip The `BsonBinaryReader` and `BsonBinaryWriter` constructors accept any`System.IO.Stream` object. This means that you can read or write any location that can be accessed by a stream. ## API Documentation To learn more about any of the methods or types discussed in this guide, see the following API documentation: * [BsonDocument](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FBson%5FBsonDocument.htm)\n* [BsonElement](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FBson%5FBsonElement.htm)\n* [BsonBinaryReader](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FBson%5FIO%5FBsonBinaryReader.htm)\n* [BsonBinaryWriter](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FBson%5FIO%5FBsonBinaryWriter.htm) ← [Data Formats](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/ \"Previous Section\")[Work with POCOs](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/guid-serialization/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # GUID Serialization On this page * [Overview](#overview)\n* [GuidRepresentationMode](#guidrepresentationmode)\n* [V2](#v2)\n* [V3](#v3)\n* [Serializing GUIDs in V3](#serializing-guids-in-v3)\n* [Serializing Objects in V3](#serializing-objects-in-v3)\n* [Additional Information](#additional-information) ## Overview In this guide, you can learn how to serialize **globally unique identifiers**([GUIDs](https://learn.microsoft.com/en-us/dynamicsax-2012/developer/guids)), also known as **universally unique identifiers** (UUIDs). ## Tip In MongoDB applications, `ObjectId` can be used as a unique identifier for a document. Consider using `ObjectId` in place of a GUID with MongoDB applications where possible. A GUID is a 16-byte integer that you can use as a unique ID for a MongoDB document. Originally, GUIDs in MongoDB were represented as `BsonBinaryData` values of subtype 3\\. Subtype 3 did not standardize the byte order during serialization, which led to inconsistent serialization across MongoDB drivers. To standardize the byte order and ensure consistent serialization across drivers, we created `BsonBinaryData` subtype 4. ## Note Use `BsonBinaryData` subtype 4 for all new GUIDs. ## GuidRepresentationMode In many MongoDB collections, all GUID fields use the same subtype of `BsonBinaryData`. Some older collections, however, may contain some GUID fields that use subtype 3 and others that use subtype 4\\. To ensure that the driver serializes and deserializes all GUIDs correctly, you should set the `BsonDefaults.GuidRepresentationMode` property to one of the following `GuidRepresentationMode` values: ### V2 `GuidRepresentationMode.V2` assumes that all GUIDs in a document use the same`BsonBinaryData` subtype. In this mode, GUID representation is controlled by the reader or writer, not the serializer. `V2` is the default `GuidRepresentationMode`. ## Note When version 3 of the .NET/C# Driver is released, support for `GuidRepresentationMode.V2`will be removed from the driver and `V3` will become the default. ### V3 `GuidRepresentationMode.V3` allows fields in the same document to use different GUID formats. In this mode, GUID representation is controlled at the property level by configuring the serializer for each property. To use `GuidRepresentationMode.V3`, run the following line of code. You should run this code during the bootstrapping phase of your application, before creating a `MongoClient` object. `| BsonDefaults.GuidRepresentationMode = GuidRepresentationMode.V3; |\n| ---------------------------------------------------------------- | ` Running in `V3` mode changes the behavior of the driver in the following ways: * The `BsonBinaryReader.ReadBinaryData()` method ignores `readerSettings.GuidRepresentation`\n* The `BsonBinaryWriter.WriteBinaryData()` method ignores `writerSettings.GuidRepresentation`\n* The `JsonReader.ReadBinaryData()` method ignores `readerSettings.GuidRepresentation`\n* `JsonWriter` ignores `writerSettings.GuidRepresentation`\n* Calling the `BsonBinaryData.ToGuid()` method without the `GuidRepresentation`parameter works only on GUIDs of subtype 4. ## Note You can't use both `GuidRepresentationMode.V2` and `GuidRepresentationMode.V3`in a single application. ## Serializing GUIDs in V3 `GuidRepresentationMode.V3` handles GUID serialization at the level of individual properties. This mode is more flexible than `V2`, but it also means you must ensure that each GUID field is serialized and deserialized correctly.\n\n ```csharp public class Widget {     public int Id { get; set; }    [BsonGuidRepresentation(GuidRepresentation.Standard)]    public Guid G { get; set; } } \n``` ## Note `GuidRepresentation.Standard` is equivalent to `BsonBinaryData` subtype 4\\. Other GUID representations in the .NET/C# Driver, such as `CSharpLegacy`,`JavaLegacy`, and `PythonLegacy`, are equivalent to subtype 3 but use different byte orders. If you're writing your own serialization code, you can use the`GuidSerializer` class to serialize and deserialize individual GUID values to and from BSON fields. To ensure that the driver handles GUIDs correctly, use the`GuidRepresentation` parameter when you construct a `GuidSerializer`. The following code sample creates an instance of `GuidSerializer`for serializing GUID representations of subtype 4: ``` var guidSerializer = new GuidSerializer(GuidRepresentation.Standard); \n``` If most of your GUIDs use the same representation, you can register a `GuidSerializer`globally. To create and register a `GuidSerializer`, run the following code early in your application, such as during the bootstrapping phase: ```csharp BsonSerializer.RegisterSerializer(new GuidSerializer(GuidRepresentation.Standard)); \n``` ## Tip When you're working with two subtypes, you can combine a global serializer with the`BsonGuidRepresentation` property attribute. For example, you can register a global serializer for the most commonly used GUID subtype, then use the `BsonGuidRepresentation`attribute to denote any GUID properties of another subtype. ## Serializing Objects in V3 You can use an `ObjectSerializer` to serialize hierarchical objects to subdocuments. To ensure that GUIDs in these objects are serialized and deserialized correctly when using`V3`, you should select the correct GUID representation when constructing your`ObjectSerializer`. The following code sample shows how to create an `ObjectSerializer` for a GUID representation of subtype 4: ```csharp var objectDiscriminatorConvention = BsonSerializer.LookupDiscriminatorConvention(typeof(object)); var objectSerializer = new ObjectSerializer(objectDiscriminatorConvention, GuidRepresentation.Standard); \n``` If your application relies on an `ObjectSerializer` to serialize any GUIDs, you must also register the serializer early in your application, such as during the bootstrapping phase. The serializer that you register will be used globally whenever an object serializer is needed and has not been otherwise specified. To register your `ObjectSerializer`, pass it to the `BsonSerializer.RegisterSerializer()`method: ```csharp var objectDiscriminatorConvention = BsonSerializer.LookupDiscriminatorConvention(typeof(object)); var objectSerializer = new ObjectSerializer(objectDiscriminatorConvention, GuidRepresentation.Standard); BsonSerializer.RegisterSerializer(objectSerializer); \n``` ## Additional Information To learn more about any of the methods or types discussed in this guide, see the following API documentation:\n\n ← [Work with POCOs](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/ \"Previous Section\")[Stable API](https://mongodb.com/docs/drivers/csharp/current/fundamentals/stable-api/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/connection/network-compression/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Network Compression [MongoDB C# Driver](https://mongodb.com/docs/drivers/csharp/current/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/linq/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # LINQ On this page * [Overview](#overview)\n* [Make A Collection Queryable](#make-a-collection-queryable)\n* [Supported Aggregation Stages](#supported-aggregation-stages)\n* [$project](#-project)\n* [$match](#-match)\n* [$limit](#-limit)\n* [$skip](#-skip)\n* [$unwind](#-unwind)\n* [$group](#-group)\n* [$sort](#-sort)\n* [$lookup](#-lookup)\n* [Unsupported Aggregation Stages](#unsupported-aggregation-stages)\n* [Supported Methods](#supported-methods) ## Overview In this guide you can learn how to use[LINQ](https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/?redirectedfrom=MSDN)with the MongoDB .NET/C# Driver. LINQ allows you to construct queries against strongly typed collections of objects by using language keywords and operators. The .NET/C# Driver automatically translates LINQ queries into[aggregation operations.](https://www.mongodb.com/docs/manual/aggregation/) The examples in this guide use the `restaurants` collection in the `sample_restaurants` database provided in the [Atlas sample datasets](https://www.mongodb.com/docs/atlas/sample-data/). To learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the [Quick Start.](https://mongodb.com/docs/drivers/csharp/current/quick-start/#std-label-csharp-quickstart) The following `Restaurant`, `Address` and `GradeEntry` classes model the documents in this collection: `| public class Restaurant                      |\n| -------------------------------------------- |\n| {                                            |\n| public ObjectId Id { get; set; }             |\n| public string Name { get; set; }             |\n| [BsonElement(\"restaurant_id\")]               |\n| public string RestaurantId { get; set; }     |\n| public string Cuisine { get; set; }          |\n| public Address Address { get; set; }         |\n| public string Borough { get; set; }          |\n| public List<GradeEntry> Grades { get; set; } |\n| }                                            | ` ```csharp public class Address {     public string Building { get; set; }     [BsonElement(\"coord\")]     public float[] Coordinates { get; set; }     public string Street { get; set; }     [BsonElement(\"zipcode\")]     public string ZipCode { get; set; } } \n``` ```csharp public class GradeEntry {     public DateTime Date { get; set; }     public string Grade { get; set; }     public float Score { get; set; } } \n``` ## Note The documents in the `restaurants` collection use the camel-case naming convention. The examples in this guide use a `ConventionPack`to deserialize the fields in the collection into Pascal case and map them to the properties in the `Restaurant` class. To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) ## Make A Collection Queryable\n\n ```csharp  var restaurantsCollection = restaurantsDatabase.GetCollection<Restaurant>(\"restaurants\");  var queryableCollection = restaurantsCollection.AsQueryable(); \n``` The `AsQueryable()` method returns an [IMongoQueryable](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FDriver%5FLinq%5FIMongoQueryable%5F1.htm) instance that has the `IQueryable` extension methods, along with a set of MongoDB specific methods. Once you have the queryable object, you can compose a query using**method syntax**. Some pipeline stages also support **query comprehension syntax**, which resembles SQL query syntax. Select the Method Syntax or Query Syntax tab to see how to compose a query using LINQ: You can print the results of the preceding example as follows: ```csharp foreach (var restaurant in query) {     Console.WriteLine(restaurant.ToJson()); } \n``` HIDE OUTPUT `| { \"name\" : \"The Movable Feast\", \"address\" : { \"building\" : \"284\", \"coord\" : [-73.982923900000003, 40.6580753], \"street\" : \"Prospect Park West\", \"zipcode\" : \"11215\" } } |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ` ## Tip ### Accessing Query Results You can also access the results of your query by using the `ToList()` or`ToCursor()` methods: ```csharp var results = query.ToList(); \n``` ```csharp var results = query.ToCursor(); \n``` ## Supported Aggregation Stages You can use LINQ to create an [aggregation pipeline](https://www.mongodb.com/docs/manual/aggregation/#std-label-aggregation-pipeline-intro). The .NET/C# Driver automatically translates each LINQ statement into the corresponding aggregation pipeline stages. In this section you can learn which aggregation pipeline stages are supported. To learn more about the aggregation pipeline stages, see the[Aggregation Pipeline Stages](https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/#std-label-aggregation-pipeline-operator-reference) page in the server manual. ### $project The `$project` aggregation stage returns a document containing only the specified fields. Select the Method Syntax or Query Syntax tab to see how to generate a `$project` stage using LINQ: The result of the preceding example contains the following document: ``` { \"name\" : \"The Movable Feast\", \"address\" : { \"building\" : \"284\", \"coord\" : [-73.982923900000003, 40.6580753], \"street\" : \"Prospect Park West\", \"zipcode\" : \"11215\" } } \n``` ## Note ### Excluding the \\_id Field If you don't include the `_id` field in your LINQ projection, the .NET/C# Driver automatically excludes it from the results. ### $match The `$match` aggregation stage returns the documents that match a specified criteria. Select the Method Syntax or Query Syntax tab to see how to generate a `$match` stage using LINQ: The result of the preceding example contains the following document: ``` // Results Truncated { \"_id\" : ObjectId(...), \"name\" : \"The Movable Feast\", \"restaurant_id\" : \"40361606\", \"cuisine\" : \"American\", \"address\" : {...}, \"borough\" : \"Brooklyn\", \"grades\" : [...] } \n``` ### $limit The `$limit` aggregation stage limits the number of documents returned by the query. The following example shows how to generate a `$limit` stage using LINQ: ```csharp var query = queryableCollection     .Where(r => r.Cuisine == \"Italian\")     .Select(r => new {r.Name, r.Cuisine})     .Take(5); \n``` The result of the preceding example contains the following documents: ``` { \"name\" : \"Philadelhia Grille Express\", \"cuisine\" : \"Italian\" } { \"name\" : \"Isle Of Capri Resturant\", \"cuisine\" : \"Italian\" } { \"name\" : \"Marchis Restaurant\", \"cuisine\" : \"Italian\" }\n\n { \"name\" : \"Forlinis Restaurant\", \"cuisine\" : \"Italian\" } \n``` ### $skip The `$skip` aggregation stage skips over a specified number of documents returned by a query, then returns the rest of the results. The following example shows how to generate a `$skip` stage using LINQ: ```csharp var query = queryableCollection     .Where(r => r.Cuisine == \"Italian\")     .Select(r => new {r.Name, r.Cuisine})     .Skip(2); \n``` The preceding example skips the first two restaurants that match the criteria, and returns the rest. The result contains the following documents: ``` // Results Truncated { \"name\" : \"Marchis Restaurant\", \"cuisine\" : \"Italian\" } { \"name\" : \"Crystal Room\", \"cuisine\" : \"Italian\" } { \"name\" : \"Forlinis Restaurant\", \"cuisine\" : \"Italian\" } ... \n``` ### $unwind The `$unwind` aggregation stage deconstructs a specified array field and returns a document for each element in that array. Select the Method Syntax or Query Syntax tab to see how to generate an `$unwind` stage using LINQ: The query in the preceding example finds the document where the `Name` field has the value \"The Movable Feast.\" Then, for each element in this document's`Grades` array, the query returns a new document. The result contains the following documents: ``` { \"date\" : ISODate(\"2014-11-19T00:00:00Z\"), \"grade\" : \"A\", \"score\" : 11 } { \"date\" : ISODate(\"2013-11-14T00:00:00Z\"), \"grade\" : \"A\", \"score\" : 2 } { \"date\" : ISODate(\"2012-12-05T00:00:00Z\"), \"grade\" : \"A\", \"score\" : 13 } { \"date\" : ISODate(\"2012-05-17T00:00:00Z\"), \"grade\" : \"A\", \"score\" : 11 } \n``` ### $group The `$group` aggregation stage separates documents into groups according to the criteria you specify. Select the Method Syntax or Query Syntax tab to see how to generate an `$group` stage using LINQ: The preceding example groups each document by the value in its `Cuisine` field, then counts how many documents have each `Cuisine` value. The result contains the following documents: ``` // Results Truncated { \"cuisine\" : \"Caribbean\", \"count\" : 657 } { \"cuisine\" : \"Café/Coffee/Tea\", \"count\" : 1214 } { \"cuisine\" : \"Iranian\", \"count\" : 2 } { \"cuisine\" : \"Nuts/Confectionary\", \"count\" : 6 } { \"cuisine\" : \"Middle Eastern\", \"count\" : 168 } ... \n``` ## Note ### Result Order The preceding queries don't always return results in the same order. Running this example may return the results in a different order than shown above. ### $sort The `$sort` aggregation stage returns the results of your query in the order that you specify. Select the Method Syntax or Query Syntax tab to see how to generate an `$sort` stage using LINQ: The preceding example returns the query results sorted alphabetically by the`Name` field, with a secondary descending sort on the `RestaurantId` field. The following is a subset of the documents contained in the returned results: ``` // Results Truncated ... { \"_id\" : ObjectId(...), \"name\" : \"Aba Turkish Restaurant\", \"restaurant_id\" : \"41548686\", \"cuisine\" : \"Turkish\", \"address\" : {...}, \"borough\" : \"Manhattan\", \"grades\" : [...] } { \"_id\" : ObjectId(...), \"name\" : \"Abace Sushi\", \"restaurant_id\" : \"50006214\", \"cuisine\" : \"Japanese\", \"address\" : { ... }, \"borough\" : \"Manhattan\", \"grades\" : [...] } { \"_id\" : ObjectId(...), \"name\" : \"Abacky Potluck\", \"restaurant_id\" : \"50011222\", \"cuisine\" : \"Asian\", \"address\" : { ... }, \"borough\" : \"Manhattan\", \"grades\" : [...] }\n\n ... \n``` ### $lookup The `$lookup` aggregation stage joins documents from one collection to documents from another collection in the same database. The `$lookup` stage adds a new array field to each input document. The new array field contains the matching documents from the \"joined\" collection. ## Note To perform a lookup, you must make both collections queryable using the`AsQueryable` method. To learn how to make a collection queryable, see [Make A Collection Queryable.](#std-label-csharp-linq-queryable) Consider a second collection in the `sample_restaurants` database called`reviews` that has restaurant reviews. You can join documents from that collection to documents with the same `name` value in the `restaurants` collection using the `$lookup` stage. The following `Review` class models the documents in the `reviews` collection: ```csharp public class Review {     public ObjectId Id { get; set; }     [BsonElement(\"restaurant_name\")]     public string RestaurantName { get; set; }     public string Reviewer { get; set; }     [BsonElement(\"review_text\")]     public string ReviewText { get; set; } } \n``` Select the Method Syntax or Query Syntax tab to see how to generate a `$lookup` stage using LINQ: The preceding example returns all documents from the `restaurants` collection. Each restaurant document has an added field called `reviews`, which contains all reviews for that restaurant. A review matches a restaurant if the value of the`name` field in the review document matches the `name` field of the restaurant document. The following is a subset of the returned results: ``` // Results Truncated { \"restaurant\" : {    \"_id\" : ObjectId(\"...\"),    \"name\" : \"The Movable Feast\",    \"restaurant_id\" : \"40361606\",    \"cuisine\" : \"American\",    \"address\" : {...},    \"borough\" : \"Brooklyn\",    \"grades\" : [...] },    \"reviews\" : [      { \"_id\" : ObjectId(...), \"restaurant_name\" : \"The Movable Feast\", \"reviewer\" : \"Lazlo Cravensworth\", \"review_text\" : \"Great restaurant! 12/10 stars!\" },      { \"_id\" : ObjectId(\"...\"), \"restaurant_name\" : \"The Movable Feast\", \"reviewer\" : \"Michael Scarn\", \"review_text\" : \"It really was a feast\" }     ]  } \n``` ## Unsupported Aggregation Stages The MongoDB .NET/C# Driver implementation of LINQ does not support the following aggregation stages: * `$redact`\n* `$geoNear`\n* `$out` ## Supported Methods The following are some of the methods supported by the MongoDB .NET/C# Driver implementation of LINQ:\n\n ← [Enterprise Authentication Mechanisms](https://mongodb.com/docs/drivers/csharp/current/fundamentals/enterprise-authentication/ \"Previous Section\")[Class Mapping](https://mongodb.com/docs/drivers/csharp/current/fundamentals/class-mapping/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Read Operations * [Retrieve Data](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/retrieve/#std-label-csharp-retrieve)\n* [Specify a Query](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/specify-query/#std-label-csharp-specify-query) ← [Delete Documents](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/delete/ \"Previous Section\")[Retrieve Data](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/retrieve/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Write Operations * [Change Documents](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/change/#std-label-csharp-change-guide)\n* [Delete Documents](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/delete/#std-label-csharp-delete-guide)\n* [Insert Documents](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/insert/#std-label-csharp-insert-guide) ← [CRUD Operations](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/ \"Previous Section\")[Insert Documents](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/insert/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/connection/connect/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Connection Guide On this page * [Connection URI](#connection-uri)\n* [MongoClientSettings](#mongoclientsettings)\n* [Other Connection Targets](#other-connection-targets)\n* [Connect to Atlas](#connect-to-atlas)\n* [Connect to a Replica Set](#connect-to-a-replica-set) This guide shows you how to connect to a MongoDB instance or replica set deployment using the .NET/C# Driver. ## Connection URI A **connection URI**, also known as a _connection string_, tells the driver how to connect to a MongoDB deployment and how to behave while connected. A standard connection string includes the following pieces:\n\n To use a connection URI, pass it as a string to the `MongoClient` constructor. In the following example, the driver uses a sample connection URI to connect to a MongoDB instance on port `27017` of `localhost`: `| using MongoDB.Driver;                                     |\n| --------------------------------------------------------- |\n| // Connection URI                                         |\n| const string connectionUri = \"mongodb://localhost:27017\"; |\n| // Create a new client and connect to the server          |\n| var client = new MongoClient(connectionUri);              | ` ## Tip See [the MongoDB Manual](https://www.mongodb.com/docs/manual/reference/connection-string/): for more information about creating a connection string. ## MongoClientSettings You can use a `MongoClientSettings` object to configure the connection in code rather than in a connection URI. To use a `MongoClientSettings` object, create an instance of the class and pass it as an argument to the `MongoClient` constructor. In the following example, the driver uses a `MongoClientSettings` object to connect to a MongoDB instance on port `27017` of `localhost`: ```csharp using MongoDB.Driver; // Create a MongoClientSettings object var settings = new MongoClientSettings() {     Scheme = ConnectionStringScheme.MongoDB,     Server = new MongoServerAddress(\"localhost\", 27017) }; // Create a new client and connect to the server var client = new MongoClient(settings); \n``` ## Other Connection Targets ### Connect to Atlas To connect to a MongoDB deployment on Atlas, create a client. You can create a client that uses your connection string and other client options by passing a `MongoClientSettings` object to the `MongoClient`constructor. To specify your connection URI, pass it to the `FromConnectionString()`method, which returns a new `MongoClientSettings` instance. To specify any other client options, set the relevant fields of the `MongoClientSettings` object. You can set the Stable API version as a client option to avoid breaking changes when you upgrade to a new server version. To learn more about the Stable API feature, see the [Stable API page.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/stable-api/#std-label-csharp-stable-api) The following code shows how you can specify the connection string and the Stable API client option when connecting to a MongoDB deployment and verify that the connection is successful: ```csharp using MongoDB.Driver; using MongoDB.Bson; // Replace the placeholders with your credentials const string connectionUri = \"mongodb+srv://<username>:<password>@cluster0.sample.mongodb.net/?retryWrites=true&w=majority\"; var settings = MongoClientSettings.FromConnectionString(connectionUri); // Set the ServerApi field of the settings object to Stable API version 1 settings.ServerApi = new ServerApi(ServerApiVersion.V1); // Create a new client and connect to the server var client = new MongoClient(settings); // Send a ping to confirm a successful connection try {     var result = client.GetDatabase(\"admin\").RunCommand<BsonDocument>(new BsonDocument(\"ping\", 1));     Console.WriteLine(\"Pinged your deployment. You successfully connected to MongoDB!\"); } catch (Exception ex) { Console.WriteLine(ex);} \n``` ## Tip Follow the [Atlas driver connection guide](https://www.mongodb.com/docs/atlas/driver-connection/?tck=docs%5Fdriver%5Fnodejs)to retrieve your connection string. ### Connect to a Replica Set To connect to a replica set deployment, specify the hostnames (or IP addresses) and port numbers of the members of the replica set. If you aren't able to provide a full list of hosts in the replica set, you can specify one or more of the hosts in the replica set and instruct the driver to perform automatic discovery in one of the following ways:\n\n In the following example, the driver uses a sample connection URI to connect to the MongoDB replica set `sampleRS`, which is running on port `27017` of three different hosts, including `sample.host1`: ```csharp using MongoDB.Driver; // Connection URI const string connectionUri = \"mongodb://sample.host1:27017/?replicaSet=sampleRS\"; // Create a new client and connect to the server var client = new MongoClient(connectionUri); \n``` ← [Connection](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/ \"Previous Section\")[Connection Options](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/connection-options/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/connection/tls/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Enable TLS on a Connection On this page * [Overview](#overview)\n* [Enable TLS](#enable-tls)\n* [Configure a Client Certificate](#configure-a-client-certificate)\n* [Allow Insecure TLS](#allow-insecure-tls)\n* [Check Certificate Revocation](#check-certificate-revocation)\n* [Revocation Checking by Operating System](#revocation-checking-by-operating-system)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to connect to MongoDB instances with the[TLS/SSL](https://en.wikipedia.org/wiki/Transport%5FLayer%5FSecurity)security protocol using the underlying TLS/SSL support in the .NET framework. To configure your connection to use TLS/SSL, enable the TLS/SSL settings in either the [connection string](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/connection-options/#std-label-csharp-connection-uri) or[MongoClientSettings.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/connection-options/#std-label-csharp-mongo-client-settings) ## Enable TLS You can enable TLS for the connection to your MongoDB instance in two different ways: using a property on a `MongoClientSettings` object or through a parameter in your connection string. ## Configure a Client Certificate You can configure your X.509 certificate using `MongoClientSettings`. The following code sample creates a new X.509 certificate object using the certificate file named`client.p12`, which is protected by the password `mySuperSecretPassword`. The code then adds this certificate to the `SslSettings.ClientCertificates` array in`MongoClientSettings`. `| var cert = new X509Certificate2(\"client.p12\", \"mySuperSecretPassword\"); |\n| ----------------------------------------------------------------------- |\n| var settings = new MongoClientSettings                                  |\n| {                                                                       |\n| SslSettings = new SslSettings                                           |\n| {                                                                       |\n| ClientCertificates = new[] { cert }                                     |\n| },                                                                      |\n| UseTls = true                                                           |\n| };                                                                      | ` ## Important\n\n ## Allow Insecure TLS When TLS is enabled, the .NET/C# Driver automatically verifies the certificate that the server presents. When testing your code, you can disable certificate verification. This is known as _insecure TLS._ When using insecure TLS, the only requirement is that the server present an X.509 certificate. The driver will accept a certificate even if any of the following are true: * The hostname of the server and the subject name (or subject alternative name) on the certificate don't match.\n* The certificate is expired or not yet valid.\n* The certificate doesn't have a trusted root certificate in the chain.\n* The certificate purpose isn't valid for server identification. You can allow insecure TLS in two different ways: using a property on a`MongoClientSettings` object or through a parameter in your connection string. ## Warning Always set this option to `false` in production. For security reasons, it's important that the server certificate is properly validated. ## Check Certificate Revocation When an X.509 certificate should no longer be trusted--for example, if its private key has been compromised--the certificate authority will revoke the certificate. By default, the .NET/C# Driver doesn't check whether a server's certificate has been revoked before it connects. You can enable revocation checking using either`MongoClientSettings` or the connection string. ## Note The .NET/C# Driver doesn't check revocation by default because this is the default behavior of the `SslStream` class in both the[.NET framework](https://learn.microsoft.com/en-us/dotnet/api/system.net.security.sslstream.authenticateasclient?view=netframework-4.8#System%5FNet%5FSecurity%5FSslStream%5FAuthenticateAsClient%5FSystem%5FString%5F)and the [.NET standard.](https://learn.microsoft.com/en-us/dotnet/api/system.net.security.sslstream.authenticateasclient?view=netstandard-2.1#System%5FNet%5FSecurity%5FSslStream%5FAuthenticateAsClient%5FSystem%5FString%5F) ### Revocation Checking by Operating System The .NET/C# Driver supports the following revocation-checking mechanisms differently on Windows, macOS, and Linux: * [Online Certificate Status Protocol (OCSP)](https://en.wikipedia.org/wiki/Online%5FCertificate%5FStatus%5FProtocol), a common mechanism for checking revocation\n* [OCSP stapling](https://en.wikipedia.org/wiki/OCSP%5Fstapling), a mechanism in which the server includes a time-stamped OCSP response to the client along with the certificate\n* [Certificate revocation lists (CRLs),](https://en.wikipedia.org/wiki/Certificate%5Frevocation%5Flist), an alternative to OCSP #### Windows On Windows, the .NET/C# Driver supports OCSP, OCSP stapling, and CRLs without OCSP, in both the .NET Framework and .NET Core. ## Warning On Windows, the .NET/C# Driver will report a \"hard fail\" and cancel the TLS handshake if the OCSP responder is unavailable. Other operating systems and drivers will report a \"soft fail\" and continue connecting. #### macOS On macOS, the .NET/C# Driver supports OCSP and OCSP stapling. Beginning with .NET Core 2.0, the driver does **not** support CRLs without OCSP. #### Linux On Linux, the .NET/C# Driver supports OCSP, OCSP stapling, and CRLs without OCSP. ## API Documentation To learn more about any of the connection options discussed in this guide, see the following API documentation: * [MongoClientSettings](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FDriver%5FMongoClientSettings.htm) ← [Connection Options](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/connection-options/ \"Previous Section\")[CRUD Operations](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/retrieve/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Retrieve Data On this page * [Overview](#overview)\n* [Sample Data](#sample-data)\n* [Find Documents](#find-documents)\n* [Find One Document](#find-one-document)\n* [Find Multiple Documents](#find-multiple-documents)\n* [Modify Find Behavior](#modify-find-behavior)\n* [Example](#example)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to retrieve data from your MongoDB collections with the MongoDB .NET/C# Driver. ### Sample Data The examples in this guide use the `sample_restaurants.restaurants` collection from the [Atlas sample datasets](https://www.mongodb.com/docs/atlas/sample-data/). To learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the [Quick Start.](https://mongodb.com/docs/drivers/csharp/current/quick-start/#std-label-csharp-quickstart) The examples on this page use the following `Restaurant`, `Address`, and `GradeEntry`classes as models: `| public class Restaurant                      |\n| -------------------------------------------- |\n| {                                            |\n| public ObjectId Id { get; set; }             |\n| public string Name { get; set; }             |\n| [BsonElement(\"restaurant_id\")]               |\n| public string RestaurantId { get; set; }     |\n| public string Cuisine { get; set; }          |\n| public Address Address { get; set; }         |\n| public string Borough { get; set; }          |\n| public List<GradeEntry> Grades { get; set; } |\n| }                                            | ` ```csharp public class Address {     public string Building { get; set; }     [BsonElement(\"coord\")]     public double[] Coordinates { get; set; }     public string Street { get; set; }     [BsonElement(\"zipcode\")]     public string ZipCode { get; set; } } \n``` ```csharp public class GradeEntry {     public DateTime Date { get; set; }     public string Grade { get; set; }     public float Score { get; set; } } \n``` ## Note The documents in the `restaurants` collection use the camel-case naming convention. The examples in this guide use a `ConventionPack`to deserialize the fields in the collection into Pascal case and map them to the properties in the `Restaurant` class. To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) ## Find Documents Use the `Find()` method to retrieve documents from a collection. The `Find()` method takes a **query filter** and returns all matching documents. A query filter is an object that specifies the documents you want to retrieve in your query. To learn more about query filters, see [Specify a Query.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/specify-query/#std-label-csharp-specify-query) ### Find One Document\n\n ## Tip ### First Document The `FirstOrDefault()` method returns the first document in[natural order](https://www.mongodb.com/docs/manual/reference/glossary/#std-term-natural-order)on disk if no sort criteria is specified. To see a full example of using the `Find()` method to find a single document, see[Additional Information.](#std-label-csharp-retrieve-additional-information) ### Find Multiple Documents To find multiple documents in a collection, pass a query filter to the `Find()`method that specifies the criteria of the documents you want to retrieve. You can use a **cursor** to iterate over the documents returned by the `Find()`method. A cursor is a mechanism that allows an application to iterate over database results while holding only a subset of them in memory at a given time. Cursors are useful when your `Find()` method returns a large amount of documents. To use a cursor to iterate over the documents, pass a query filter to the `Find()` method that specifies the criteria of the documents you want to find, then chain the `ToCursor()` or `ToCursorAsync()` method. To view a synchronous or asynchronous example, select the corresponding tab. If you are returning a small number of documents, or need your results returned as a `List` object, use the `ToList()` or `ToListAsync()` methods. To find multiple documents in a collection and hold them in memory as a list, pass a query filter to the `Find()` method that specifies the criteria of the documents you want to find, then chain the `ToList()` or `ToListAsync()` method. To view a synchronous or asynchronous example, select the corresponding tab. To see a full example of using the `Find()` method to find multiple documents, see [Additional Information.](#std-label-csharp-retrieve-additional-information) ## Note ### Find All Documents To find all documents in a collection, pass an empty filter to the `Find()` method. ```csharp var filter = Builders<Restaurant>.Filter.Empty; var allRestaurants = _restaurantsCollection.Find(filter); \n``` To see a fully runnable example of using the `Find()` method to find all documents, see[Additional Information.](#std-label-csharp-retrieve-additional-information) ### Modify Find Behavior You can modify the behavior of the `Find()` method by passing a `FindOptions` object. You can configure the commonly used options with the following methods:\n\n To see a full list of available options, see[FindOptions Properties.](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/Properties%5FT%5FMongoDB%5FDriver%5FFindOptions.htm) ### Example The following example performs these actions: * Finds all documents with \"Pizza\" in the `cuisine` field\n* Sets the `BatchSize` to `3`\n* Stores the results in a cursor\n* Prints the number of documents currently held in the cursor ```csharp var filter = Builders<Restaurant>.Filter.Eq(\"cuisine\", \"Pizza\"); var findOptions = new FindOptions {    BatchSize = 3 }; using (var cursor = _restaurantsCollection.Find(filter, findOptions).ToCursor()) {    cursor.MoveNext();    Console.WriteLine($\"Number of documents in cursor: {cursor.Current.Count()}\"); } \n``` HIDE OUTPUT `| Number of documents in cursor: 3 |\n| -------------------------------- | ` ## Tip ### Clean Up Create a cursor with a [using statement](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement) to automatically invoke the[Dispose()](https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose?view=net-7.0)method once the cursor is no longer in use. ## Additional Information To learn more about query filters, see [Specify a Query.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/specify-query/#std-label-csharp-specify-query) To learn how to specify queries using LINQ, see [LINQ.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/linq/#std-label-csharp-linq) To view runnable examples of the `Find()` method, see the[Find a Document](https://mongodb.com/docs/drivers/csharp/current/usage-examples/findOne/#std-label-csharp-find-one) page. ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation:\n\n ← [Read Operations](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/ \"Previous Section\")[Specify a Query](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/specify-query/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/specify-query/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Specify a Query On this page * [Overview](#overview)\n* [Literal Values](#literal-values)\n* [Comparison Operators](#comparison-operators)\n* [Logical Operators](#logical-operators)\n* [Array Operators](#array-operators)\n* [Element Operators](#element-operators)\n* [Evaluation Operators](#evaluation-operators)\n* [Additional Information](#additional-information) ## Overview In this guide, you can learn how to specify a query using the MongoDB .NET/C# Driver. You can narrow the set of matched documents returned by your query by creating a**query filter**. A query filter is an expression that specifies the documents you want to match in a read, update, or delete operation. ## Note ### Using LINQ This guide shows how to specify queries using query filters. You can also specify queries using LINQ. To learn more about using LINQ, see[LINQ.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/linq/#std-label-csharp-linq) The examples in this guide use the following documents in a collection called`guitars`: `| { \"_id\": 1, \"make\": \"Fender\", \"models\": [\"Stratocaster\", \"Telecaster\"], \"establishedYear\": 1946, \"rating\": 9 } |\n| -------------------------------------------------------------------------------------------------------------- |\n| { \"_id\": 2, \"make\": \"Gibson\", \"models\": [\"Les Paul\", \"SG\", \"Explorer\"], \"establishedYear\": 1902, \"rating\": 8 } |\n| { \"_id\": 3, \"make\": \"PRS\", \"models\": [\"Silver Sky\", \"SE\", \"Custom\"], \"establishedYear\": 1985, \"rating\": 9 }    |\n| { \"_id\": 4, \"make\": \"Kiesel\", \"models\": [\"Ares\", \"Vader\", \"Solo\"], \"establishedYear\": 2015 }                   |\n| { \"_id\": 5, \"make\": \"Ibanez\", \"models\": [\"RG\", \"AZ\"], \"establishedYear\": 1957, \"rating\": 7 }                   |\n| { \"_id\": 6, \"make\": \"Strandberg\", \"models\": [\"Boden\", \"Salen\"], \"establishedYear\": 1982 }                      | ` The following `Guitar` class models the documents in this collection. ```csharp public class Guitar {     public int Id { get; set; }     public string Make { get; set; }     public List<string> Models { get; set; }     public int EstablishedYear { get; set; }     public int? Rating { get; set; } } \n``` ## Note The documents in the `guitars` collection use the camel-case naming convention. The examples in this guide use a `ConventionPack`to deserialize the fields in the collection into Pascal case and map them to the properties in the `Guitar` class. To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) To learn more about class mapping, see [Class Mapping.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/class-mapping/#std-label-csharp-class-mapping) The following code instantiates the `_guitarsCollection` object using the`Guitar` class as a type parameter. This type parameter causes the driver to automatically serialize and deserialize the documents it sends to and receives from MongoDB to instances of the `Guitar` class: ```csharp private static IMongoCollection<Guitar> _guitarsCollection; \n``` ## Literal Values Literal value queries return documents with an exact match to your query filter. The following example specifies a query filter as a parameter to the `Find()`method. The query matches all documents where the`make` field equals \"Fender\". ```csharp\n\n foreach (var doc in results) {     Console.WriteLine(doc.ToBsonDocument()); } \n``` HIDE OUTPUT `| { \"_id\" : 1, \"make\" : \"Fender\", \"models\" : [\"Stratocaster\", \"Telecaster\"], \"establishedYear\" : 1946, \"rating\" : 9 } |\n| ------------------------------------------------------------------------------------------------------------------- | ` The following example uses builders to create a query filter that matches the same documents as the preceding example: ```csharp var filter = Builders<Guitar>.Filter.Eq(g => g.Make, \"Fender\"); var result = _guitarsCollection.Find(filter).ToList(); foreach (var doc in result) {     Console.WriteLine(doc.ToBsonDocument()); } \n``` HIDE OUTPUT ``` { \"_id\" : 1, \"make\" : \"Fender\", \"models\" : [\"Stratocaster\", \"Telecaster\"], \"establishedYear\" : 1946, \"rating\" : 9 } \n``` ## Tip ### Find All Documents Use an empty query filter to match all documents in the collection. Create an empty query filter with builders as follows: ```csharp var result = _guitarsCollection.Find(Builders<Guitar>.Filter.Empty).ToList(); \n``` To learn more about using builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders) ## Comparison Operators Comparison operators analyze the value in a document against the specified value in your query filter. Common comparison operators include: | Operator | Builder | Description           |\n| -------- | ------- | --------------------- |\n| \\>       | Gt()    | Greater than          |\n| <=       | Lte()   | Less than or equal to |\n| !=       | Ne()    | Not equal to          | For a full list of comparison operators, see the [Comparison Query Operators](https://www.mongodb.com/docs/manual/reference/operator/query-comparison/) page. The following example specifies a query filter as a parameter to the `Find()`method. The query matches all documents where the `establishedYear` field is greater than `1985`. ```csharp var results = _guitarsCollection.Find(g => g.EstablishedYear > 1985).ToList(); foreach (var doc in results) {     Console.WriteLine(doc.ToBsonDocument()); } \n``` HIDE OUTPUT ``` { \"_id\" : 4, \"make\" : \"Kiesel\", \"models\" : [\"Ares\", \"Vader\", \"Solo\"], \"establishedYear\" : 2015, \"rating\" : null } \n``` The following example uses builders to create a query filter that matches the same documents as the preceding example: ```csharp var filter = Builders<Guitar>.Filter.Gt(g => g.EstablishedYear, 1985); var result = _guitarsCollection.Find(filter).ToList(); foreach (var doc in result) {     Console.WriteLine(doc.ToBsonDocument()); } \n``` HIDE OUTPUT ``` { \"_id\" : 4, \"make\" : \"Kiesel\", \"models\" : [\"Ares\", \"Vader\", \"Solo\"], \"establishedYear\" : 2015, \"rating\" : null } \n``` To learn more about using builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders) ## Logical Operators Logical operators match documents using logic applied to the results of two or more sets of expressions. The following is a list of some logical operators: | Operator | Builder | Description                                    |\n| -------- | ------- | ---------------------------------------------- |\n| &&       | And()   | All expressions must evaluate to true.         |\n| \\||      | Or()    | At least one expression must evaluate to true. |\n\n The following example specifies a query filter as a parameter to the `Find()`method. The query matches all documents where the`establishedYear` field is greater than or equal to `1985`, and the `make`field is not equal to \"Kiesel\". ```csharp var results = _guitarsCollection.Find(g => g.EstablishedYear >= 1985 && r.Make != \"Kiesel\").ToList(); foreach (var doc in results) {     Console.WriteLine(doc.ToBsonDocument()); } \n``` HIDE OUTPUT ``` { \"_id\" : 3, \"make\" : \"PRS\", \"models\" : [\"Silver Sky\", \"SE\", \"Custom\"], \"establishedYear\" : 1985, \"rating\" : 9 } \n``` The following example uses builders to create a query filter that matches the same documents as the preceding example: ```csharp var builder = Builders<Guitar>.Filter; var filter = builder.And(builder.Gte(g => g.EstablishedYear, 1985), builder.Ne(r => r.Make, \"Kiesel\")); var result = _guitarsCollection.Find(filter).ToList(); foreach (var doc in result) {     Console.WriteLine(doc.ToBsonDocument()); } \n``` HIDE OUTPUT ``` { \"_id\" : 3, \"make\" : \"PRS\", \"models\" : [\"Silver Sky\", \"SE\", \"Custom\"], \"establishedYear\" : 1985, \"rating\" : 9 } \n``` To learn more about using builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders) ## Array Operators Array operators match documents based on the value or quantity of elements in an array field. The following is a list of builder methods that use array operators: | Operator | Description                                                                             |\n| -------- | --------------------------------------------------------------------------------------- |\n| All()    | Matches documents if the array field contains all elements specified in the query.      |\n| Any()    | Matches documents if any element in the array field matches the specified query filter. |\n| Size()   | Matches documents if the array field is a specified size.                               | ## Note The `Any()` builder uses the `$elemMatch` query operator. To learn more about the `$elemMatch` query selector, see[$elemMatch.](https://www.mongodb.com/docs/manual/reference/operator/query/elemMatch/#mongodb-query-op.-elemMatch) For more information on the array operators, see the [Array Query Operators](https://www.mongodb.com/docs/manual/reference/operator/query-array/) page. The following example uses builders to create a query filter that matches all documents that have 3 elements in the `models` field: ```csharp var filter = Builders<Guitar>.Filter.Size(g => g.Models, 3); var result = _guitarsCollection.Find(filter).ToList(); foreach (var doc in result) {     Console.WriteLine(doc.ToBsonDocument()); } \n``` HIDE OUTPUT ``` { \"_id\" : 2, \"make\" : \"Gibson\", \"models\" : [\"Les Paul\", \"SG\", \"Explorer\"], \"establishedYear\" : 1902, \"rating\" : 8 } { \"_id\" : 3, \"make\" : \"PRS\", \"models\" : [\"Silver Sky\", \"SE\", \"Custom\"], \"establishedYear\" : 1985, \"rating\" : 9 } { \"_id\" : 4, \"make\" : \"Kiesel\", \"models\" : [\"Ares\", \"Vader\", \"Solo\"], \"establishedYear\" : 2015, \"rating\" : null } \n``` To learn more about using builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders)\n\n Element operators query data based on the presence or type of a field. For a full list of element operators, see the [Element Query Operators](https://www.mongodb.com/docs/manual/reference/operator/query-element/) page. The following example uses builders to create a query filter that matches all documents that have a `rating` field: ```csharp var filter = Builders<Guitar>.Filter.Exists(g => g.Rating); var result = _guitarsCollection.Find(filter).ToList(); foreach (var doc in result) {     Console.WriteLine(doc.ToBsonDocument()); } \n``` HIDE OUTPUT ``` { \"_id\" : 1, \"make\" : \"Fender\", \"models\" : [\"Stratocaster\", \"Telecaster\"], \"establishedYear\" : 1946, \"rating\" : 9 } { \"_id\" : 2, \"make\" : \"Gibson\", \"models\" : [\"Les Paul\", \"SG\", \"Explorer\"], \"establishedYear\" : 1902, \"rating\" : 8 } { \"_id\" : 3, \"make\" : \"PRS\", \"models\" : [\"Silver Sky\", \"SE\", \"Custom\"], \"establishedYear\" : 1985, \"rating\" : 9 } { \"_id\" : 5, \"make\" : \"Ibanez\", \"models\" : [\"RG\", \"AZ\"], \"establishedYear\" : 1957, \"rating\" : 7 } \n``` To learn more about using builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders) ## Evaluation Operators Evaluation operators analyze data on individual fields, or on the entire collection's documents. Some builder methods that use evaluation operators include `Regex()`and `Text()`. For a full list of evaluation operators, see the [Evaluation Query Operators](https://www.mongodb.com/docs/manual/reference/operator/query-evaluation/) page. The following example uses builders to create a query filter that matches all documents that have a value in the `make` field that starts with the letter \"G\": ```csharp var filter = Builders<Guitar>.Filter.Regex(g => g.Make, \"^G\"); var result = _guitarsCollection.Find(filter).ToList(); foreach (var doc in result) {     Console.WriteLine(doc.ToBsonDocument()); } \n``` HIDE OUTPUT ``` { \"_id\" : 2, \"make\" : \"Gibson\", \"models\" : [\"Les Paul\", \"SG\", \"Explorer\"], \"establishedYear\" : 1902, \"rating\" : 8 } \n``` To learn more about using builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders) ## Additional Information For more information about the operators mentioned in this guide, see the following Server Manual Entries: * [Comparison Query Operators](https://www.mongodb.com/docs/manual/reference/operator/query-comparison/)\n* [Logical Query Operators](https://www.mongodb.com/docs/manual/reference/operator/query-logical/)\n* [Array Query Operators](https://www.mongodb.com/docs/manual/reference/operator/query-array/)\n* [Element Query Operators](https://www.mongodb.com/docs/manual/reference/operator/query-element/)\n* [Evaluation Query Operators](https://www.mongodb.com/docs/manual/reference/operator/query-evaluation/) To learn more about using Builders, see [Operations with Builders.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/#std-label-csharp-builders) To learn how to specify queries using LINQ, see [LINQ.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/linq/#std-label-csharp-linq) ← [Retrieve Data](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/retrieve/ \"Previous Section\")[Operations with Builders](https://mongodb.com/docs/drivers/csharp/current/fundamentals/builders/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/change/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Change Documents On this page * [Overview](#overview)\n* [Sample Data](#sample-data)\n* [Update Operations](#update-operations)\n* [Required Parameters](#required-parameters)\n* [Update One Document](#update-one-document)\n* [Update Many Documents](#update-many-documents)\n* [Customize the Update Operation](#customize-the-update-operation)\n* [Return Value](#return-value)\n* [Example](#example)\n* [Replace Operation](#replace-operation)\n* [Required Parameters](#required-parameters-1)\n* [Customize the Replace Operation](#customize-the-replace-operation)\n* [Return Value](#return-value-1)\n* [Example](#example-1)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to change documents in a MongoDB collection using two different kinds of operations: * [Update](#std-label-csharp-update-operation)\n* [Replace](#std-label-csharp-replace-operation) ### Sample Data The examples in this guide use the `restaurants` collection from the `sample_restaurants` database. The documents in this collection use the following `Restaurant`, `Address`, and `GradeEntry`classes as models: `| public class Restaurant                      |\n| -------------------------------------------- |\n| {                                            |\n| public ObjectId Id { get; set; }             |\n| public string Name { get; set; }             |\n| [BsonElement(\"restaurant_id\")]               |\n| public string RestaurantId { get; set; }     |\n| public string Cuisine { get; set; }          |\n| public Address Address { get; set; }         |\n| public string Borough { get; set; }          |\n| public List<GradeEntry> Grades { get; set; } |\n| }                                            | ` ```csharp public class Address {     public string Building { get; set; }     [BsonElement(\"coord\")]     public double[] Coordinates { get; set; }     public string Street { get; set; }     [BsonElement(\"zipcode\")]     public string ZipCode { get; set; } } \n``` ```csharp public class GradeEntry {     public DateTime Date { get; set; }     public string Grade { get; set; }     public float Score { get; set; } } \n``` ## Note The documents in the `restaurants` collection use the camel-case naming convention. The examples in this guide use a `ConventionPack`to deserialize the fields in the collection into Pascal case and map them to the properties in the `Restaurant` class. To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) This collection is from the [sample datasets](https://www.mongodb.com/docs/atlas/sample-data/) provided by Atlas. See the [Quick Start](https://mongodb.com/docs/drivers/csharp/current/quick-start/#std-label-csharp-quickstart) to learn how to create a free MongoDB cluster and load this sample data. ## Update Operations You can perform update operations in MongoDB with the following methods:\n\n ### Required Parameters Each update method requires the following parameters: * A **query filter** document, which determines which records to update. See the[MongoDB server manual](https://www.mongodb.com/docs/manual/core/document/#query-filter-documents) for more information about query filters.\n* An **update** document, which specifies the **update operator** (the kind of update to perform) and the fields and values that should change. See the[Field Update Operators Manual page](https://www.mongodb.com/docs/manual/reference/operator/update-field/) for a complete list of update operators and their usage. The .NET/C# Driver provides a `Builders` class that simplifies the creation of both query filters and update documents. The following code sample uses `Builders` to create two documents for use as parameters in an update operation: * A query filter that searches for restaurants with a `borough` field value of \"Manhattan\"\n* An update document that sets the value of the `borough` field of these restaurants to \"Manhattan (north)\" ```csharp var filter = Builders<Restaurant>.Filter     .Eq(restaurant => restaurant.Borough, \"Manhattan\"); var update = Builders<Restaurant>.Update     .Set(restaurant => restaurant.Borough, \"Manhattan (north)\"); \n``` ## Tip ### Aggregation Pipelines in Update Operations If you are using MongoDB Version 4.2 or later, you can use aggregation pipelines made up of a subset of aggregation stages in update operations. For more information on the aggregation stages MongoDB supports in aggregation pipelines used in update operations, see our tutorial on building[updates with aggregation pipelines.](https://www.mongodb.com/docs/manual/tutorial/update-documents-with-aggregation-pipeline/) ### Update One Document The following code shows how to use the asynchronous `UpdateOneAsync()` method or the synchronous `UpdateOne()` method to update one document. ### Update Many Documents The following code shows how to use the asynchronous`UpdateManyAsync()` method or the synchronous `UpdateMany()` method to update all matched documents. ## Tip Find runnable examples that use these methods under [Additional Information.](#std-label-csharp-change-info) ### Customize the Update Operation Both methods optionally accept an `UpdateOptions` object as an additional parameter, which represents options you can use to configure the update operation. If you don't specify any `UpdateOptions` properties, the driver does not customize the update operation. The `UpdateOptions` type allows you to configure options with the following properties:\n\n ### Return Value The `UpdateOne()` and `UpdateMany()` methods each return an `UpdateResult`object. The `UpdateResult` type contains the following properties: | Property                 | Description                                                                                                                                       |\n| ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n| IsAcknowledged           | Indicates whether the update operation was acknowledged by MongoDB.                                                                               |\n| IsModifiedCountAvailable | Indicates whether you can read the count of updated records on theUpdateResult.                                                                   |\n| MatchedCount             | The number of documents that matched the query filter, regardless of how many were updated.                                                       |\n| ModifiedCount            | The number of documents updated by the update operation. If an updated document is identical to the original, it won't be included in this count. |\n| UpsertedId               | The ID of the document that was upserted in the database, if the driver performed an upsert.                                                      | ### Example The following code uses the `UpdateMany()` method to find all documents where the`borough` field has the value \"Manhattan\", then updates the `borough`value in these documents to \"Manhattan (north)\". Because the `IsUpsert` option is set to `true`, the driver inserts a new document if the query filter doesn't match any existing documents. ```csharp   var filter = Builders<Restaurant>.Filter       .Eq(restaurant => restaurant.Borough, \"Manhattan\");   var update = Builders<Restaurant>.Update       .Set(restaurant => restaurant.Borough, \"Manhattan (north)\");   UpdateOptions opts = new UpdateOptions()   {       Comment = new BsonString(\"Borough updated for C# Driver Fundamentals\"),       IsUpsert = true   };   Console.WriteLine(\"Updating documents...\");   var result = _restaurantsCollection.UpdateMany(filter, update, opts);   Console.WriteLine($\"Updated documents: {result.ModifiedCount}\");   Console.WriteLine($\"Result acknowledged? {result.IsAcknowledged}\"); \n``` VIEW OUTPUT ## Note If the preceding example used the `UpdateOne()` method instead of`UpdateMany()`, the driver would update only the first of the matched documents. ## Replace Operation You can perform a replace operation in MongoDB with the `ReplaceOne()` method. This method removes all fields (except the `_id` field) from the first document that matches the search criteria, then inserts the fields and values you specify into the document.\n\n The `ReplaceOne()` method requires the following parameters: * A query filter document, which determines which record to replace.\n* A **replacement** document, which specifies the fields and values to insert in the new document. If the documents in your collection are mapped to a C# class, the replacement document can be an instance of this class. Like in an update operation, you can use the `Builders` class in the .NET/C# Driver to create a query filter. The following code sample uses `Builders` to create a query filter that searches for restaurants with a `name` field value of \"Pizza Town\". The code also creates a new`Restaurant` object that will replace the first matched document. ```csharp var filter = Builders<Restaurant>.Filter.Eq(restaurant => restaurant.Name, \"Pizza Town\"); Restaurant newRestaurant = new() {     Name = \"Food World\",     Cuisine = \"American\",     Address = new BsonDocument     {         {\"street\", \"Food St\"},         {\"zipcode\", \"10003\"},     },     Borough = \"Manhattan\", }; \n``` ## Important The values of `_id` fields are immutable. If your replacement document specifies a value for the `_id` field, it must match the `_id` value of the existing document. The following code shows how to use the asynchronous `ReplaceOneAsync()` method or the synchronous `ReplaceOne()` method to replace one document. ## Tip Find runnable examples that use these methods under [Additional Information.](#std-label-csharp-change-info) ### Customize the Replace Operation The `ReplaceOne()` method optionally accepts a `ReplaceOptions` object as an additional parameter, which represents options you can use to configure the replace operation. If you don't specify any `ReplaceOptions` properties, the driver does not customize the replace operation. The `ReplaceOptions` type allows you to configure options with the following properties:\n\n ### Return Value The `ReplaceOne()` method returns a `ReplaceOneResult`object. The `ReplaceOneResult` type contains the following properties: | Property                 | Description                                                                                    |\n| ------------------------ | ---------------------------------------------------------------------------------------------- |\n| IsAcknowledged           | Indicates whether the replace operation was acknowledged by MongoDB.                           |\n| IsModifiedCountAvailable | Indicates whether you can read the count of replaced records on theReplaceOneResult.           |\n| MatchedCount             | The number of documents that matched the query filter, regardless of whether one was replaced. |\n| ModifiedCount            | The number of documents replaced by the replace operation.                                     |\n| UpsertedId               | The ID of the document that was upserted in the database, if the driver performed an upsert.   | ### Example The following code uses the `ReplaceOne()` method to find the first document where the`name` field has the value \"Pizza Town\", then replaces this document with a new `Restaurant` document named \"Food World\". Because the `IsUpsert` option is set to `true`, the driver inserts a new document if the query filter doesn't match any existing documents. ```csharp var filter = Builders<Restaurant>.Filter.Eq(restaurant => restaurant.Name, \"Pizza Town\"); Restaurant newRestaurant = new() {     Name = \"Food World\",     Cuisine = \"American\",     Address = new BsonDocument     {         {\"street\", \"Food St\"},         {\"zipcode\", \"10003\"},     },     Borough = \"Manhattan\", }; ReplaceOptions opts = new ReplaceOptions() {     Comment = new BsonString(\"Restaurant replaced for .NET/C# Driver Fundamentals\"),     IsUpsert = true }; Console.WriteLine(\"Replacing document...\"); var result = _restaurantsCollection.ReplaceOne(filter, newRestaurant, opts); Console.WriteLine($\"Replaced documents: {result.ModifiedCount}\"); Console.WriteLine($\"Result acknowledged? {result.IsAcknowledged}\"); \n``` VIEW OUTPUT ## Additional Information For runnable examples of the update and replace operations, see the following usage examples: * [Update a Document](https://mongodb.com/docs/drivers/csharp/current/usage-examples/updateOne/#std-label-csharp-update-one)\n* [Update Many Documents](https://mongodb.com/docs/drivers/csharp/current/usage-examples/updateMany/#std-label-csharp-update-many)\n* [Replace a Document](https://mongodb.com/docs/drivers/csharp/current/usage-examples/replaceOne/#std-label-csharp-replace-one) To learn more about creating query filters, see the [Specify a Query](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/specify-query/#std-label-csharp-specify-query) guide. ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API documentation:\n\n ← [Insert Documents](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/insert/ \"Previous Section\")[Delete Documents](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/delete/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/connection/connection-options/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Connection Options On this page * [Using the Connection URI](#using-the-connection-uri)\n* [Using MongoClientSettings](#using-mongoclientsettings)\n* [Connection Options](#connection-options-1) This section describes the MongoDB connection and authentication options available in the .NET/C# Driver. You can configure your connection using either the connection URI or a `MongoClientSettings` object. ## Using the Connection URI If you pass a connection URI to the `MongoClient` constructor, you can include connection options in the string as `<name>=<value>` pairs. In the following example, the connection URI contains the `connectTimeoutMS` option with a value of `60000`and the `tls` option with a value of `true`: `| using MongoDB.Driver;                                                                            |\n| ------------------------------------------------------------------------------------------------ |\n| // Connection URI                                                                                |\n| const string connectionUri = \"mongodb+srv://sample.host:27017/?connectTimeoutMS=60000&tls=true\"; |\n| // Create a new client and connect to the server                                                 |\n| var client = new MongoClient(connectionUri);                                                     | ` ## Using `MongoClientSettings` You can use a `MongoClientSettings` object to configure connection settings in code rather than in a connection URI. Configuring the connection this way makes it easier to change settings at runtime, helps you catch errors during compilation, and provides more configuration options than the connection URI. To use a `MongoClientSettings` object, create an instance of the class, set its properties, and pass it as an argument to the `MongoClient` constructor: ```csharp //const string connectionUri = \"mongodb+srv://sample.host:27017/?connectTimeoutMS=60000&tls=true\"; // Create a MongoClientSettings object var settings = new MongoClientSettings() {     Scheme = ConnectionStringScheme.MongoDBPlusSrv,     Server = new MongoServerAddress(\"sample.host\", 27017),     ConnectTimeout = new TimeSpan(0, 0, 60),     UseTls = true }; // Create a new client and connect to the server var client = new MongoClient(settings); \n``` ### Connection Options The following table lists each connection option available in the`MongoClientSettings` class and, if possible, how to achieve the same result in the connection string. If a `MongoClientSettings` property maps to more than one option in the connection string, the **Connection URI Example** shows all relevant options. ## Note If you're using a query parameter for a time duration, the value must be in milliseconds. For example, to specify 60 seconds, use the value `60000`. If you're using a `MongoClientSettings` object for a time duration, use the appropriate`TimeSpan` value.\n\n ← [Connection Guide](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/connect/ \"Previous Section\")[Enable TLS on a Connection](https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/tls/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/delete/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Delete Documents On this page * [Overview](#overview)\n* [Sample Data](#sample-data)\n* [Delete Operations](#delete-operations)\n* [Delete One Document](#delete-one-document)\n* [Delete Multiple Documents](#delete-multiple-documents)\n* [Parameters](#parameters)\n* [Example](#example)\n* [Return Value](#return-value)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to remove documents from your MongoDB collections using delete operations. ### Sample Data The examples in this guide use the `restaurants` collection from the `sample_restaurants` database. The documents in this collection use the following `Restaurant`, `Address`, and `GradeEntry`classes as models: `| public class Restaurant                      |\n| -------------------------------------------- |\n| {                                            |\n| public ObjectId Id { get; set; }             |\n| public string Name { get; set; }             |\n| [BsonElement(\"restaurant_id\")]               |\n| public string RestaurantId { get; set; }     |\n| public string Cuisine { get; set; }          |\n| public Address Address { get; set; }         |\n| public string Borough { get; set; }          |\n| public List<GradeEntry> Grades { get; set; } |\n| }                                            | ` ```csharp public class Address {     public string Building { get; set; }     [BsonElement(\"coord\")]     public double[] Coordinates { get; set; }     public string Street { get; set; }     [BsonElement(\"zipcode\")]     public string ZipCode { get; set; } } \n``` ```csharp public class GradeEntry {     public DateTime Date { get; set; }     public string Grade { get; set; }     public float Score { get; set; } } \n``` ## Note The documents in the `restaurants` collection use the camel-case naming convention. The examples in this guide use a `ConventionPack`to deserialize the fields in the collection into Pascal case and map them to the properties in the `Restaurant` class. To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) This collection is from the [sample datasets](https://www.mongodb.com/docs/atlas/sample-data/) provided by Atlas. See the [Quick Start](https://mongodb.com/docs/drivers/csharp/current/quick-start/#std-label-csharp-quickstart) to learn how to create a free MongoDB cluster and load this sample data. ## Delete Operations Use delete operations to remove documents that match a **query filter**. The query filter determines which records are selected for deletion based on the criteria in [the query filter document](https://www.mongodb.com/docs/manual/core/document/#query-filter-documents). You can perform delete operations in MongoDB with the following methods: * `DeleteOne()`, which deletes _the first document_ that matches the query filter\n* `DeleteMany()`, which deletes _all documents_ that match the query filter ### Delete One Document\n\n ### Delete Multiple Documents The following code shows how to use the asynchronous`DeleteManyAsync()` method or the synchronous `DeleteMany()` method to delete all matched documents. ## Tip Find runnable examples using these methods under [additional information.](#std-label-additional-info) ### Parameters The `DeleteOne()` and `DeleteMany()` methods require you to pass a query filter specifying which documents to match. More information on how to construct a query filter is available in [the Query Documents tutorial.](https://www.mongodb.com/docs/manual/tutorial/query-documents/) Both methods optionally take a `DeleteOptions` type as an additional parameter, which represents options you can use to configure the delete operation. If you don't specify any `DeleteOptions` properties, the driver does not customize the delete operation. The `DeleteOptions` type allows you to configure options with the following properties: | Property  | Description                                                                                                                                                                                                                |\n| --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Collation | Gets or sets the type of language collation to use when sorting results. See [the delete statements](https://www.mongodb.com/docs/manual/reference/command/delete/#std-label-deletes-array-collation)for more information. |\n| Comment   | Gets or sets the comment for the operation. See [the delete command fields](https://www.mongodb.com/docs/manual/reference/command/delete/#command-fields)for more information.                                             |\n| Hint      | Gets or sets the index to use to scan for documents. See [the delete statements](https://www.mongodb.com/docs/manual/reference/command/delete/#std-label-deletes-array-hint)for more information.                          |\n| Let       | Gets or sets the let document. See [the delete command fields](https://www.mongodb.com/docs/manual/reference/command/delete/#command-fields)for more information.                                                          | ### Example The following code uses the `DeleteMany()` method to search on the \"borough\\_1\" index and delete all documents where the `address.street`field value includes the phrase \"Pearl Street\": ```csharp var filter = Builders<Restaurant>.Filter     .Regex(\"address.street\", \"Pearl Street\"); DeleteOptions opts = new DeleteOptions { Hint = \"borough_1\" }; Console.WriteLine(\"Deleting documents...\"); var result = _restaurantsCollection.DeleteMany(filter, opts); Console.WriteLine($\"Deleted documents: {result.DeletedCount}\"); Console.WriteLine($\"Result acknowledged? {result.IsAcknowledged}\"); \n``` VIEW OUTPUT ## Tip If the preceding example used the `DeleteOne()` method instead of`DeleteMany()`, the driver would delete the first of the 26 matched documents. ### Return Value\n\n ## Additional Information For runnable examples of the delete operations, see the following usage examples: * [Delete a Document](https://mongodb.com/docs/drivers/csharp/current/usage-examples/deleteOne/#std-label-csharp-delete-one)\n* [Delete Many Documents](https://mongodb.com/docs/drivers/csharp/current/usage-examples/deleteMany/#std-label-csharp-delete-many) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation: * [DeleteOne()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/Overload%5FMongoDB%5FDriver%5FIMongoCollectionExtensions%5FDeleteOne.htm)\n* [DeleteOneAsync()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/Overload%5FMongoDB%5FDriver%5FIMongoCollectionExtensions%5FDeleteOneAsync.htm)\n* [DeleteMany()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/Overload%5FMongoDB%5FDriver%5FIMongoCollectionExtensions%5FDeleteMany.htm)\n* [DeleteManyAsync()](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/Overload%5FMongoDB%5FDriver%5FIMongoCollectionExtensions%5FDeleteManyAsync.htm)\n* [DeleteOptions](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/T%5FMongoDB%5FDriver%5FDeleteOptions.htm)\n* [DeleteResult](https://mongodb.github.io/mongo-csharp-driver/2.19/apidocs/html/Properties%5FT%5FMongoDB%5FDriver%5FDeleteResult.htm) ← [Change Documents](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/change/ \"Previous Section\")[Read Operations](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/insert/": " [Docs Home](https://www.mongodb.com/docs/) → [C#/.NET](https://mongodb.com/docs/drivers/csharp/current/) # Insert Documents On this page * [Overview](#overview)\n* [Sample Data](#sample-data)\n* [The \\_id Field](#the-%5Fid-field)\n* [Insert Operations](#insert-operations)\n* [Insert One Document](#insert-one-document)\n* [Insert Multiple Documents](#insert-multiple-documents)\n* [Parameters](#parameters)\n* [Example](#example)\n* [Ordered Behavior](#ordered-behavior)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to add documents to your MongoDB collections using insert operations. ### Sample Data The examples in this guide use the `restaurants` collection from the `sample_restaurants` database. The documents in this collection use the following `Restaurant`, `Address`, and `GradeEntry`classes as models: `| public class Restaurant                      |\n| -------------------------------------------- |\n| {                                            |\n| public ObjectId Id { get; set; }             |\n| public string Name { get; set; }             |\n| [BsonElement(\"restaurant_id\")]               |\n| public string RestaurantId { get; set; }     |\n| public string Cuisine { get; set; }          |\n| public Address Address { get; set; }         |\n| public string Borough { get; set; }          |\n| public List<GradeEntry> Grades { get; set; } |\n| }                                            | ` ```csharp public class Address {     public string Building { get; set; }     [BsonElement(\"coord\")]     public double[] Coordinates { get; set; }     public string Street { get; set; }     [BsonElement(\"zipcode\")]     public string ZipCode { get; set; } } \n``` ```csharp public class GradeEntry {     public DateTime Date { get; set; }     public string Grade { get; set; }     public float Score { get; set; } } \n``` ## Note The documents in the `restaurants` collection use the camel-case naming convention. The examples in this guide use a `ConventionPack`to deserialize the fields in the collection into Pascal case and map them to the properties in the `Restaurant` class. To learn more about custom serialization, see [Custom Serialization.](https://mongodb.com/docs/drivers/csharp/current/fundamentals/data-formats/poco/#std-label-csharp-custom-serialization) This collection is from the [sample datasets](https://www.mongodb.com/docs/atlas/sample-data/) provided by Atlas. See the [Quick Start](https://mongodb.com/docs/drivers/csharp/current/quick-start/#std-label-csharp-quickstart) to learn how to create a free MongoDB cluster and load this sample data. ## The `_id` Field In a MongoDB collection, each document _must_ contain an `_id` field with a unique field value. MongoDB allows you to manage this field in two ways: * You can set this field for each document yourself, ensuring each`_id` field value is unique.\n* You can let the driver automatically generate unique `ObjectId`values for each document `_id`. If you do not manually set an`_id` field value for a document, the driver will populate the field with an `ObjectId`.\n\n ## Note Duplicate `_id` values violate unique index constraints, which causes the driver to return a `MongoWriteException` from`InsertOne()` or a `MongoBulkWriteException` from`InsertMany()`. To learn more about the `_id` field, see the Server Manual Entry on[Unique Indexes.](https://www.mongodb.com/docs/manual/core/index-unique/) To learn more about document structure and rules, see the Server Manual Entry on [Documents.](https://www.mongodb.com/docs/manual/core/document/) ## Insert Operations Use insert operations to add documents to a collection. You can perform inserts in MongoDB with the following methods: * `InsertOne()`, which inserts a single document\n* `InsertMany()`, which inserts multiple documents stored in an`IEnumerable` interface ### Insert One Document The following code shows how to use the asynchronous`InsertOneAsync()` method or the synchronous `InsertOne()` method to insert one document. ### Insert Multiple Documents The following code shows how to use the asynchronous`InsertManyAsync()` method or the synchronous `InsertMany()` method to insert multiple documents. ## Tip Find runnable examples using these methods under [additional information.](#std-label-additional-info) ### Parameters The `InsertOne()` method takes the document you seek to insert as a parameter. The `InsertMany()` method takes an `IEnumerable`collection of documents, such as a list or array, as a parameter. The `InsertOne()` method optionally takes a `InsertOneOptions` type as an additional parameter, which represents options you can use to configure the insert operation. If you don't specify any `InsertOneOptions` properties, the driver does not customize the insert. The `InsertOneOptions` type allows you to configure options with the following properties: | Property                 | Description                                                                                                                                                                                             |\n| ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| BypassDocumentValidation | Gets or sets a value indicating whether to bypass document validation. If true, allows the write to opt-out of[document level validation](https://www.mongodb.com/docs/manual/core/schema-validation/). |\n| Comment                  | Gets or sets the comment for the operation. See [the insert command fields](https://www.mongodb.com/docs/manual/reference/command/insert/#command-fields)for more information.                          | The `InsertMany()` method optionally takes a `InsertManyOptions`type as an additional parameter, which has the preceding`BypassDocumentValidation` and `Comment` properties and the additional `IsOrdered` property:\n\n ### Example The following code uses the `InsertMany()` method to insert four new`Restaurant` documents into a collection with`BypassDocumentValidation` set to `true`: ```csharp var restaurantsList = new List<Restaurant>() {     new() { Name = \"Été Bleu\", Cuisine = \"French\" },     new() { Name = \"Lucky Bird\", Cuisine = \"Café/Coffee/Tea\" },     new() { Name = \"Wildflower Café\", Cuisine = \"Vegetarian\" },     new() { Name = \"Blue Moon Grill\", Cuisine = \"American\" }, }; var options = new InsertManyOptions() { BypassDocumentValidation = true }; Console.WriteLine(\"Inserting documents...\"); _restaurantsCollection.InsertMany(restaurantsList, options); \n``` The `InsertMany()` method has no return value. You can verify that your documents were successfully inserted by executing a `Find()`operation on the collection. For an example on how to find a document, see [Find a Document.](https://mongodb.com/docs/drivers/csharp/current/usage-examples/findOne/#std-label-csharp-find-one) ### Ordered Behavior Assume you want to insert the following documents: ``` { \"_id\" : 1, \"name\" : \"Restaurant A\" } { \"_id\" : 2, \"name\" : \"Restaurant B\" } { \"_id\" : 1, \"name\" : \"Restaurant C\" } { \"_id\" : 3, \"name\" : \"Restaurant D\" } \n``` If you attempt to insert these documents with default`InsertManyOptions`, the driver throws a `MongoBulkWriteException` at the third document because of the repeated `_id` value, but the documents before the error-producing document are still inserted into your collection. If you look inside your collection, you should be able to see the following documents: ``` { \"_id\" : 1, \"name\" : \"Restaurant A\" } { \"_id\" : 2, \"name\" : \"Restaurant B\" } \n``` If you set `IsOrdered` to `false` in your insert operation, the driver will continue to insert your documents even if some documents produce errors. With this modified insert behavior, the driver throws an exception but inserts all documents that do not produce errors. If you look inside your collection, you should be able to see the following documents: ``` { \"_id\" : 1, \"name\" : \"Restaurant A\" } { \"_id\" : 2, \"name\" : \"Restaurant B\" } { \"_id\" : 3, \"name\" : \"Restaurant D\" } \n``` ## Additional Information For runnable examples of the insert operations, see the following usage examples: * [Insert a Document](https://mongodb.com/docs/drivers/csharp/current/usage-examples/insertOne/#std-label-csharp-insert-one)\n* [Insert Multiple Documents](https://mongodb.com/docs/drivers/csharp/current/usage-examples/insertMany/#std-label-csharp-insert-many) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation:\n\n ← [Write Operations](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/ \"Previous Section\")[Change Documents](https://mongodb.com/docs/drivers/csharp/current/fundamentals/crud/write-operations/change/ \"Next Section\") →"
}