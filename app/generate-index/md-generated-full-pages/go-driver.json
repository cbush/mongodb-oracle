{
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Fundamentals Learn how to perform the following tasks using the Go driver in the Fundamentals section: * [Connect to MongoDB](https://mongodb.com/docs/drivers/go/current/fundamentals/connection/#std-label-golang-connection-guide)\n* [Connect to MongoDB Atlas from AWS Lambda](https://www.mongodb.com/docs/atlas/manage-connections-aws-lambda/)\n* [Specify an API Version](https://mongodb.com/docs/drivers/go/current/fundamentals/stable-api/#std-label-golang-stable-api)\n* [How the Driver Uses Context](https://mongodb.com/docs/drivers/go/current/fundamentals/context/#std-label-golang-context)\n* [Authenticate with MongoDB](https://mongodb.com/docs/drivers/go/current/fundamentals/auth/#std-label-golang-authentication-mechanisms)\n* [Use Enterprise Authentication with MongoDB](https://mongodb.com/docs/drivers/go/current/fundamentals/enterprise-auth/#std-label-golang-enterprise-authentication-mechanisms)\n* [Work with BSON](https://mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-bson)\n* [Read from and Write to MongoDB](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/#std-label-golang-crud)\n* [Perform Aggregations](https://mongodb.com/docs/drivers/go/current/fundamentals/aggregation/#std-label-golang-aggregation)\n* [Construct Indexes](https://mongodb.com/docs/drivers/go/current/fundamentals/indexes/#std-label-golang-indexes)\n* [Specify Collations to Order Results](https://mongodb.com/docs/drivers/go/current/fundamentals/collations/#std-label-golang-collations)\n* [Use Driver Events in Your Code](https://mongodb.com/docs/drivers/go/current/fundamentals/monitoring/#std-label-golang-monitoring)\n* [Store and Retrieve Files in MongoDB](https://mongodb.com/docs/drivers/go/current/fundamentals/gridfs/#std-label-golang-gridfs)\n* [Use a Time Series Collection](https://mongodb.com/docs/drivers/go/current/fundamentals/time-series/#std-label-golang-time-series)\n* [Encrypt Fields](https://mongodb.com/docs/drivers/go/current/fundamentals/encrypt-fields/#std-label-golang-fle)\n* [Work with Geospatial Data](https://mongodb.com/docs/drivers/go/current/fundamentals/geo/#std-label-golang-geo) ← [Use Struct Tags](https://mongodb.com/docs/drivers/go/current/usage-examples/struct-tagging/ \"Previous Section\")[Connection Guide](https://mongodb.com/docs/drivers/go/current/fundamentals/connection/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Usage Examples On this page * [Overview](#overview)\n* [How to Use the Usage Examples](#how-to-use-the-usage-examples) ## Overview Usage examples provide convenient starting points for popular MongoDB operations. Each example provides the following: * A full Go program that you can run in your own environment\n* The expected result after running the program ## How to Use the Usage Examples These examples use the [sample datasets](https://www.mongodb.com/docs/atlas/sample-data/) provided by Atlas. You can load them into your database on the free tier of MongoDB Atlas by following the [Get Started with Atlas Guide](https://www.mongodb.com/docs/atlas/getting-started/#atlas-getting-started) or you can[import the sample dataset into a local MongoDB instance.](https://www.mongodb.com/docs/guides/server/import/) Once you import the dataset, you can copy and paste a usage example into your development environment of choice. You can follow the[Quick Start](https://mongodb.com/docs/drivers/go/current/quick-start/#std-label-golang-quickstart) to learn more about getting started with the MongoDB Go Driver. ### Connection String Follow the [\"Connect to your Cluster\"](https://mongodb.com/docs/drivers/go/current/quick-start/#std-label-golang-connect-to-your-cluster)step to find the[connection string](https://www.mongodb.com/docs/manual/reference/connection-string/) to define your`MONGODB_URI` environment variable to run the usage examples. If your instance uses [SCRAM authentication](https://www.mongodb.com/docs/manual/core/security-scram/), you can replace `<user>` with your username, `<password>` with your password, and `<cluster-url>` with the URL or IP address of your instance. To learn more about connecting to your MongoDB instance, see [Connection Guide.](https://mongodb.com/docs/drivers/go/current/fundamentals/connection/#std-label-golang-connection-guide) ### Environment Variable To connect the example to your MongoDB instance, you must [define an environment variable](#std-label-golang-usage-examples-env-variable) with your connection string. `| uri := os.Getenv(\"MONGODB_URI\") |\n| ------------------------------- | ` You can use [GoDotEnv](https://github.com/joho/godotenv) to define your environment variable. Add the following application configuration in your `.env` file at the root of your project. To learn more, see the[GoDotEnv documentation.](https://github.com/joho/godotenv#usage) ``` MONGODB_URI=mongodb+srv://<user>:<password>@<cluster-url>?retryWrites=true&w=majority \n``` ## Note Replace the preceding connection string with [your MongoDB deployment's connection string.](#std-label-golang-usage-examples-connection-string) ← [Quick Reference](https://mongodb.com/docs/drivers/go/current/quick-reference/ \"Previous Section\")[Find Operations](https://mongodb.com/docs/drivers/go/current/usage-examples/find-operations/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/quick-start/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Quick Start On this page * [Set up Your Project](#set-up-your-project)\n* [Initialize with Go Mod](#initialize-with-go-mod)\n* [Add MongoDB as a Dependency](#add-mongodb-as-a-dependency)\n* [Add Other Dependencies](#add-other-dependencies)\n* [Create a MongoDB Cluster](#create-a-mongodb-cluster)\n* [Set up a Free Tier Cluster in Atlas](#set-up-a-free-tier-cluster-in-atlas)\n* [Query Your MongoDB Cluster from Your Application](#query-your-mongodb-cluster-from-your-application)\n* [Next steps](#next-steps) This guide shows you how to create an application that uses the **Go driver**to connect to a **MongoDB Atlas cluster**. If you prefer to connect to MongoDB using a different driver or programming language, see our[list of official MongoDB drivers.](https://www.mongodb.com/docs/drivers/) The Go driver lets you connect to and communicate with MongoDB clusters from a Go application. MongoDB Atlas is a fully-managed cloud database service that hosts your data on MongoDB clusters. In this guide, we show you how to get started with your own free (no credit card required) cluster. Follow the steps below to connect your Go application with a MongoDB Atlas cluster. ## Set up Your Project ### Initialize with Go Mod Create a new directory and initialize your project with `go mod`. `| mkdir go-quickstart       |\n| ------------------------- |\n| cd go-quickstart          |\n| go mod init go-quickstart | ` ### Add MongoDB as a Dependency Use `go get` to add the Go driver as a dependency. ```shell go get go.mongodb.org/mongo-driver/mongo \n``` ### Add Other Dependencies Use `go get` to add any additional dependencies. This Quick Start uses the `godotenv` package to read a MongoDB connection string from an environment variable to avoid embedding credentials within source code. ```shell go get github.com/joho/godotenv \n``` ## Create a MongoDB Cluster ### Set up a Free Tier Cluster in Atlas After setting up your Go project dependencies, create a MongoDB cluster where you can store and manage your data. Complete the[Get Started with Atlas](https://www.mongodb.com/docs/atlas/getting-started/) guide to set up a new Atlas account, free tier MongoDB cluster, load datasets, and interact with the data. After completing the steps in the Atlas guide, you should have a new MongoDB cluster deployed in Atlas, a new database user, and[sample datasets loaded](https://www.mongodb.com/docs/atlas/sample-data/) into your cluster. #### Connect to your Cluster In this step, you create and run an application that uses the Go driver to connect to your MongoDB cluster and run a query on the sample data. You pass instructions to the driver on where and how to connect to your MongoDB cluster in a string called the _connection string_. This string includes information on the hostname or IP address and port of your cluster, authentication mechanism, user credentials when applicable, and other connection options. To retrieve your connection string for the cluster and user you created in the previous step, log into your Atlas account and navigate to theDatabase section and click the Connect button for the cluster that you want to connect to as shown below. ![Atlas Connection GUI cluster selection screen](https://mongodb.com/docs/drivers/go/current/includes/figures/atlas_connection_select_cluster.png) Proceed to the Connect Your Application step and select the Go driver. Then, click the Copy button to copy the _connection string_to your clipboard as shown below. ![Atlas Connection GUI connection string screen](https://mongodb.com/docs/drivers/go/current/includes/figures/atlas_connection_copy_string_go.png) Save your Atlas connection string in a safe location that you can access for the next step. To learn more about conencting to the Go driver through Atlas, see the [Atlas driver connection guide](https://www.mongodb.com/docs/atlas/driver-connection/)and select **Go** from the _Select your language_ dropdown.\n\n Next, create a file to contain your application called `main.go`in the base directory of your project. Use the following sample code to run a query on your sample dataset in MongoDB Atlas. Set the value of the `uri` variable with your MongoDB Atlas connection string, or create an environmental variable with the name `MONGODB_URI`with your Atlas connection string. ```bash export MONGODB_URI='<your atlas connection string>' \n``` ## Note Make sure to replace the \"<password>\" section of the connection string with the password you created for your user that has **atlasAdmin** permissions. ```go package main import ( \t\"context\" \t\"encoding/json\" \t\"fmt\" \t\"log\" \t\"os\" \t\"github.com/joho/godotenv\" \t\"go.mongodb.org/mongo-driver/bson\" \t\"go.mongodb.org/mongo-driver/mongo\" \t\"go.mongodb.org/mongo-driver/mongo/options\" ) func main() { \tif err := godotenv.Load(); err != nil { \t\tlog.Println(\"No .env file found\") \t} \turi := os.Getenv(\"MONGODB_URI\") \tif uri == \"\" { \t\tlog.Fatal(\"You must set your 'MONGODB_URI' environmental variable. See\\n\\t https://www.mongodb.com/docs/drivers/go/current/usage-examples/#environment-variable\") \t} \tclient, err := mongo.Connect(context.TODO(), options.Client().ApplyURI(uri)) \tif err != nil { \t\tpanic(err) \t} \tdefer func() { \t\tif err := client.Disconnect(context.TODO()); err != nil { \t\t\tpanic(err) \t\t} \t}() \tcoll := client.Database(\"sample_mflix\").Collection(\"movies\") \ttitle := \"Back to the Future\" \tvar result bson.M \terr = coll.FindOne(context.TODO(), bson.D{{\"title\", title}}).Decode(&result) \tif err == mongo.ErrNoDocuments { \t\tfmt.Printf(\"No document was found with the title %s\\n\", title) \t\treturn \t} \tif err != nil { \t\tpanic(err) \t} \tjsonData, err := json.MarshalIndent(result, \"\", \"    \") \tif err != nil { \t\tpanic(err) \t} \tfmt.Printf(\"%s\\n\", jsonData) } \n``` Run the sample code with the following command from your command line: ```bash go run main.go \n``` When you run `main.go`, it should output the details of the movie from the sample dataset which looks something like the following: ``` {     \"_id\": \"573a1398f29313caabce9682\",     ...     \"title\": \"Back to the Future\",     ... } \n``` If you receive no output or an error, check whether you properly set up your environment variable and whether you loaded the sample dataset in your MongoDB Atlas cluster. ## Tip If your output is empty, ensure you have loaded the[sample datasets](https://www.mongodb.com/docs/atlas/sample-data/) into your cluster. After completing this step, you should have a working application that uses the Go driver to connect to your MongoDB cluster, run a query on the sample data, and print out the result. ## Next steps Learn how to read and modify data using the Go driver in our Fundamentals CRUD guide or how to perform common operations from our[Usage Examples.](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) ← [MongoDB Go Driver](https://mongodb.com/docs/drivers/go/current/ \"Previous Section\")[Quick Reference](https://mongodb.com/docs/drivers/go/current/quick-reference/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/issues-and-help/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Issues & Help We are lucky to have a vibrant MongoDB Go community that includes users with varying levels of experience using the Go driver. We find the quickest way to get support for general questions is through the [MongoDB Community Forums](https://community.mongodb.com). To learn more, refer to our [support channels](http://www.mongodb.org/about/support). ## Bugs / Feature Requests If you think you've found a bug or want to see a new feature in the Go driver, please open a case in our issue management tool, JIRA: * [Create an account and login](https://jira.mongodb.org).\n* Navigate to [the GODRIVER project](https://jira.mongodb.org/browse/GODRIVER).\n* Click **Create Issue**. Please provide as much information as possible about the issue and the steps to reproduce it. Bug reports in JIRA for the Go driver and the Core Server (i.e. SERVER) project are **public**. If you’ve identified a security vulnerability in a driver or any other MongoDB project, please report it according to the instructions found in the[Create a Vulnerability Report page.](https://www.mongodb.com/docs/manual/tutorial/create-a-vulnerability-report/) ## Pull Requests We are happy to accept contributions to help improve the driver. We will guide user contributions to ensure they meet the standards of the codebase. Please ensure that any pull requests include documentation, tests, and pass the**gradle** checks. To get started check out the source and work on a branch: `| $ git clone https://github.com/mongodb/mongo-go-driver.git |\n| ---------------------------------------------------------- |\n| $ cd mongo-go-driver                                       |\n| $ git checkout -b myNewFeature                             | ` Finally, follow the [Testing/Development guidelines](https://github.com/mongodb/mongo-go-driver#testing--development) to ensure your code passes any newly added and existing tests. ← [FAQ](https://mongodb.com/docs/drivers/go/current/faq/ \"Previous Section\")[Compatibility](https://mongodb.com/docs/drivers/go/current/compatibility/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # MongoDB Go Driver ## Introduction Welcome to the documentation site for the official MongoDB Go Driver. You can add the driver to your application to work with MongoDB in Go. Download it using [go get](https://pkg.go.dev/cmd/go/internal/get)or set up a runnable project by following our Quick Start guide. ## Quick Start Learn how to establish a connection to MongoDB Atlas and begin working with data in the [Quick Start](https://mongodb.com/docs/drivers/go/current/quick-start/#std-label-golang-quickstart) section. ## Quick Reference See driver syntax examples for common MongoDB commands in the[Quick Reference](https://mongodb.com/docs/drivers/go/current/quick-reference/#std-label-golang-quick-reference) section. ## Usage Examples For fully runnable code snippets and explanations for common methods, see [Usage Examples.](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) ## Fundamentals Learn how to perform the following tasks using the Go driver in the Fundamentals section: * [Connect to MongoDB](https://mongodb.com/docs/drivers/go/current/fundamentals/connection/#std-label-golang-connection-guide)\n* [Connect to MongoDB Atlas from AWS Lambda](https://www.mongodb.com/docs/atlas/manage-connections-aws-lambda/)\n* [Specify an API Version](https://mongodb.com/docs/drivers/go/current/fundamentals/stable-api/#std-label-golang-stable-api)\n* [How the Driver Uses Context](https://mongodb.com/docs/drivers/go/current/fundamentals/context/#std-label-golang-context)\n* [Authenticate with MongoDB](https://mongodb.com/docs/drivers/go/current/fundamentals/auth/#std-label-golang-authentication-mechanisms)\n* [Use Enterprise Authentication with MongoDB](https://mongodb.com/docs/drivers/go/current/fundamentals/enterprise-auth/#std-label-golang-enterprise-authentication-mechanisms)\n* [Work with BSON](https://mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-bson)\n* [Read from and Write to MongoDB](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/#std-label-golang-crud)\n* [Perform Aggregations](https://mongodb.com/docs/drivers/go/current/fundamentals/aggregation/#std-label-golang-aggregation)\n* [Construct Indexes](https://mongodb.com/docs/drivers/go/current/fundamentals/indexes/#std-label-golang-indexes)\n* [Specify Collations to Order Results](https://mongodb.com/docs/drivers/go/current/fundamentals/collations/#std-label-golang-collations)\n* [Use Driver Events in Your Code](https://mongodb.com/docs/drivers/go/current/fundamentals/monitoring/#std-label-golang-monitoring)\n* [Store and Retrieve Files in MongoDB](https://mongodb.com/docs/drivers/go/current/fundamentals/gridfs/#std-label-golang-gridfs)\n* [Use a Time Series Collection](https://mongodb.com/docs/drivers/go/current/fundamentals/time-series/#std-label-golang-time-series)\n* [Encrypt Fields](https://mongodb.com/docs/drivers/go/current/fundamentals/encrypt-fields/#std-label-golang-fle)\n* [Work with Geospatial Data](https://mongodb.com/docs/drivers/go/current/fundamentals/geo/#std-label-golang-geo) ## API For detailed information about types and methods in the MongoDB Go driver, see the [MongoDB Go Driver API documentation.](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo) ## Issues & Help Learn how to report bugs, contribute to the driver, and find additional resources for asking questions in the [Issues & Help](https://mongodb.com/docs/drivers/go/current/issues-and-help/#std-label-golang-issues-and-help) section. ## Compatibility\n\n ## Learn Visit the Developer Hub and MongoDB University to learn more about the MongoDB Go Driver. ### Developer Hub The Developer Hub provides tutorials and social engagement for developers. To learn how to use MongoDB features with the Go driver, see the [How To's and Articles page.](https://www.mongodb.com/developer/learn/?content=Articles&text=go#main) To ask questions and engage in discussions with fellow developers using the Go Driver, see the [forums page.](https://www.mongodb.com/community/forums/tag/golang) [Quick Start](https://mongodb.com/docs/drivers/go/current/quick-start/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/whats-new/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # What's New On this page * [What's New in 1.11](#what-s-new-in-1.11)\n* [What's New in 1.10](#what-s-new-in-1.10)\n* [What's New in 1.9](#what-s-new-in-1.9)\n* [What's New in 1.8](#what-s-new-in-1.8)\n* [What's New in 1.7](#what-s-new-in-1.7)\n* [What's New in 1.6](#what-s-new-in-1.6)\n* [What's New in 1.5](#what-s-new-in-1.5)\n* [What's New in 1.4](#what-s-new-in-1.4)\n* [What's New in 1.3](#what-s-new-in-1.3)\n* [What's New in 1.2](#what-s-new-in-1.2)\n* [What's New in 1.1](#what-s-new-in-1.1)\n* [What's New in 1.0](#what-s-new-in-1.0) Learn what's new in: * [Version 1.11](#std-label-version-1.11)\n* [Version 1.10](#std-label-version-1.10)\n* [Version 1.9](#std-label-version-1.9)\n* [Version 1.8](#std-label-version-1.8)\n* [Version 1.7](#std-label-version-1.7)\n* [Version 1.6](#std-label-version-1.6)\n* [Version 1.5](#std-label-version-1.5)\n* [Version 1.4](#std-label-version-1.4)\n* [Version 1.3](#std-label-version-1.3)\n* [Version 1.2](#std-label-version-1.2)\n* [Version 1.1](#std-label-version-1.1)\n* [Version 1.0](#std-label-version-1.0) ## What's New in 1.11 ## Important ### Upgrade to Version 1.11.2 or Higher The 1.11.2 Go driver contains the following bug fixes: * The `bson.Raw.String()` method outputs the correct Extended JSON type for timestamps when the BSON document contains a UTC Timestamp field.\n* Resolved conflicts when retrying reads with read concern `\"available\"`or `\"linearizable\"`. New features of the 1.11 Go driver release include: * Removal of support for MongoDB versions 3.5 and older.\n* Removal of support for Go versions 1.12 and older.\n* Improvements to `Timeout` API and behavior, including:  \n   * Modified retry logic for greater application resiliency.  \n   * Extended `mongo.IsTimeout` error helper to catch more timeout errors.  \n   * New GridFS methods that take contexts instead of using `SetReadDeadline`and `SetWriteDeadline`.\n* Reduced memory allocations during operation execution.\n* Fix for SRV polling bug that prevented changes in SRV records when the associated MongoDB connection string included a username and password.\n* Support for GCP service accounts when using Google Cloud Key Management Services.\n* Improvements to server-side resource cleanup when using the `Cursor.All` and`Session.WithTransaction` functions.\n* `SERVICE_HOST` Kerberos authentication parameter specification enabled with the `authMechanismProperties` connection string option. ## What's New in 1.10 ## Important ### Upgrade to Version 1.10.1 or Higher\n\n New features of the 1.10 Go driver release include: * Full compatibility with MongoDB 6.0.\n* Support for new features related to [Queryable Encryption](https://www.mongodb.com/docs/manual/core/queryable-encryption/#std-label-qe-manual-feature-qe), including new options for automatic and manual encryption.\n* Support for the new Automatic Encryption Shared Library, which replaces the`mongocryptd` process. The shared library requires MongoDB v6.0 Enterprise or later and `libmongocrypt` 1.5.0 or later.\n* [clustered index](https://mongodb.com/docs/drivers/go/current/fundamentals/indexes/#std-label-golang-clustered-indexes) creation support.\n* A new API and `ClientEncryption` entity operations for encryption key management.\n* A `Timeout` client option to set default context timeouts for each operation sent through that client.\n* A patch to default data to either `primitive.M` or `primitive.D` when decoding empty types.\n* Support for encoding atypical map key types for data that can be unmarshalled into a textual representation of itself.\n* Performance optimizations, including:  \n   * Improved full document requests for before and after updates in change stream events.  \n   * Improved PRN and UUID generation.  \n   * Reduced memory consumption when compressing wire messages.\n* Troubleshooting support for [frequently encountered issues.](https://github.com/mongodb/mongo-go-driver/blob/master/docs/common-issues.md) ## What's New in 1.9 New features of the 1.9 Go driver release include: * Improved connection storm mitigation.\n* `Custom` options to change-stream and aggregate operations.\n* `Let` option on most CRUD commands that specifies parameters for use in an aggregate expression. `Let` must be a document that maps parameter names to values that are constant or closed expressions without references to document fields. MongoDB v5.0 or later is required.\n* New constructor functions that create `Cursor` and `SingleResult`instances from marshalable and non-nil BSON documents. ## What's New in 1.8 New features of the 1.8 Go driver release include: * Full compatibility with MongoDB 5.1.\n* Support for KMIP as a KMS provider for CSFLE.\n* Redesigned driver connection pool for low operation `Context` timeouts and to reduce connection churn. Behavior changes include:  \n   * New connection creation times out at `connectTimeoutMS`.  \n   * At most, two new connections can be established at the same time.\n* Removal of oppressive and unncessarily gendered language in the Go driver documentation, code, tests, and spec tests. ## What's New in 1.7 ## Important ### Upgrade to Version 1.7.2 or Higher The 1.7.2 Go driver contains a bug fix for a data race that can occur between creating and checking out connections when `minPoolSize > 0`. New features of the 1.7 Go driver release include: * Full compatibility with MongoDB 5.0.\n* Support for the [\"snapshot\"](https://www.mongodb.com/docs/manual/reference/read-concern-snapshot/#mongodb-readconcern-readconcern.-snapshot-) read concern outside of multi-document transactions for certain read operations.\n* Improved `WriteException` and `BulkWriteException` error messages for schema validation via the `WriteError.Details` field. ## What's New in 1.6 ## Important ### Upgrade to Version 1.6.2 or Higher The 1.6.2 Go driver contains a bug fix for a data race that can occur between creating and checking out connections when `minPoolSize > 0`. New features of the 1.6 Go driver release include: * Support for the MongoDB Stable API. For more information, see the[Stable API Guide.](https://mongodb.com/docs/drivers/go/current/fundamentals/stable-api/#std-label-golang-stable-api)\n* Support for connections to any MongoDB service that runs behind a load balancer.\n* Support for creating time series collections. For more information, see the [Time Series Collections Guide.](https://mongodb.com/docs/drivers/go/current/fundamentals/time-series/#std-label-golang-time-series)\n* `Let` option for aggregate expressions.\n\n New features of the 1.5 Go driver release include: * Support for Azure and GCP key-management services with Client-side Field Level Encryption.\n* New errors API to detect duplicate-key errors, timeouts, and network errors.\n* Server monitoring to monitor changes on a MongoDB deployment.\n* Errors to prevent unexpected behavior on maps that contain multiple keys being used as a hint option, as a sort option, or for index creation. ## What's New in 1.4 New features of the 1.4 Go driver release include: * Full compatibility with MongoDB 4.4.\n* Support for stapled and non-stapled OCSP verification.\n* New `tlsDisableOCSPEndpointCheck=true` URI option to disable sending HTTP requests if the OCSP responder is not reachable from the driver and there is no stapled response.\n* Additional context to errors encountered during BSON unmarshalling.\n* Proper `Unwrap` functions for various driver error types. ## What's New in 1.3 New features of the 1.3 Go driver release include: * `mgocompat` package that exports a BSON registry compatible with`globalsign/mgo/bson`, which can be used via the`ClientOptions.SetRegistry` method.\n* `RegisterTypeEncoder` and `RegisterHookEncoder` methods, which replace the deprecated `RegisterEncoder` method. A corresponding change has been made to replace `RegisterDecoder`. ## What's New in 1.2 New features of the 1.2 Go driver release include: * Support for CSFLE.\n* `bson.MarshalValue` function, which marshals Go types to BSON.\n* `StringCodec`, which allows non-string fields to be decoded into a String field in a struct.\n* `IntCodec`, `UIntCodec`, `BoolCodec`, and `FloatCodec` added to`mgocompat` to allow codecs to convert between numbers and booleans. ## What's New in 1.1 New features of the 1.1 Go driver release include: * Full compatibility with MongoDB 4.2.\n* Redesigned lower-level driver implementation to improve maintainability and performance.\n* Connection Monitoring and Pooling specifications to monitor various connection and connection pool events with improved utilization. ## What's New in 1.0 This release adds no new features. ← [Compatibility](https://mongodb.com/docs/drivers/go/current/compatibility/ \"Previous Section\")",
  "https://www.mongodb.com/docs/drivers/go/current/upgrade/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) [MongoDB Go Driver](https://mongodb.com/docs/drivers/go/current/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/faq/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # FAQ On this page * [How Can I Fix the \"WriteNull can only write while positioned on a Element or Value but is positioned on a TopLevel\" Error?](#how-can-i-fix-the--writenull-can-only-write-while-positioned-on-a-element-or-value-but-is-positioned-on-a-toplevel--error-)\n* [How Do I Convert a BSON Document to JSON?](#how-do-i-convert-a-bson-document-to-json-)\n* [Why Did the Driver Throw an \"Authentication failed\" Error?](#why-did-the-driver-throw-an--authentication-failed--error-) This page contains frequently asked questions and their corresponding answers. ## Tip If you can't find an answer to your problem on this page, see the [Issues & Help](https://mongodb.com/docs/drivers/go/current/issues-and-help/#std-label-golang-issues-and-help) page for next steps and more resources. ## How Can I Fix the \"WriteNull can only write while positioned on a Element or Value but is positioned on a TopLevel\" Error? The `bson.Marshal()` method requires a parameter that can be decoded into a BSON document, such as the `bson.D` type. This error occurs when you pass something _other_ than a BSON document to`bson.Marshal()`. The `WriteNull` error occurs when you pass a `null` to`bson.Marshal()`. Situations in which a similar error can occur include the following: * You pass a string to `bson.Marshal()`, causing a `WriteString` error.\n* You pass a boolean to `bson.Marshal()`, causing a `WriteBoolean` error.\n* You pass an integer to `bson.Marshal()`, causing a `WriteInt32` error. You may encounter this error when you perform a CRUD operation that internally uses the `bson.Marshal()` method or when you call`bson.Marshal()` directly to encode data. The following code produces a `WriteNull` error because the driver cannot encode the `null` valued `sortOrder` variable to BSON during the `FindOneAndUpdate()` operation: `| var sortOrder bson.D                                                            |\n| ------------------------------------------------------------------------------- |\n| opts := options.FindOneAndUpdate().SetSort(sortOrder)                           |\n| updateDocument := bson.D{{\"$inc\", bson.D{{\"counter\", 1}}}}                      |\n| result := coll.FindOneAndUpdate(context.TODO(), bson.D{}, updateDocument, opts) |\n| if err := result.Err(); err != nil {                                            |\n| panic(err)                                                                      |\n| }                                                                               | ` The following code shows how to correctly initialize the `sortOrder`variable as a `bson.D` type so that the driver can convert it to BSON: ```go sortOrder := bson.D{}\n\n ## How Do I Convert a BSON Document to JSON? The driver provides a variety of marshaller methods that can be used to convert a BSON document to JSON, such as the `MarshalExtJSON()`method. To view a readable form of the JSON encoding, you must use an unmarshaller method or string type-casting to parse the JSON byte format. The following code converts a BSON document to JSON using the`MarshalExtJSON()` method, then parses and prints the JSON byte array using string type-casting: ```go bsonDocument := bson.D{{\"hello\", \"world\"}} jsonBytes, err := bson.MarshalExtJSON(bsonDocument, true, false) if err != nil {     panic(err) } fmt.Println(string(jsonBytes)) \n``` VIEW OUTPUT To learn more about conversions between BSON and Go types, see the[Work with BSON](https://mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-bson) guide. ## Why Did the Driver Throw an \"Authentication failed\" Error? If you attempt to connect to a MongoDB deployment using incorrect username and password credentials or specifying the wrong authentication mechanism, you receive an \"Authentication failed\" error message. For example, the following error message is returned when you pass invalid credentials when authenticating with `SCRAM-SHA-256`: ``` connection() error occurred during connection handshake: auth error: sasl conversation error: unable to authenticate using mechanism \"SCRAM-SHA-256\": (AuthenticationFailed) Authentication failed. \n``` This error message does not contain the detailed authentication failure reason for security reasons. Common causes for authentication failure include the following: * Incorrect password\n* Incorrect username\n* Incorrect authentication mechanism specified in your connection string or `Credential` struct To avoid this error, ensure that your credentials and authentication mechanism are correct. You can store your authentication credentials in environment variables or you can pass them to the `SetAuth()` method. To learn more about authentication, see the[Authentication Mechanisms](https://mongodb.com/docs/drivers/go/current/fundamentals/auth/#std-label-golang-authentication-mechanisms) guide. ← [Work with Geospatial Data](https://mongodb.com/docs/drivers/go/current/fundamentals/geo/ \"Previous Section\")[Issues & Help](https://mongodb.com/docs/drivers/go/current/issues-and-help/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/compatibility/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Compatibility On this page * [MongoDB Compatibility](#mongodb-compatibility)\n* [Compatibility Table Legend](#compatibility-table-legend)\n* [Language Compatibility](#language-compatibility) ## MongoDB Compatibility The following compatibility table specifies the recommended version of the MongoDB Go Driver for use with a specific version of MongoDB. The first column lists the driver version. ### Compatibility Table Legend | Icon    | Explanation                                                                                            |\n| ------- | ------------------------------------------------------------------------------------------------------ |\n| ✓       | All features are supported.                                                                            |\n| ⊛       | The Driver version will work with the MongoDB version, but not all new MongoDB features are supported. |\n| No mark | The Driver version is not tested with the MongoDB version.                                             |\n\n | \\[[1](#ref-go-1.6-driver-support-id1)\\] | The 1.6 driver does not support snapshot reads on secondaries. For more information, see the [MongoDB Server version 5.0 release notes.](https://www.mongodb.com/docs/v5.0/release-notes/5.0/#snapshots) |\n| --------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ## Language Compatibility The following compatibility table specifies the minimum version of the Go programming language to use with versions of the MongoDB Go Driver. The first column lists the driver version. | Go Driver Version | Minimum Go Language Version |\n| ----------------- | --------------------------- |\n| 1.11              | 1.13                        |\n| 1.10              | 1.10                        |\n| 1.9               | 1.10                        |\n| 1.8               | 1.10                        |\n| 1.7               | 1.10                        |\n| 1.6               | 1.10                        |\n| 1.5               | 1.10                        |\n| 1.4               | 1.10                        |\n| 1.3               | 1.10                        |\n| 1.2               | 1.10                        |\n| 1.1               | 1.10                        |\n| 1.0               | 1.10                        | For more information on how to read the compatibility tables, see our guide on[MongoDB Compatibility Tables.](https://www.mongodb.com/docs/drivers/about-compatibility/#std-label-about-driver-compatibility) ← [Issues & Help](https://mongodb.com/docs/drivers/go/current/issues-and-help/ \"Previous Section\")[What's New](https://mongodb.com/docs/drivers/go/current/whats-new/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/find-operations/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Find Operations * [Find a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/findOne/#std-label-golang-find-one)\n* [Find Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/find/#std-label-golang-find-multiple) ← [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/ \"Previous Section\")[Find a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/findOne/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/deleteMany/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Delete Multiple Documents You can delete multiple documents in a collection by using the`DeleteMany()` method. ## Example ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. The following example matches documents in the `movies` collection in which the `runtime` is greater than 800 minutes, deleting all documents matched: `| coll := client.Database(\"sample_mflix\").Collection(\"movies\") |\n| ------------------------------------------------------------ |\n| filter := bson.D{{\"runtime\", bson.D{{\"$gt\", 800}}}}          |\n| results, err := coll.DeleteMany(context.TODO(), filter)      |\n| if err != nil {                                              |\n| panic(err)                                                   |\n| }                                                            | ` View a [fully runnable example.](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/usage-examples/code-snippets/deleteMany.go) ## Expected Result After you run the full example, it removes the following documents in the `movies` collection: ``` // results truncated { \"_id\": ObjectId(\"573a1397f29313caabce69db\"), ... , \"runtime\": 1256, ... }, { \"_id\": ObjectId(\"573a1397f29313caabce75fe\"), ... , \"runtime\": 910, ... }, { \"_id\": ObjectId(\"573a1399f29313caabcee1aa\"), ... , \"runtime\": 1140, ... }, { \"_id\": ObjectId(\"573a13a6f29313caabd18ae0\"), ... , \"runtime\": 877, ... } \n``` For an example on how to find multiple documents, see [Find Multiple Documents.](https://mongodb.com/docs/drivers/go/current/usage-examples/find/#std-label-golang-find-multiple) ## Additional Information To learn more about deleting documents, see [Delete a Document.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/delete/#std-label-golang-delete-guide) ### API Documentation [DeleteMany()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.DeleteMany) ← [Delete a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/deleteOne/ \"Previous Section\")[Perform Bulk Operations](https://mongodb.com/docs/drivers/go/current/usage-examples/bulkWrite/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/findOne/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Find a Document You can retrieve a single document from a collection by using the`FindOne()` method. ## Example ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. This example uses the following `Restaurant` struct as a model for documents in the `restaurants` collection: `` | type Restaurant struct {                     |\n| -------------------------------------------- |\n| ID           primitive.ObjectID `bson:\"_id\"` |\n| Name         string                          |\n| RestaurantId string `bson:\"restaurant_id\"`   |\n| Cuisine      string                          |\n| Address      interface{}                     |\n| Borough      string                          |\n| Grades       []interface{}                   |\n| }                                            |  `` The following example matches documents in the `restaurants` collection in which the `name` is \"Bagels N Buns\", returning the first document matched: ```go coll := client.Database(\"sample_restaurants\").Collection(\"restaurants\") filter := bson.D{{\"name\", \"Bagels N Buns\"}} var result Restaurant err = coll.FindOne(context.TODO(), filter).Decode(&result) if err != nil { \tif err == mongo.ErrNoDocuments { \t\t// This error means your query did not match any documents. \t\treturn \t} \tpanic(err) } \n``` View a [fully runnable example](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/usage-examples/code-snippets/findOne.go) ## Expected Result Running the full example prints the following document, which is stored in the`result` variable as a `Restaurant` struct: ``` // results truncated {    \"ID\": \"5eb3d668b31de5d588f42950\",    \"Name\": \"Bagels N Buns\",    \"RestaurantId\": \"40363427\"    \"Address\": [...],    \"Borough\": \"Staten Island\",    \"Cuisine\": \"Delicatessen\",    \"Grades\": [...] } \n``` ## Additional Information To learn more about specifying query filters and handling potential errors, see[Retrieve Data.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/#std-label-golang-retrieve) To learn more about query operators, see the [MongoDB query operator reference documentation.](https://www.mongodb.com/docs/manual/reference/operator/query/) ### API Documentation [FindOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.FindOne) ← [Find Operations](https://mongodb.com/docs/drivers/go/current/usage-examples/find-operations/ \"Previous Section\")[Find Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/find/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/count/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Count Documents You can get an approximation on the number of documents in a collection by using the `EstimatedDocumentCount()` method and an exact number of documents in a collection by using the `CountDocuments()`method. ## Example ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. The following example performs the following on the `movies`collection: * Approximates the number of documents in the collection\n* Counts the number of documents in which the `countries` contains \"China\" `| coll := client.Database(\"sample_mflix\").Collection(\"movies\")         |\n| -------------------------------------------------------------------- |\n| filter := bson.D{{\"countries\", \"China\"}}                             |\n| estCount, estCountErr := coll.EstimatedDocumentCount(context.TODO()) |\n| if estCountErr != nil {                                              |\n| panic(estCountErr)                                                   |\n| }                                                                    |\n| count, err := coll.CountDocuments(context.TODO(), filter)            |\n| if err != nil {                                                      |\n| panic(err)                                                           |\n| }                                                                    | ` View a [fully runnable example](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/usage-examples/code-snippets/count.go) ## Expected Result After you run the full example, you should see the following: * There are about `23541` documents in the `movies` collection\n* There are `303` documents in the `movies` collection that contain \"China\" in the `countries` field ## Note The exact number of documents may vary depending on your data set. ## Additional Information To learn more about counting documents, see[Count Documents.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/count/#std-label-golang-count-documents) ### API Documentation * [CountDocuments()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.CountDocuments)\n* [EstimatedDocumentCount()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.EstimatedDocumentCount)\n\n",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/insertMany/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Insert Multiple Documents You can insert multiple documents into a collection by using the `InsertMany()`method. ## Example ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. This example uses the following `Restaurant` struct as a model for documents in the `restaurants` collection: `` | type Restaurant struct {                                    |\n| ----------------------------------------------------------- |\n| Name         string                                         |\n| RestaurantId string        `bson:\"restaurant_id,omitempty\"` |\n| Cuisine      string        `bson:\"cuisine,omitempty\"`       |\n| Address      interface{}   `bson:\"address,omitempty\"`       |\n| Borough      string        `bson:\"borough,omitempty\"`       |\n| Grades       []interface{} `bson:\"grades,omitempty\"`        |\n| }                                                           |  `` The `omitempty` [struct tag](https://mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-struct-tags) omits the corresponding field from the inserted document when left empty. The following example inserts two new documents to the `restaurants`collection: ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. ```go coll := client.Database(\"sample_restaurants\").Collection(\"restaurants\") newRestaurants := []interface{}{ \tRestaurant{Name: \"Rule of Thirds\", Cuisine: \"Japanese\"}, \tRestaurant{Name: \"Madame Vo\", Cuisine: \"Vietnamese\"}, } result, err := coll.InsertMany(context.TODO(), newRestaurants) if err != nil { \tpanic(err) } \n``` View a [fully runnable example](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/usage-examples/code-snippets/insertMany.go) ## Expected Result After you run the full example, you can find the following inserted documents in the `restaurants` collection: ```   { \"_id\": ObjectID(\"...\"), \"name\": \"Rule of Thirds\", \"cuisine\": \"Japanese\"},   { \"_id\": ObjectID(\"...\"), \"name\": \"Madame Vo\", \"cuisine\": \"Vietnamese\"} \n``` For an example on how to find multiple documents, see the[Find Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/find/#std-label-golang-find-multiple) usage example. ## Additional Information To learn more about inserting documents, see[inserting documents.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/insert/#std-label-golang-insert-guide) ### API Documentation [InsertMany()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.InsertMany) ← [Insert a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/insertOne/ \"Previous Section\")[Update a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/updateOne/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/replaceOne/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Replace a Document You can replace a document in a collection by using the `ReplaceOne()`method. ## Example ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. This example uses the following `Restaurant` struct as a model for documents in the `restaurants` collection: `` | type Restaurant struct {                                    |\n| ----------------------------------------------------------- |\n| Name         string                                         |\n| RestaurantId string        `bson:\"restaurant_id,omitempty\"` |\n| Cuisine      string        `bson:\"cuisine,omitempty\"`       |\n| Address      interface{}   `bson:\"address,omitempty\"`       |\n| Borough      string        `bson:\"borough,omitempty\"`       |\n| Grades       []interface{} `bson:\"grades,omitempty\"`        |\n| }                                                           |  `` The `omitempty` [struct tag](https://mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-struct-tags) omits the corresponding field from the inserted document when left empty. This example performs the following actions on the `restaurants`collection: * Matches a document in which the `name` is \"Madame Vo\"\n* Replaces the matched document with a new document ```go coll := client.Database(\"sample_restaurants\").Collection(\"restaurants\") filter := bson.D{{\"name\", \"Madame Vo\"}} replacement := Restaurant{Name: \"Monsieur Vo\", Cuisine: \"Asian Fusion\"} result, err := coll.ReplaceOne(context.TODO(), filter, replacement) if err != nil { \tpanic(err) } \n``` View a [fully runnable example](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/usage-examples/code-snippets/replace.go) ## Expected Result After you run the full example, you can find the following replaced document in the `restaurants` collection: ``` {    \"_id\" : ObjectId(\"...\"),    \"name\" : \"Monsieur Vo\",    \"cuisine\" : \"Asian Fusion\" } \n``` For an example on how to find a document, see the [Find a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/findOne/#std-label-golang-find-one) usage example. ## Additional Information To learn more about replacing documents, specifying query filters, and handling potential errors, see [Change a Document.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/change-a-document/#std-label-golang-change-document) ### API Documentation [ReplaceOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.ReplaceOne) ← [Update Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/updateMany/ \"Previous Section\")[Delete a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/deleteOne/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/struct-tagging/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Use Struct Tags You can specify the way that the Go Driver converts Go structs to [BSON](https://www.mongodb.com/docs/manual/reference/bson-types/) by using struct tags. ## Example ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. The following code declares a struct of type `BlogPost`. This struct contains a struct tag that maps the `WordCount` field to the BSON field name `word_count`. By default, the driver marshals the other fields as the lowercase of the struct field name: `` | type BlogPost struct {              |\n| ----------------------------------- |\n| Title       string                  |\n| Author      string                  |\n| WordCount   int `bson:\"word_count\"` |\n| LastUpdated time.Time               |\n| Tags        []string                |\n| }                                   |  `` The following example creates a `BlogPost` instance and inserts it into the `posts` collection. During the insert operation, the driver interprets the struct tag to marshal the `WordCount`struct field as `word_count`: ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. ```go coll := client.Database(\"sample_training\").Collection(\"posts\") post := BlogPost{ \tTitle:       \"Annuals vs. Perennials?\", \tAuthor:      \"Sam Lee\", \tWordCount:   682, \tLastUpdated: time.Now(), \tTags:        []string{\"seasons\", \"gardening\", \"flower\"}, } _, err = coll.InsertOne(context.TODO(), post) if err != nil { \tpanic(err) } \n``` View a [fully runnable example.](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/usage-examples/code-snippets/struct-tag.go) ## Expected Result After you run the full example, you can find the following document in the `posts` collection: ``` {     \"_id\" : ObjectId(\"...\"),     \"title\" : \"Annuals vs. Perennials?\",     \"author\" : \"Sam Lee\",     \"word_count\" : 682,     \"lastupdated\": ...,     \"tags\" : [\"seasons\", \"gardening\", \"flower\"] } \n``` For an example on how to find a document, see [Find a Document.](https://mongodb.com/docs/drivers/go/current/usage-examples/findOne/#std-label-golang-find-one) ## Additional Information To learn more about using struct tags, converting to/from BSON, and handling potential errors, see [working with BSON.](https://mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-bson) ### API Documentation * [Structs and Struct Tags](https://pkg.go.dev/go.mongodb.org/mongo-driver/bson#hdr-Structs)\n* [InsertOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver/mongo#Collection.InsertOne)\n* [FindOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver/mongo#Collection.FindOne)\n\n",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/bulkWrite/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Perform Bulk Operations You can perform bulk write operations on a collection by using the`BulkWrite()` method. ## Example ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. This example uses the following `Restaurant` struct as a model for documents in the `restaurants` collection: `` | type Restaurant struct {                                    |\n| ----------------------------------------------------------- |\n| Name         string                                         |\n| RestaurantId string        `bson:\"restaurant_id,omitempty\"` |\n| Cuisine      string        `bson:\"cuisine,omitempty\"`       |\n| Address      interface{}   `bson:\"address,omitempty\"`       |\n| Borough      string        `bson:\"borough,omitempty\"`       |\n| Grades       []interface{} `bson:\"grades,omitempty\"`        |\n| }                                                           |  `` The `omitempty` [struct tag](https://mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-struct-tags) omits the corresponding field from the inserted document when left empty. The following example performs the following in order on the `restaurants`collection: * Matches a document in which the `name` is \"Cafe Tomato\" and replaces it with a new document\n* Matches a document in which the `name` is \"Cafe Zucchini\" and updates the value to \"Zucchini Land\" ```go coll := client.Database(\"sample_restaurants\").Collection(\"restaurants\") models := []mongo.WriteModel{ \tmongo.NewReplaceOneModel().SetFilter(bson.D{{\"name\", \"Cafe Tomato\"}}). \t\tSetReplacement(Restaurant{Name: \"Cafe Zucchini\", Cuisine: \"French\"}), \tmongo.NewUpdateOneModel().SetFilter(bson.D{{\"name\", \"Cafe Zucchini\"}}). \t\tSetUpdate(bson.D{{\"$set\", bson.D{{\"name\", \"Zucchini Land\"}}}}), } opts := options.BulkWrite().SetOrdered(true) results, err := coll.BulkWrite(context.TODO(), models, opts) \n``` View a [fully runnable example](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/usage-examples/code-snippets/bulk.go) ## Expected Result After you run the full example, you can find the following document in the `restaurants` collection: ``` {   \"_id\": ObjectId(\"...\"),   \"name\": \"Zucchini Land\",   \"cuisine\": \"French\" } \n``` For an example on how to find a document, see [Find a Document.](https://mongodb.com/docs/drivers/go/current/usage-examples/findOne/#std-label-golang-find-one) ## Additional Information To learn more about performing bulk write operations on a collection and handling potential errors, see [Bulk Operations.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/bulk/#std-label-golang-bulk) ### API Documentation\n\n ← [Delete Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/deleteMany/ \"Previous Section\")[Watch for Changes](https://mongodb.com/docs/drivers/go/current/usage-examples/watch/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/updateOne/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Update a Document You can update a document in a collection by using the `UpdateOne()`method. ## Example ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. The following example performs the following on the `restaurants`collection: * Matches a document with a specific `_id`\n* Creates a new field in the matched document called `avg_rating` with a value of 4.4 `| coll := client.Database(\"sample_restaurants\").Collection(\"restaurants\") |\n| ----------------------------------------------------------------------- |\n| id, _ := primitive.ObjectIDFromHex(\"5eb3d668b31de5d588f42a7a\")          |\n| filter := bson.D{{\"_id\", id}}                                           |\n| update := bson.D{{\"$set\", bson.D{{\"avg_rating\", 4.4}}}}                 |\n| result, err := coll.UpdateOne(context.TODO(), filter, update)           |\n| if err != nil {                                                         |\n| panic(err)                                                              |\n| }                                                                       | ` View a [fully runnable example.](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/usage-examples/code-snippets/updateOne.go) ## Expected Result After you run the full example, you can find the following updated document in the `restaurants` collection: ``` // result truncated {    \"_id\" : ObjectId(\"5eb3d668b31de5d588f42a7a\"),    ...    \"name\" : \"Green House Cafe\",    \"restaurant_id\" : \"40372112\",    \"avg_rating\" : 4.4 } \n``` For an example on how to find a document, see [Find a Document.](https://mongodb.com/docs/drivers/go/current/usage-examples/findOne/#std-label-golang-find-one) ## Additional Information To learn more about replacing documents, specifying query filters, and handling potential errors, see [Change a Document.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/change-a-document/#std-label-golang-change-document) To learn more about update operators, see the [MongoDB update operator reference documentation.](https://www.mongodb.com/docs/manual/reference/operator/update/#update-operators) ### API Documentation [UpdateOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.UpdateOne) ← [Insert Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/insertMany/ \"Previous Section\")[Update Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/updateMany/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/command/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Run a Command You can run commands directly on your MongoDB server by using the`RunCommand()` method. ## Example ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. The following example retrieves statistics about the`sample_restaurants` database: `| db := client.Database(\"sample_restaurants\")                   |\n| ------------------------------------------------------------- |\n| command := bson.D{{\"dbStats\", 1}}                             |\n| var result bson.M                                             |\n| err := db.RunCommand(context.TODO(), command).Decode(&result) |\n| if err != nil {                                               |\n| panic(err)                                                    |\n| }                                                             | ` View a [fully runnable example](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/usage-examples/code-snippets/command.go) ## Expected Result After you run the full example, it returns a `SingleResult` type that contains the following values: ``` // results truncated {     \"avgObjSize\": 548.4101901854896,     \"collections\": 2,     \"dataSize\": 14014074,     \"db\": \"sample_restaurants\",     \"indexSize\": 286720,     ..., } \n``` ## Note The `result` variable may vary depending on the contents of your collection. ## Additional Information ### API Documentation [RunCommand()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Database.RunCommand) ← [Retrieve Distinct Values of a Field](https://mongodb.com/docs/drivers/go/current/usage-examples/distinct/ \"Previous Section\")[Use Struct Tags](https://mongodb.com/docs/drivers/go/current/usage-examples/struct-tagging/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/watch/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Watch for Changes You can open a change stream on a `MongoCollection`,`MongoDatabase`, or `MongoClient` by using the `Watch()` method. ## Example ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. The following example opens a change stream on the `restaurants` collection and prints inserted documents:\n\n ` View a [fully runnable example.](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/usage-examples/code-snippets/watch.go) ## Expected Result After you run the full example, run the [Insert a Document usage example](https://mongodb.com/docs/drivers/go/current/usage-examples/insertOne/#std-label-golang-insert-one) in a different shell. Once you run the insert operation, you should see the following output: ``` // results truncated {   \"_id\": ...,   \"name\": \"8282\",   \"cuisine\": \"Korean\" } \n``` ## Important Make sure to shut down this usage example once you finish by closing your terminal. ## Additional Information To learn more about opening a change stream and handling potential errors, see: * Fundamentals page on [change streams](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/watch/#std-label-golang-watch-changes)\n* MongoDB Server Manual [Change Streams Documentation](https://www.mongodb.com/docs/manual/changeStreams/) ### API Documentation [Watch()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.Watch) ← [Perform Bulk Operations](https://mongodb.com/docs/drivers/go/current/usage-examples/bulkWrite/ \"Previous Section\")[Count Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/count/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/insertOne/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Insert a Document You can insert a document into a collection by using the `InsertOne()`method. ## Example ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. This example uses the following `Restaurant` struct as a model for documents in the `restaurants` collection: `` | type Restaurant struct {                                    |\n| ----------------------------------------------------------- |\n| Name         string                                         |\n| RestaurantId string        `bson:\"restaurant_id,omitempty\"` |\n| Cuisine      string        `bson:\"cuisine,omitempty\"`       |\n| Address      interface{}   `bson:\"address,omitempty\"`       |\n| Borough      string        `bson:\"borough,omitempty\"`       |\n| Grades       []interface{} `bson:\"grades,omitempty\"`        |\n| }                                                           |  `` The `omitempty` [struct tag](https://mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-struct-tags) omits the corresponding field from the inserted document when left empty. The following example inserts a new document to the `restaurants` collection: ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. ```go coll := client.Database(\"sample_restaurants\").Collection(\"restaurants\") newRestaurant := Restaurant{Name: \"8282\", Cuisine: \"Korean\"} result, err := coll.InsertOne(context.TODO(), newRestaurant) if err != nil { \tpanic(err) } \n``` View a [fully runnable example](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/usage-examples/code-snippets/insertOne.go) ## Expected Result After you run the full example, you can find the following inserted document in the `restaurants` collection: ``` {   \"_id\": ObjectId(\"...\"),   \"name\": \"8282\",   \"cuisine\": \"Korean\" } \n``` For an example on how to find a document, see the [Find a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/findOne/#std-label-golang-find-one) usage example. ## Additional Information To learn more about inserting documents, see[inserting documents.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/insert/#std-label-golang-insert-guide) ### API Documentation [InsertOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.InsertOne) ← [Write Operations](https://mongodb.com/docs/drivers/go/current/usage-examples/write-operations/ \"Previous Section\")[Insert Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/insertMany/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/quick-reference/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Quick Reference This page shows the driver syntax for several MongoDB commands and links to their related reference and API documentation.\n\n ← [Quick Start](https://mongodb.com/docs/drivers/go/current/quick-start/ \"Previous Section\")[Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/find/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Find Multiple Documents You can find multiple documents in a collection by using the `Find()`method. ## Example ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. This example uses the following `Restaurant` struct as a model for documents in the `restaurants` collection: `` | type Restaurant struct {                     |\n| -------------------------------------------- |\n| ID           primitive.ObjectID `bson:\"_id\"` |\n| Name         string                          |\n| RestaurantId string `bson:\"restaurant_id\"`   |\n| Cuisine      string                          |\n| Address      interface{}                     |\n| Borough      string                          |\n| Grades       interface{}                     |\n| }                                            |  `` The following example matches documents in the `restaurants` collection in which the `cuisine` is \"Italian\", returning all documents matched: ```go coll := client.Database(\"sample_restaurants\").Collection(\"restaurants\") filter := bson.D{{\"cuisine\", \"Italian\"}} cursor, err := coll.Find(context.TODO(), filter) if err != nil { \tpanic(err) } \n``` View a [fully runnable example](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/usage-examples/code-snippets/find.go) ## Expected Result Running the full example prints the following documents, which are stored in the `results` variable as `Restaurant` structs: ``` // results truncated ... { ... , \"Name\" : \"Epistrophy Cafe\", \"RestaurantId\": \"41117553\", \"Cuisine\" : \"Italian\", ... }, { ... , \"Name\" : \"Remi\", \"RestaurantId\": \"41118090\", \"Cuisine\" : \"Italian\", ... }, { ... , \"Name\" : \"Sant Ambroeus\", \"RestaurantId\": \"41120682\", \"Cuisine\" : \"Italian\", ... }, ... \n``` ## Additional Information To learn more about specifying query filters and handling potential errors, see[Retrieve Data.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/#std-label-golang-retrieve) To learn more about query operators, see the [MongoDB query operator reference documentation.](https://www.mongodb.com/docs/manual/reference/operator/query/) ### API Documentation * [Find()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.Find)\n* [Cursor](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Cursor) ← [Find a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/findOne/ \"Previous Section\")[Write Operations](https://mongodb.com/docs/drivers/go/current/usage-examples/write-operations/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/deleteOne/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Delete a Document You can delete a document in a collection by using the `DeleteOne()`method. ## Example ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. The following example matches documents in the `movies` collection in which the `title` is \"Twilight\", deleting the first document matched: `| coll := client.Database(\"sample_mflix\").Collection(\"movies\") |\n| ------------------------------------------------------------ |\n| filter := bson.D{{\"title\", \"Twilight\"}}                      |\n| result, err := coll.DeleteOne(context.TODO(), filter)        |\n| if err != nil {                                              |\n| panic(err)                                                   |\n| }                                                            | ` View a [fully runnable example.](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/usage-examples/code-snippets/deleteOne.go) ## Expected Result After you run the full example, it removes the following document in the `movies` collection: ``` // result truncated { \"_id\": ObjectId(\"573a13bff29313caabd5e06b\"), ..., \"title\": \"Twilight\", ... } \n``` For an example on how to find a document, see [Find a Document.](https://mongodb.com/docs/drivers/go/current/usage-examples/findOne/#std-label-golang-find-one) ## Additional Information To learn more about deleting documents, see [Delete a Document.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/delete/#std-label-golang-delete-guide) ### API Documentation [DeleteOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.DeleteOne) ← [Replace a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/replaceOne/ \"Previous Section\")[Delete Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/deleteMany/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/updateMany/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Update Multiple Documents You can update multiple documents in a collection by using the `UpdateMany()`method. ## Example ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. The following example performs the following on the`listingsAndReviews` collection: * Matches documents in which the market field of the address subdocument, `address.market` is \"Sydney\"\n* Updates the `price` in the matched documents by 1.15 times `| coll := client.Database(\"sample_airbnb\").Collection(\"listingsAndReviews\") |\n| ------------------------------------------------------------------------- |\n| filter := bson.D{{\"address.market\", \"Sydney\"}}                            |\n| update := bson.D{{\"$mul\", bson.D{{\"price\", 1.15}}}}                       |\n| result, err := coll.UpdateMany(context.TODO(), filter, update)            |\n| if err != nil {                                                           |\n| panic(err)                                                                |\n| }                                                                         | ` View a [fully runnable example.](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/usage-examples/code-snippets/updateMany.go) ## Expected Result After you run the full example, you can find the following updated documents in the `listingsAndReviews` collection: ``` // results truncated ... { \"_id\" : \"10091713\", ... , \"name\" : \"Surry Hills Studio\", ... , \"price\" : 181.00, ... }, { \"_id\" : \"9908871\", ... , \"name\" : \"Family friendly beach house\", ... , \"price\" : 751.00, ... }, { \"_id\" : \"20989061\", ... , \"name\" : \"Big and sunny Narraben room\", ... , \"price\" : 60.00, ... }, ... \n``` For an example on how to find multiple documents, see [Find Multiple Documents.](https://mongodb.com/docs/drivers/go/current/usage-examples/find/#std-label-golang-find-multiple) ## Additional Information To learn more about replacing documents, specifying query filters, and handling potential errors, see [Change a Document.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/change-a-document/#std-label-golang-change-document) To learn more about update operators, see the [MongoDB update operator reference documentation.](https://www.mongodb.com/docs/manual/reference/operator/update/#update-operators) ### API Documentation [UpdateMany()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.UpdateMany) ← [Update a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/updateOne/ \"Previous Section\")[Replace a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/replaceOne/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/write-operations/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Write Operations * [Insert a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/insertOne/#std-label-golang-insert-one)\n* [Insert Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/insertMany/#std-label-golang-insert-many)\n* [Update a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/updateOne/#std-label-golang-update-one)\n* [Update Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/updateMany/#std-label-golang-update-many)\n* [Replace a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/replaceOne/#std-label-golang-replace)\n* [Delete a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/deleteOne/#std-label-golang-delete-one)\n* [Delete Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/deleteMany/#std-label-golang-delete-many) ← [Find Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/find/ \"Previous Section\")[Insert a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/insertOne/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/usage-examples/distinct/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Retrieve Distinct Values of a Field You can retrieve a list of distinct values for a field across a collection by using the `Distinct()` method. ## Example ## Tip Read the [Usage Examples](https://mongodb.com/docs/drivers/go/current/usage-examples/#std-label-golang-usage-examples) to learn how to run this example. The following example performs the following on the `movies`collection: * Matches documents in which the `directors` contains \"Natalie Portman\"\n* Returns distinct values of the `title` from the matched documents `| coll := client.Database(\"sample_mflix\").Collection(\"movies\")   |\n| -------------------------------------------------------------- |\n| filter := bson.D{{\"directors\", \"Natalie Portman\"}}             |\n| results, err := coll.Distinct(context.TODO(), \"title\", filter) |\n| if err != nil {                                                |\n| panic(err)                                                     |\n| }                                                              | ` View a [fully runnable example](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/usage-examples/code-snippets/distinct.go) ## Expected Result After you run the full example, it returns an empty slice of an`interface` type that contains the following values: ```  A Tale of Love and Darkness  New York, I Love You \n``` ## Additional Information To learn more about retrieving distinct values, see [Retrieve Distinct Values.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/distinct/#std-label-golang-retrieve-distinct) ### API Documentation [Distinct()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.Distinct) ← [Count Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/count/ \"Previous Section\")[Run a Command](https://mongodb.com/docs/drivers/go/current/usage-examples/command/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # CRUD Operations CRUD (Create, Read, Update, Delete) operations enable you to work with data stored in MongoDB. * [Read Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/#std-label-golang-crud-read-operations) find and return documents stored in your database.\n* [Write Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/#std-label-golang-crud-write-operations) insert, modify, or delete documents in your database. Some operations combine aspects of read and write operations. To learn more about these hybrid methods, see [Compound Operations.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/compound-operations/#std-label-golang-compound-operations) To run a raw database operation, see [Run a Command.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/run-command/#std-label-golang-run-command) To learn about how to modify the way your CRUD operations execute, see [Modify Execution of CRUD Operations.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-read-pref/#std-label-golang-write-read-pref) ← [Work with BSON](https://mongodb.com/docs/drivers/go/current/fundamentals/bson/ \"Previous Section\")[Read Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/logging/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Logging Logging. [MongoDB Go Driver](https://mongodb.com/docs/drivers/go/current/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/context/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Context On this page * [Overview](#overview)\n* [Expiration](#expiration)\n* [Server Selection](#server-selection)\n* [Connection Checkout](#connection-checkout)\n* [Connection Establishment](#connection-establishment)\n* [Socket Read and Write](#socket-read-and-write) ## Overview The MongoDB Go Driver uses the [context package](https://pkg.go.dev/context) from Go's standard library to allow applications to signal timeouts and cancellations for any **blocking method**call. A blocking method relies on an external event, such as a network input or output, to proceed with its task. An example of a blocking method in the Go Driver is the `Insert()`method. If you want to perform an insert operation on a `Collection`within 10 seconds, you can use a Context with a timeout. If the operation doesn't complete within the timeout, the method returns an error. `| client := mongo.Connect(context.TODO())                                         |\n| ------------------------------------------------------------------------------- |\n| ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)        |\n| defer cancel()                                                                  |\n| client.Database(\"<db>\").Collection(\"<collection>\").Insert(ctx, bson.D{{\"x\",1}}) | ` If the Context passed into an operation does not have a deadline, you can set a `Timeout` option on your `Client` and the operation will derive the timeout specification from this setting. To learn more about using the single timeout setting, see the [Connection Guide.](https://mongodb.com/docs/drivers/go/current/fundamentals/connection/#std-label-golang-timeout-setting) ## Expiration The driver considers a Context expired when an operation exceeds its timeout or is canceled. The driver checks the Context expiration with the `Done()` method. The following sections describe when and how the driver checks for expiration. ### Server Selection The driver might block a method call if it can't select a server for an operation. In this scenario, the driver loops until it finds a server to use for the operation. After each iteration, the driver returns a server selection timeout error if the Context expired or the selection process took longer than the `serverSelectionTimeoutMS` setting. To learn more about how the driver selects a server, see the[Server Selection Algorithm.](https://www.mongodb.com/docs/manual/core/read-preference-mechanics/#std-label-replica-set-read-preference-behavior) ### Connection Checkout The driver might block a method call if there are no available connections to check out. After selecting a server, the driver tries to check out a connection from the server’s connection pool. If the Context expires while checking out a connection, the method returns a timeout error. ### Connection Establishment The driver might block an method call if it needs to create a new connection. When the driver needs to create a new connection to execute an operation, the Context sets a timeout for the establishment process. The driver sets the timeout to either the Context expiration or connection timeout, whichever is shorter. The following example sets the connection timeout to _1_ second and the Context deadline to _2_ seconds. Because the connection timeout is shorter, the establishment process expires after _1_ second. ```go  opts := options.Client()  opts.SetConnectTimeout(1*time.Second)  client := mongo.Connect(context.TODO(), opts)  ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)  defer cancel()  client.Database(\"<db>\").Collection(\"<collection>\").InsertOne(ctx, bson.D{{\"x\",1}}) \n``` ### Socket Read and Write When the driver retrieves a connection for an operation, it sets the socket’s read or write deadline to either the Context deadline or socket timeout, whichever is shorter.\n\n The driver generates a separate goroutine to listen for Context cancellation when the `Read()` or `Write()` method is in progress. If the goroutine detects a cancellation, it closes the connection. The pending `Read()` or `Write()` method returns an error which the driver overwrites with the `context.Canceled` error. ## Important In versions prior to 1.5.0, the driver doesn't detect the Context cancellation and waits for the `Read()` or `Write()` method to return. ← [Stable API](https://mongodb.com/docs/drivers/go/current/fundamentals/stable-api/ \"Previous Section\")[Authentication Mechanisms](https://mongodb.com/docs/drivers/go/current/fundamentals/auth/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/data-formats/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Data Formats ## Overview Description about Data Formats, provide some guidance on where to find specific info. [MongoDB Go Driver](https://mongodb.com/docs/drivers/go/current/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/encrypt-fields/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Encrypt Fields On this page * [Overview](#overview)\n* [Queryable Encryption](#queryable-encryption)\n* [Client-side Field Level Encryption](#client-side-field-level-encryption) ## Overview You can encrypt fields in a document using a set of features called**in-use encryption**. In-use encryption enables your client applications to encrypt data_before_ sending it to MongoDB, and to query documents with encrypted fields. Because the driver encrypts the data before sending it to MongoDB, only your configured client applications can decrypt the data. Only applications using the driver with access to your encryption keys can access the decrypted, plaintext data. Should you have unauthorized access to your database, an attacker could only see the encrypted, ciphertext data. In-use encryption can help prevent exposure of the following sensitive types of data: * Credit card numbers\n* Addresses\n* Health information\n* Financial information\n* Any other sensitive or personally identifiable information (PII) MongoDB offers the following ways to encrypt fields: ### Queryable Encryption Queryable Encryption is the next-generation in-use encryption feature, introduced in MongoDB 6.0 and available as a public preview. Queryable Encryption supports searching encrypted fields for equality and encrypts each value uniquely. The MongoDB manual contains detailed information on the following Queryable Encryption topics: * To get started, see the [Queryable Encryption Quick Start.](https://www.mongodb.com/docs/manual/core/queryable-encryption/quick-start/#std-label-qe-quick-start)\n* To learn how to use Queryable Encryption, see the [Queryable Encryption Fundamentals.](https://www.mongodb.com/docs/manual/core/queryable-encryption/fundamentals/#std-label-qe-fundamentals)\n* To learn how to integrate your implementation with a Key Management System, see the [Queryable Encryption Tutorials.](https://www.mongodb.com/docs/manual/core/queryable-encryption/tutorials/#std-label-qe-tutorials)\n* To learn Queryable Encryption concepts, see the [Queryable Encryption Reference.](https://www.mongodb.com/docs/manual/core/queryable-encryption/reference/#std-label-qe-reference) ### Client-side Field Level Encryption Client-side Field Level Encryption was introduced in MongoDB version v4.2 and supports searching encrypted fields for equality. CSFLE differs from Queryable Encryption in that it requires that the encrypted fields you want to search must be deterministically encrypted. When you deterministically encrypt a value, the same input value produces the same output value. While deterministic encryption provides greater support for read operations, encrypted data with low [cardinality](https://en.wikipedia.org/wiki/Cardinality)is susceptible to recovery using [frequency analysis.](https://en.wikipedia.org/wiki/Frequency%5Fanalysis) The MongoDB manual contains detailed information on the following CSFLE topics: * To get started, see the [CSFLE Quick Start.](https://www.mongodb.com/docs/manual/core/csfle/quick-start/#std-label-csfle-quick-start)\n* To learn how to use CSFLE, see the [CSFLE Fundamentals.](https://www.mongodb.com/docs/manual/core/csfle/fundamentals/#std-label-csfle-fundamentals)\n* To learn how to integrate your CSFLE implementation with a Key Management System, see the [CSFLE Tutorials.](https://www.mongodb.com/docs/manual/core/csfle/tutorials/#std-label-csfle-tutorials)\n* To learn CSFLE concepts, see the [CSFLE Reference.](https://www.mongodb.com/docs/manual/core/csfle/reference/#std-label-csfle-reference) ← [Time Series Collections](https://mongodb.com/docs/drivers/go/current/fundamentals/time-series/ \"Previous Section\")[Work with Geospatial Data](https://mongodb.com/docs/drivers/go/current/fundamentals/geo/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/enterprise-auth/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Enterprise Authentication Mechanisms On this page * [Overview](#overview)\n* [Authenticate to GSSAPI/Kerberos](#authenticate-to-gssapi-kerberos)\n* [Example](#example)\n* [Set Custom SERVICE\\_NAME and SERVICE\\_REALM Fields](#set-custom-service%5Fname-and-service%5Frealm-fields)\n* [Authenticate to LDAP (PLAIN)](#authenticate-to-ldap--plain-)\n* [Example](#example-1)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to authenticate in MongoDB using the**authentication mechanisms** available in the MongoDB Enterprise Edition. Authentication mechanisms are processes by which the driver and server confirm the identity of a client to ensure security before connecting. You can use the following authentication mechanisms with the latest version of the MongoDB Enterprise Edition: * [GSSAPI/Kerberos](#std-label-golang-kerberos)\n* [LDAP (Plain)](#std-label-golang-LDAP) To authenticate using another mechanism, see the[Authentication Mechanisms](https://mongodb.com/docs/drivers/go/current/fundamentals/auth/#std-label-golang-authentication-mechanisms) fundamentals page. To learn more about establishing a connection to your MongoDB cluster, see the[Connection Guide.](https://mongodb.com/docs/drivers/go/current/fundamentals/connection/#std-label-golang-connection-guide) You can specify your authentication mechanism and credentials when connecting to MongoDB through the following methods: * Using a **connection string URI**. To learn more about using a connection string URI for enterprise authentication, see the [Server manual entry on connection string URIs.](https://www.mongodb.com/docs/manual/reference/connection-string/#authentication-options)\n* Specifying credentials and an authentication mechanism in the`Credential` type. ## Authenticate to GSSAPI/Kerberos The Generic Security Services API (GSSAPI) authentication mechanism allows the user to authenticate to a Kerberos service using the user's principal. You must use the `gssapi` [build tag](https://pkg.go.dev/go/build#hdr-Build%5FConstraints)and specify [cgo support](https://pkg.go.dev/cmd/cgo) during compilation to use Kerberos authentication. `cgo` support is enabled by default unless you previously set environment variables to cross-compile to a different platform. To use the `gssapi` build tag, compile your code with the following command: `| go build -tags gssapi |\n| --------------------- | ` ### Example This example specifies the authentication mechanism using the following placeholders: * `username`: Your Kerberos principal. A sample username is `myuser@KERBEROS.EXAMPLE.COM`.\n* `password`: Your Kerberos user's password. You can also store your password in a `keytab` file to avoid exposing your password in your code.\n* `connection uri`: Your connection string URI. The following code shows how you can define a `Credential` struct to authenticate to Kerberos and create a client with your authentication preferences: ```go credential := options.Credential{         AuthMechanism: \"GSSAPI\",         Username:      \"<username>\",         Password:      \"<password>\",         PasswordSet:   true, } uri := \"<connection uri>\" clientOpts := options.Client().ApplyURI(uri).SetAuth(credential) client, err := mongo.Connect(context.TODO(), clientOpts) \n```\n\n The following command shows how you can invoke a credential cache for a sample username: ```shell kinit myuser@KERBEROS.EXAMPLE.COM \n``` You can alternatively authenticate using a connection string URI, specifying your [URL-encoded](https://en.wikipedia.org/wiki/Percent-encoding) Kerberos principal, password, and `hostname`, the network address of your MongoDB server: ```go uri := \"mongodb://<username>:<password>@<hostname>/?authMechanism=GSSAPI\" \n``` ### Set Custom `SERVICE_NAME` and `SERVICE_REALM` Fields You can specify additional properties with your authentication mechanism using the `AuthMechanismProperties` field in the`Credential` struct. The default service name for Kerberos is \"mongodb\". The following code shows how you can set custom values for the `SERVICE_NAME` and `SERVICE_REALM` fields when defining a`Credential` struct: ```go credential := options.Credential{         AuthMechanism: \"GSSAPI\",         Username:      \"<username>\",         Password:      \"<password>\",         AuthMechanismProperties: map[string]string{                 \"SERVICE_REALM\": \"<Kerberos service realm>\",                 \"SERVICE_NAME\":  \"<service name>\",         }, } \n``` For additional properties, see the[Server manual entry on authentication properties.](https://www.mongodb.com/docs/manual/reference/connection-string/#mongodb-urioption-urioption.authMechanismProperties) ## Authenticate to LDAP (PLAIN) You can authenticate to a Lightweight Directory Access Protocol (LDAP) server using your directory server username and password. ## Warning This authentication mechanism sends the password to the server in plaintext, so you should use this mechanism only with TLS connections. ### Example This example specifies the authentication mechanism using the following placeholders: * `username`: Your LDAP username\n* `password`: Your LDAP password\n* `connection uri`: Your connection string URI The following code shows how you can define a `Credential` struct to authenticate to LDAP and create a client with your authentication preferences: ```go credential := options.Credential{         AuthMechanism: \"PLAIN\",         Username:      \"<username>\",         Password:      \"<password>\",      } uri := \"<connection uri>\" clientOpts := options.Client().ApplyURI(uri).SetAuth(credential) client, err := mongo.Connect(context.TODO(), clientOpts) \n``` You can alternatively authenticate using a connection string URI, specifying your LDAP username, password, and `hostname`, the network address of your MongoDB server: ```go uri := \"mongodb://<username>:<password>@<hostname>/?authMechanism=PLAIN\" \n``` ## Note The method refers to PLAIN instead of LDAP since it authenticates using the PLAIN Simple Authentication and Security Layer (SASL) defined in [RFC-4616.](https://tools.ietf.org/html/rfc4616) ## Additional Information To learn more about the concepts in this guide, see the following documentation: * [MongoDB Server Support for Kerberos Authentication](https://www.mongodb.com/docs/manual/core/kerberos/)\n* [MongoDB Server Support for LDAP Proxy Authentication](https://www.mongodb.com/docs/manual/core/security-ldap/) ### API Documentation * [Credential](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#Credential) type\n* [SetAuth()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#ClientOptions.SetAuth) method\n\n",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/gridfs/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # GridFS On this page * [Overview](#overview)\n* [How GridFS Works](#how-gridfs-works)\n* [Use GridFS](#use-gridfs)\n* [Create a GridFS Bucket](#create-a-gridfs-bucket)\n* [Upload Files](#upload-files)\n* [Retrieve File Information](#retrieve-file-information)\n* [Download Files](#download-files)\n* [Rename Files](#rename-files)\n* [Delete Files](#delete-files)\n* [Delete a GridFS Bucket](#delete-a-gridfs-bucket)\n* [Additional Resources](#additional-resources)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to store and retrieve large files in MongoDB using the **GridFS** specification. GridFS splits large files into chunks and stores each chunk as a separate document. When you query GridFS for a file, the driver will reassemble the chunks as needed. The driver implementation of GridFS is an abstraction that manages the operations and organization of the file storage. Use GridFS if the size of your files exceeds the BSON document size limit of 16 MB. GridFS is also useful for accessing files without loading the entire file into memory. For more detailed information on whether GridFS is suitable for your use case, see the [GridFS server manual page.](https://www.mongodb.com/docs/manual/core/gridfs/) ## How GridFS Works GridFS organizes files in a **bucket**, a group of MongoDB collections that contain the chunks of files and information describing them. The bucket contains the following collections: * The `chunks` collection, which stores the binary file chunks.\n* The `files` collection, which stores the file metadata. When you create a new GridFS bucket, the driver creates the preceding collections. The default bucket name `fs` prefixes the collection names, unless you specify a different bucket name. The driver creates the new GridFS bucket during the first write operation. The driver also creates an index on each collection to ensure efficient retrieval of the files and related metadata. The driver creates indexes if they do not already exist and when the bucket is empty. For more information on GridFS indexes, see the server manual page on [GridFS Indexes.](https://www.mongodb.com/docs/manual/core/gridfs/#gridfs-indexes) When storing files with GridFS, the driver splits the files into smaller chunks, each represented by a separate document in the `chunks` collection. It also creates a document in the `files` collection that contains a file ID, file name, and other file metadata. The following diagram shows how GridFS splits the uploaded files: ![A diagram that shows how GridFS uploads a file to a bucket](https://mongodb.com/docs/drivers/go/current/includes/figures/GridFS-upload.png) When retrieving files, GridFS fetches the metadata from the `files`collection in the specified bucket, then uses that information to reconstruct the file from documents in the `chunks` collection. You can read the file into memory or output it to a stream. ## Use GridFS To learn about GridFS operations and how to perform them, navigate to the following sections: * [Create a GridFS Bucket](#std-label-golang-create-bucket)\n* [Upload Files](#std-label-golang-upload-files)\n* [Retrieve File Information](#std-label-golang-retrieve-info)\n* [Download Files](#std-label-golang-download-files)\n* [Rename Files](#std-label-golang-rename-files)\n* [Delete Files](#std-label-golang-delete-files)\n* [Delete a GridFS Bucket](#std-label-golang-delete-bucket) ### Create a GridFS Bucket To store or retrieve files from GridFS, create a bucket or get a reference to an existing bucket on a MongoDB database. To create a `GridFSBucket` instance, call the `NewBucket()` method with a database parameter:\n\n ` ## Note If a GridFS bucket already exists, the `NewBucket()` method returns a reference to the bucket rather than instantiating a new one. By default, the new bucket is named `fs`. To instantiate a bucket with a custom name, call the `SetName()` method on a `BucketOptions` instance as follows: ```go db := client.Database(\"myDB\") opts := options.GridFSBucket().SetName(\"custom name\") bucket, err := gridfs.NewBucket(db, opts) if err != nil {    panic(err) } \n``` ### Upload Files You can upload a file into a GridFS bucket in one of the following ways: * Use the `UploadFromStream()` method, which reads from an input stream.\n* Use the `OpenUploadStream()` method, which writes to an output stream. For either upload process, you can specify configuration information on an instance of `UploadOptions`. For a full list of `UploadOptions` fields, visit the[API documentation.](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#UploadOptions) #### Upload with an Input Stream To upload a file with an input stream, use the `UploadFromStream()` method with the following parameters: * Your file name\n* An `io.Reader`, with your opened file as a parameter\n* An optional `opts` parameter to modify the behavior of `UploadFromStream()` The following code example reads from a file called `file.txt` and uploads the content to a GridFS bucket. It uses an `opts` parameter to set file metadata: ```go file, err := os.Open(\"path/to/file.txt\") uploadOpts := options.GridFSUpload().SetMetadata(bson.D{{\"metadata tag\", \"first\"}}) objectID, err := bucket.UploadFromStream(\"file.txt\", io.Reader(file),    uploadOpts) if err != nil {    panic(err) } fmt.Printf(\"New file uploaded with ID %s\", objectID) \n``` VIEW OUTPUT ## Note The driver uniquely generates each object ID number. The ID number outputted will resemble the sample output but varies with each file and user. #### Upload with an Output Stream To upload a file with an output stream, use the `OpenUploadStream()` method with the following parameters: * Your file name\n* An optional `opts` parameter to modify the behavior of `OpenUploadStream()` The following code example opens an upload stream on a GridFS bucket and sets the number of bytes in each chunk with an `opts` parameter. Then, it calls the `Write()` method on the content of `file.txt` to write its content to the stream: ```go file, err := os.Open(\"path/to/file.txt\") if err != nil { \tpanic(err) } uploadOpts := options.GridFSUpload().SetChunkSizeBytes(200000) uploadStream, err := bucket.OpenUploadStream(\"file.txt\", uploadOpts) if err != nil { \tpanic(err) } fileContent, err := io.ReadAll(file) if err != nil { \tpanic(err) } var bytes int if bytes, err = uploadStream.Write(fileContent); err != nil { \tpanic(err) } fmt.Printf(\"New file uploaded with %d bytes written\", bytes) \n``` ### Retrieve File Information You can retrieve file metadata stored in the `files` collection of the GridFS bucket. Each document in the `files` collection contains the following information: * The file ID\n* The file length\n* The maximum chunk size\n* The upload date and time\n* The file name\n* A `metadata` document in which you can store any other information To retrieve file data, call the `Find()` method on a `GridFSBucket`instance. You can pass a query filter as an argument to `Find()` to match only certain file documents. ## Note The `Find()` method requires a query filter as a parameter. To match all documents in the `files` collection, pass an empty query filter to `Find()`. The following example retrieves the file name and length of documents in the`files` collection with `length` values greater than `1500`: ```go filter := bson.D{{\"length\", bson.D{{\"$gt\", 1500}}}} cursor, err := bucket.Find(filter) if err != nil {    panic(err) }\n\n    Name   string `bson:\"filename\"`    Length int64  `bson:\"length\"` } var foundFiles []gridfsFile if err = cursor.All(context.TODO(), &foundFiles); err != nil {    panic(err) } for _, file := range foundFiles {    fmt.Printf(\"filename: %s, length: %d\\n\", file.Name, file.Length) } \n``` ### Download Files You can download a GridFS file in one of the following ways: * Use the `DownloadToStream()` method to download a file to an output stream.\n* Use the `OpenDownloadStream()` method to open an input stream. #### Download a File to an Output Stream You can download a file in a GridFS bucket directly to an output stream using the`DownloadToStream()` method. `DownloadToStream()` takes a file ID and an`io.Writer` as parameters. The method downloads the file with the specified file ID and writes to the `io.Writer`. The following example downloads a file and writes to a file buffer: ```go id, err := primitive.ObjectIDFromHex(\"62f7bd54a6e4452da13b3e88\") fileBuffer := bytes.NewBuffer(nil) if _, err := bucket.DownloadToStream(id, fileBuffer); err != nil {    panic(err) } \n``` #### Download a File to an Input Stream You can download a file in a GridFS bucket to memory with an input stream using the `OpenDownloadStream()` method. `OpenDownloadStream()` takes a file ID as a parameter and returns an input stream from which you can read the file. The following example downloads a file into memory and reads its contents: ```go id, err := primitive.ObjectIDFromHex(\"62f7bd54a6e4452da13b3e88\") downloadStream, err := bucket.OpenDownloadStream(id) if err != nil {    panic(err) } fileBytes := make([]byte, 1024) if _, err := downloadStream.Read(fileBytes); err != nil {    panic(err) } \n``` ### Rename Files You can update the name of a GridFS file in your bucket by using the `Rename()`method. Pass a file ID value and a new `filename` value as arguments to`Rename()`. The following example renames a file to `\"mongodbTutorial.zip\"`: ```go id, err := primitive.ObjectIDFromHex(\"62f7bd54a6e4452da13b3e88\") if err := bucket.Rename(id, \"mongodbTutorial.zip\"); err != nil {     panic(err) } \n``` ### Delete Files You can remove a file from your GridFS bucket by using the `Delete()` method. Pass a file ID value as an argument to `Delete()`. The following example deletes a file: ```go id, err := primitive.ObjectIDFromHex(\"62f7bd54a6e4452da13b3e88\") if err := bucket.Delete(id); err != nil {    panic(err) } \n``` ### Delete a GridFS Bucket You can delete a GridFS bucket by using the `Drop()` method. The following code example deletes a GridFS bucket: ```go if err := bucket.Drop(); err != nil {    panic(err) } \n``` ## Additional Resources To learn more about GridFS and its operations, visit the [GridFS manual page.](https://www.mongodb.com/docs/manual/core/gridfs/) ### API Documentation To learn more about the methods or types discussed in this guide, see the following API Documentation:\n\n ← [Monitoring](https://mongodb.com/docs/drivers/go/current/fundamentals/monitoring/ \"Previous Section\")[Time Series Collections](https://mongodb.com/docs/drivers/go/current/fundamentals/time-series/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/stable-api/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Stable API On this page * [Overview](#overview)\n* [Specify an API Version](#specify-an-api-version)\n* [Modify Behavior](#modify-behavior)\n* [Additional Information](#additional-information) ## Note The Stable API feature requires MongoDB Server 5.0 or later. You should only use the Stable API feature if all the MongoDB servers you are connecting to support this feature. ## Overview In this guide, you can learn how to specify **Stable API**compatibility when connecting to a MongoDB instance or replica set. The Stable API feature forces the server to run operations with behaviors compatible with the **API version** you specify. An API version defines the expected behavior of the operations it covers and the format of server responses. The operations and the server responses may differ depending on the API version you specify. When you use the Stable API feature with an official MongoDB driver, you can update your driver or server without worrying about backward compatibility issues of the commands covered by the Stable API. To learn more about the commands the server covers, see[Stable API.](https://www.mongodb.com/docs/manual/reference/stable-api/) ## Specify an API Version The `Client` optionally takes a `ServerAPIOptions` type through the `ClientOptions`. To specify an API version, append the `SetServerAPIOptions()` method with your [server API options](#std-label-golang-stable-api-options) to your`ClientOptions`. After you specify an API version, the `Client` runs operations that are compatible with the API version for the duration of your connection. ## Note The MongoDB Go Driver currently only supports `ServerAPIVersion1`. ### Example The following example instantiates a `Client` that sets the Stable API version and connects to a server.\n\n ` ## Modify Behavior You can further modify the behavior of the stable API feature by appending to the `ServerAPIOptions` type. If you don't specify any options, the driver uses the default values for each option. | Method                 | Description                                                                                                                     |\n| ---------------------- | ------------------------------------------------------------------------------------------------------------------------------- |\n| ServerAPI()            | The API version to use.Default: **ServerAPIVersion1**                                                                           |\n| SetStrict()            | Flag that indicates whether the server should return errors for features that aren't part of the API version.Default: **false** |\n| SetDeprecationErrors() | Flag that indicates whether the server should return errors for deprecated features.Default: **false**                          | ### Example This example specifies for the server to perform the following actions: * Use Version 1 of the API\n* Return errors for features that aren't part of Version 1\n* Return errors for deprecated features ```go // Specify a server URI to connect to uri := \"mongodb://<hostname>:<port>\" // Specify the Stable API version and append options in the ClientOptions object serverAPI := options.ServerAPI(options.ServerAPIVersion1).SetStrict(true).SetDeprecationErrors(true) // Pass in the URI and the ClientOptions to the Client client, err := mongo.Connect(context.TODO(), options.Client().ApplyURI(uri).SetServerAPIOptions(serverAPI)) if err != nil {     panic(err) } \n``` ## Additional Information To learn more about connecting to your MongoDB instance or replica set, see [Connection Guide.](https://mongodb.com/docs/drivers/go/current/fundamentals/connection/#std-label-golang-connection-guide) ### API Documentation For more information on the options in this section, see the following API Documentation: * [Client](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#Client)\n* [ClientOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#ClientOptions)\n* [ServerAPI()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#ServerAPI)\n* [ServerAPIOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#ServerAPIOptions)\n* [ServerApiVersion](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#ServerAPIVersion)\n* [SetDeprecationErrors()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#ServerAPIOptions.SetDeprecationErrors)\n* [SetStrict()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#ServerAPIOptions.SetStrict)\n\n",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/databases-collections/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Databases and Collections ## Overview MongoDB organizes data into a hierachy of the following levels: * databases\n* collections\n* documents Databases are the top level of data organization in a MongoDB instance. Databases are organized into collections which contain **documents**. Documents contain literal data such as strings, numbers, and dates as well as other (embedded) documents. To learn more about document field types and structure, see the server documentation for [documents.](https://www.mongodb.com/docs/manual/core/document/) [MongoDB Go Driver](https://mongodb.com/docs/drivers/go/current/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/indexes/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Indexes On this page * [Overview](#overview)\n* [Query Coverage and Performance](#query-coverage-and-performance)\n* [Operational Considerations](#operational-considerations)\n* [Index Types](#index-types)\n* [Single Field Indexes](#single-field-indexes)\n* [Compound Indexes](#compound-indexes)\n* [Multikey Indexes (Indexes on Array Fields)](#multikey-indexes--indexes-on-array-fields-)\n* [Clustered Indexes](#clustered-indexes)\n* [Text Indexes](#text-indexes)\n* [Geospatial Indexes](#geospatial-indexes)\n* [Unique Indexes](#unique-indexes)\n* [Remove an Index](#remove-an-index)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to use **indexes** in the MongoDB Go Driver. Indexes support the efficient execution of queries in MongoDB. Without indexes, MongoDB scans _every_ document in a collection (a **collection scan**) to find documents that match your query. Collection scans are slow and can negatively affect the performance of your application. With an appropriate index, MongoDB limits the number of documents it inspects. ## Tip You can also use indexes in update operations, delete operations, and[certain aggregation pipeline stages.](https://www.mongodb.com/docs/manual/core/aggregation-pipeline/#pipeline-operators-and-indexes) ### Query Coverage and Performance A query in MongoDB can contain the following elements: | Element    | Necessity    | Purpose                                           |\n| ---------- | ------------ | ------------------------------------------------- |\n| Query      | **Required** | Specify the fields and values you're looking for. |\n| Options    | **Optional** | Specify how the query executes.                   |\n| Projection | **Optional** | Specify the fields that MongoDB should return.    |\n| Sort       | **Optional** | Specify the order MongoDB returns documents.      | When you specify these elements in the same index, MongoDB returns results directly from the index, also called a **covered query**. ## Important ### Sort Criteria Your sort criteria must match or invert the order of the index. Consider an index on the field `name` in ascending order (A-Z) and `age` in descending order (9-0): `| name_1_age_-1 |\n| ------------- | ` MongoDB uses this index when you sort your data by either: * `name` ascending, `age` descending\n* `name` descending, `age` ascending Specifying a sort order of `name` and age ascending or name and `age`descending would require an in-memory sort. To learn how to ensure your index covers your query criteria and projection, see [Query Coverage.](https://www.mongodb.com/docs/manual/core/query-optimization/#covered-query) ### Operational Considerations To improve your query performance, create indexes on fields that appear often in your queries and operations that return sorted results. You should track index memory and disk usage for capacity planning since each index that you add consumes disk space and memory. In addition, when a write operation updates an indexed field, MongoDB also has to update the related index. Since MongoDB supports dynamic schemas, your application can query against fields with currently unknown or arbitrary names. MongoDB 4.2 introduced [wildcard indexes](https://www.mongodb.com/docs/manual/core/index-wildcard/) to help support these queries. Wildcard indexes are not designed to replace workload-based index planning.\n\n ## Index Types MongoDB supports several index types to support querying your data. The following sections describe and show how to create the most common index types. To view a full list of index types, see [Indexes.](https://www.mongodb.com/docs/manual/indexes/) ### Single Field Indexes Single field indexes holds a reference to a field within a collection's documents. This index improves single field queries and sort performance, and supports TLL indexes that automatically remove documents from a collection after a certain amount of time. ## Note The `_id_` index is an example of a single field index. This index is automatically created on the `_id` field when you create a new collection. #### Example The following example creates an index in ascending order on the`title` field in the `sample_mflix.movies` collection: ```go indexModel := mongo.IndexModel{     Keys: bson.D{{\"title\", 1}} } name, err := coll.Indexes().CreateOne(context.TODO(), indexModel) if err != nil {     panic(err) } fmt.Println(\"Name of Index Created: \" + name) \n``` VIEW OUTPUT ### Compound Indexes Compound indexes hold a reference to multiple fields within a collection's documents. This index improves query and sort performance. #### Example The following example creates a compound index on the `fullplot` and`title` fields in the `sample_mflix.movies` collection: ```go indexModel := mongo.IndexModel{     Keys: bson.D{         {\"fullplot\", -1},         {\"title\", 1}     } } name, err := coll.Indexes().CreateOne(context.TODO(), indexModel) if err != nil {     panic(err) } fmt.Println(\"Name of Index Created: \" + name) \n``` VIEW OUTPUT ### Multikey Indexes (Indexes on Array Fields) Multikey indexes use the same syntax as a[single field index](#std-label-golang-single-field-index) and a[compound index](#std-label-golang-compound-index). This index improves the performance of queries that specify an array field as an index. #### Example The following example creates a multikey index on the `cast`field in the `sample_mflix.movies` collection: ```go indexModel := mongo.IndexModel{     Keys: bson.D{{\"cast\", -1}} } name, err := coll.Indexes().CreateOne(context.TODO(), indexModel) if err != nil {     panic(err) } fmt.Println(\"Name of Index Created: \" + name) \n``` VIEW OUTPUT ### Clustered Indexes Clustered indexes improve the performance of insert, update, and delete operations on **clustered collections**. Clustered collections store documents ordered by the clustered index key value. To create a clustered index, specify the clustered index option with the`_id` field as the key and the unique field as `true` when you create your collection. #### Example The following example creates a clustered index on the `_id` field in the `tea.vendors` collection: ```go db := client.Database(\"tea\") cio := bson.D{{\"key\", bson.D{{\"_id\", 1}}}, {\"unique\", true}} opts := options.CreateCollection().SetClusteredIndex(cio) db.CreateCollection(context.TODO(), \"vendors\", opts) \n``` ### Text Indexes Text indexes support text search queries on string content. This index requires a string field or an array of strings. MongoDB supports text search for several languages. You can specify the default language as an option when creating the index. A collection can only contain one text index. If you want to create a text index for multiple text fields, you need to create a [compound index](#std-label-golang-compound-index). The text search runs on all the text fields within the compound index. ## Tip Text indexes differ from the more powerful[Atlas full text search indexes](https://www.mongodb.com/docs/atlas/atlas-search/). Atlas users should use Atlas search. #### Example\n\n ```go indexModel := mongo.IndexModel{Keys: bson.D{{\"title\", 1}}} name, err := coll.Indexes().CreateOne(context.TODO(), indexModel) if err != nil {     panic(err) } fmt.Println(\"Name of Index Created: \" + name) \n``` VIEW OUTPUT ### Geospatial Indexes MongoDB supports queries containing geospatial coordinate data by using**2dsphere indexes**. A `2dsphere` index must be in a GeoJSON objects field. This index allows you to perfrom the following: * Query geospatial data for inclusion, intersection, and proximity.\n* Calculation of distances on a Euclidean plane and for working with the \"legacy coordinate pairs\" syntax used in MongoDB 2.2 and earlier. #### Example The `location.geo` field in a document from the`sample_mflix.theaters` collection is a GeoJSON Point object that describes the coordinates of the theater: ```javascript {    \"_id\" : ObjectId(\"59a47286cfa9a3a73e51e75c\"),    \"theaterId\" : 104,    \"location\" : {       \"address\" : {          \"street1\" : \"5000 W 147th St\",          \"city\" : \"Hawthorne\",          \"state\" : \"CA\",          \"zipcode\" : \"90250\"       },       \"geo\" : {          \"type\" : \"Point\",          \"coordinates\" : [             -118.36559,             33.897167          ]       }    } } \n``` The following example creates a `2dsphere` index on the `location.geo` field: ## Important Attempting to create a geospatial index on a field that is covered by a geospatial index results in an error. ```go indexModel := mongo.IndexModel{     Keys: bson.D{{\"location.geo\", \"2dsphere\"}} } name, err := coll.Indexes().CreateOne(context.TODO(), indexModel) if err != nil {     panic(err) } fmt.Println(\"Name of Index Created: \" + name) \n``` VIEW OUTPUT ### Unique Indexes Unique indexes ensure that the indexed fields do not store duplicate values. By default, MongoDB creates a unique index on the `_id` field during the creation of a collection. To create a unique index, specify the field or combination of fields that you want to prevent duplication on and set the `unique` option to`true`. #### Example The following example creates a unique, descending index on the `theaterId` field: ```go indexModel := mongo.IndexModel{     Keys: bson.D{{\"theaterId\", -1}},     Options: options.Index().SetUnique(true), } name, err := coll.Indexes().CreateOne(context.TODO(), indexModel) if err != nil {     panic(err) } fmt.Println(\"Name of Index Created: \" + name) \n``` VIEW OUTPUT ## Remove an Index You can remove any unused index except the default unique index on the`_id` field. To removve an index, pass the name of your index to the`DropOne()` method. The following example removes an ascending index on the `title` field in the `sample_mflix.movies` collection: ```go res, err := coll.Indexes().DropOne(context.TODO(), \"title_1\") if err != nil {     panic(err) } fmt.Println(res) \n``` VIEW OUTPUT ## Additional Information To learn more about the indexes mentioned, see the following guides:\n\n To learn more about the operations mentioned, see the following guides: * [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document)\n* [Change a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/change-a-document/#std-label-golang-change-document)\n* [Delete a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/delete/#std-label-golang-delete-guide) ### API Documentation To learn more about any of the methods discussed in this guide, see the following API Documentation: * [IndexModel](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#IndexModel)\n* [CreateOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#IndexView.CreateOne)\n* [IndexOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#IndexOptions)\n* [SetDefaultLanguage()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#IndexOptions.SetDefaultLanguage)\n* [DropOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#IndexView.DropOne)\n* [CreateCollection()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Database.CreateCollection)\n* [CreateCollectionOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#CreateCollectionOptions) ← [Aggregation](https://mongodb.com/docs/drivers/go/current/fundamentals/aggregation/ \"Previous Section\")[Transactions](https://mongodb.com/docs/drivers/go/current/fundamentals/transactions/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/geo/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Work with Geospatial Data On this page * [Overview](#overview)\n* [Store Geospatial Data](#store-geospatial-data)\n* [GeoJSON](#geojson)\n* [Legacy Coordinate Pairs](#legacy-coordinate-pairs)\n* [Geospatial Indexes](#geospatial-indexes)\n* [2dsphere](#2dsphere)\n* [2d](#2d)\n* [Geospatial Queries](#geospatial-queries)\n* [Query Operators](#query-operators)\n* [Examples](#examples)\n* [Query by Proximity](#query-by-proximity)\n* [Query Within a Range](#query-within-a-range)\n* [Additional Resources](#additional-resources) ## Overview In this guide, you can learn how to work with **geospatial data**; data formats, indexes, and queries. Geospatial data represents a geographic location on the surface of the Earth, or data on a Euclidean plane. Examples of geospatial data include: * Locations of movie theaters\n* Borders of countries\n* Routes of bicycle rides\n* Dog exercise areas in New York City\n* Points on a graph ## Store Geospatial Data All geospatial data in MongoDB is stored in one of the following formats: * GeoJSON, a format that represents geospatial data on an earth-like sphere.\n* Legacy Coordinate Pair, a format that represents geospatial data on a Euclidean plane. ### GeoJSON Use GeoJSON to store data that represents geospatial information on an earth-like sphere. GeoJSON is composed of one or more **positions**and a **type**. #### Positions A position represents a single place on Earth and exists in code as an array containing the following values: * Longitude in the first position (required)\n* Latitude in the second position (required)\n* Elevation in the third position (optional) The following is the **position** of the MongoDB Headquarters in New York City, NY. `| []float64{-73.986805, 40.7620853} |\n| --------------------------------- | ` ## Important ### Longitude then Latitude GeoJSON orders coordinates as **longitude** first and **latitude** second. This may be surprising as geographic coordinate system conventions generally list latitude first and longitude second. Make sure to check what format any other tools you are working with use. Popular tools such as OpenStreetMap and Google Maps list coordinates as latitude first and longitude second. #### Types Your GeoJSON object's type determines the geometric shape it represents. Geometric shapes are made up of positions. Here are some common GeoJSON types and how you can specify them with positions:\n\n To learn more about the GeoJSON types you can use in MongoDB, see the[GeoJSON manual entry.](https://www.mongodb.com/docs/manual/reference/geojson/) For definitive information on GeoJSON, see the[official IETF specification.](https://datatracker.ietf.org/doc/html/rfc7946) ### Legacy Coordinate Pairs Use legacy coordinate pairs to store data that represents geospatial information on a two-dimensional Euclidean plane. Your field should contain an array of two values in which the first represents the `x` axis value and the second represents the `y` axis value. ``` bson.D{{\"center\", []int16{0, 0}}} \n``` For more information on legacy coordinate pairs, see the[MongoDB server manual page on legacy coordinate pairs.](https://www.mongodb.com/docs/manual/geospatial-queries/#legacy-coordinate-pairs) ## Geospatial Indexes To enable querying for geosptial data, you must first create a supporting index. The following index types that enable geospatial queries: * `2dsphere` for GeoJSON data\n* `2d` for legacy coordinate pairs ### 2dsphere To query data stored in the GeoJSON format, add the field containing both the `type` and `coordinates` to a `2dsphere` index. The following snippet creates a `2dsphere` index on the `location` field: ```go indexModel := mongo.IndexModel{     Keys:    bson.D{{\"location\", \"2dsphere\"}}, } name, err := coll.Indexes().CreateOne(context.TODO(), indexModel) if err != nil {     panic(err) } \n``` ### 2d To query data stored as legacy coordinate pairs, you must add the field containing legacy coordinate pairs to a `2d` index. The following snippet creates a`2d` index on the `coordinates` field: ```go indexModel := mongo.IndexModel{     Keys:    bson.D{{\"location.coordinates\", \"2d\"}}, } name, err := coll.Indexes().CreateOne(context.TODO(), indexModel) if err != nil {     panic(err) } \n``` ## Geospatial Queries To perform a geospatial query, create a query filter with a field name and a geospatial query operator. You can specify additional options for certain geospatial query operators to limit the documents returned. If you have not done so, you must [create a geospatial index](#std-label-golang-geospatial-indexes)to enable geospatial queries. ## Tip ### Supported Operators Spherical (`2dsphere`) and flat (`2d`) indexes support some, but not all, of the same query operators. For a full list of operators and their index compatibility, see the[manual entry for geospatial queries.](https://www.mongodb.com/docs/manual/geospatial-queries/#geospatial-query-operators) ### Query Operators To query your geospatial data, use one of the following query operators: * `$near`\n* `$geoWithin`\n* `$nearSphere`\n* `$geoIntersects` _requires a 2dsphere index_ When using the `$near` operator, you can specify the following distance operators: * `$minDistance`\n* `$maxDistance` When using the `$geoWithin` operator, you can specify the following shape operators: * `$box`\n* `$polygon`\n* `$center`\n* `$centerSphere` For more information on geospatial query operators, see the[manual entry for geospatial queries.](https://www.mongodb.com/docs/manual/geospatial-queries/#geospatial-query-operators) ## Examples The following examples use the MongoDB Atlas sample dataset. You can load sample datasets into your database on the free tier of MongoDB Atlas by following the [Get Started with Atlas Guide](https://www.mongodb.com/docs/atlas/getting-started/#atlas-getting-started) or you can [import the sample dataset into a local MongoDB instance.](https://www.mongodb.com/docs/guides/server/import/)\n\n ### Query by Proximity The following example queries for documents with a `location.geo` field within 1000 meters of the MongoDB Headquarters in New York City, NY. It returns documents from nearest to farthest. ```go mongoDBHQ := bson.D{{\"type\", \"Point\"}, {\"coordinates\", []float64{-73.986805, 40.7620853}}} filter := bson.D{     {\"location.geo\", bson.D{         {\"$near\", bson.D{             {\"$geometry\", mongoDBHQ},             {\"$maxDistance\", 1000},         }},     }}, } var places []bson.D output, err := coll.Find(context.TODO(), filter) if err = output.All(context.TODO(), &places); err != nil {     panic(err) } fmt.Println(places) \n``` HIDE OUTPUT `| [                                                                                                                            |\n| ---------------------------------------------------------------------------------------------------------------------------- |\n| [{_id ObjectID(...)} {theaterId 1908} {location [{address [...]} {geo [{type Point} {coordinates [-73.983487 40.76078]}]}]}] |\n| [{_id ObjectID(...)} {theaterId 1448} {location [{address [...]} {geo [{type Point} {coordinates [-73.982094 40.76988]}]}]}] |\n| ]                                                                                                                            | ` ### Query Within a Range The following example queries for documents with a `location.geo` field no closer than 2000 meters and no farther than 3000 meters of the MongoDB Headquarters in New York City, NY. It returns documents from nearest to farthest. ```go mongoDBHQ := bson.D{{\"type\", \"Point\"}, {\"coordinates\", []float64{-73.986805, 40.7620853}}} filter := bson.D{     {\"location.geo\",          bson.D{              {\"$nearSphere\", bson.D{                  {\"$geometry\", MongoDBHQ},                  {\"$minDistance\", 2000},                  {\"$maxDistance\", 3000},           }},     }}, } var places bson.D err := coll.Find(context.TODO(), filter).Decode(&places) if err != nil {     panic(err) } fmt.Println(places) \n``` HIDE OUTPUT ``` [[{_id ObjectID(...)} {theaterId 482} {location [...]} {geo [{type Point} {coordinates [-73.99295 40.74194]}]}]}]] \n``` ## Additional Resources\n\n ← [Encrypt Fields](https://mongodb.com/docs/drivers/go/current/fundamentals/encrypt-fields/ \"Previous Section\")[FAQ](https://mongodb.com/docs/drivers/go/current/faq/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/auth/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Authentication Mechanisms On this page * [Overview](#overview)\n* [Supported Mechanisms](#supported-mechanisms)\n* [Example Conventions](#example-conventions)\n* [Default](#default)\n* [SCRAM-SHA-256](#scram-sha-256)\n* [SCRAM-SHA-1](#scram-sha-1)\n* [MONGODB-CR](#mongodb-cr)\n* [MONGODB-AWS](#mongodb-aws)\n* [X.509](#x.509) ## Overview In this guide, you can learn how to use each **authentication mechanism** available in the MongoDB Community Edition. MongoDB uses authentication mechanisms to confirm an identity and establish trust to ensure security in the driver and server before connecting. To authenticate using `GSSAPI/Kerberos` or `LDAP`, see the[Enterprise Authentication Mechanisms](https://mongodb.com/docs/drivers/go/current/fundamentals/enterprise-auth/#std-label-golang-enterprise-authentication-mechanisms) fundamentals page. To learn more about establishing a connection to your MongoDB cluster, see the [Connection Guide.](https://mongodb.com/docs/drivers/go/current/fundamentals/connection/#std-label-golang-connection-guide) ## Supported Mechanisms The Go driver supports the following authentication mechanisms: * [SCRAM-SHA-256](#std-label-golang%5Fsha%5F256)\n* [SCRAM-SHA-1](#std-label-golang-sha-1)\n* [MONGODB-CR](#std-label-golang-mongodb-cr)\n* [MongoDB-AWS](#std-label-golang-mongodb-aws)\n* [X.509](#std-label-golang-x509) The Go Driver establishes a connection with an authentication mechanism through a [Client](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Client)type. The `Client` type specifies the mechanism and credentials to use as connection options in a [Credential](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#Credential)type . To configure these options, pass a `Credential` type to the[SetAuth()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#ClientOptions.SetAuth)method of the [ClientOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#ClientOptions)type. The following sections demonstrate this process with the five mechanisms the MongoDB Community Edition supports. ### Example Conventions Each authentication mechanism contains the following placeholders: * `username` \\- Your MongoDB username\n* `password` \\- Your MongoDB user's password\n* `hostname` \\- Your MongoDB servers network address, accessible by your client\n* `port` \\- Your MongoDB servers port number\n* `authenticationDb` \\- Your MongoDB database that contains the user's authentication data. If you omit this option, the driver uses the default value `admin`. ### Default The default mechanism uses one of the following authentication mechanisms depending on what MongoDB versions your server supports: | Mechanism     | Versions                       |\n| ------------- | ------------------------------ |\n| SCRAM-SHA-256 | MongoDB 4.0 and later          |\n| SCRAM-SHA-1   | MongoDB 3.0, 3.2, 3.4, and 3.6 |\n| MONGODB-CR    | MongoDB 2.6 and earlier        | To specify the default authentication mechanism, omit the`AuthMechanism` option:\n\n ` To learn more about the challenge-response (CR) and salted challenge-response authentication mechanisms (SCRAM) that MongoDB supports, see the [SCRAM](https://www.mongodb.com/docs/manual/core/security-scram/) section of the server manual. ### `SCRAM-SHA-256` ## Important `SCRAM-SHA-256` is the default authentication method for MongoDB starting in MongoDB 4.0. `SCRAM-SHA-256` is a salted challenge-response authentication mechanism (SCRAM) that uses your username and password, encrypted with the `SHA-256`algorithm, to authenticate your user. To specify the `SCRAM-SHA-256` authentication mechanism, assign the`AuthMechanism` option the value `\"SCRAM-SHA-256\"`: ```go credential := options.Credential{    AuthMechanism: \"SCRAM-SHA-256\",    AuthSource: \"<authenticationDb>\",    Username: \"<username>\",    Password: \"<password>\", } clientOpts := options.Client().ApplyURI(\"mongodb://<hostname>:<port>\").    SetAuth(credential) client, err := mongo.Connect(context.TODO(), clientOpts) \n``` ### `SCRAM-SHA-1` ## Important `SCRAM-SHA-1` is the default authentication method for MongoDB versions 3.0, 3.2, 3.4, and 3.6. `SCRAM-SHA-1` is a salted challenge-response mechanism (SCRAM) that uses your username and password, encrypted with the `SHA-1` algorithm, to authenticate your user. To specify the `SCRAM-SHA-1` authentication mechanism, assign the`AuthMechanism` option the value `\"SCRAM-SHA-1\"`: ```go credential := options.Credential{    AuthMechanism: \"SCRAM-SHA-1\",    AuthSource: \"<authenticationDb>\",    Username: \"<username>\",    Password: \"<password>\", } clientOpts := options.Client().ApplyURI(\"mongodb://<hostname>:<port>\").    SetAuth(credential) client, err := mongo.Connect(context.TODO(), clientOpts) \n``` ### `MONGODB-CR` `MONGODB-CR` is a challenge-response authentication mechanism that uses your username and password to authenticate your user. ## Important This authentication mechanism was deprecated starting in MongoDB 3.6 and is no longer supported as of MongoDB 4.0. ### `MONGODB-AWS` ## Important The MONGODB-AWS authentication mechanism is only available in MongoDB versions 4.4 and later. The `MONGODB-AWS` authentication mechanism uses your Amazon Web Services Identity and Access Management (AWS IAM) credentials to authenticate your user. To specify the `MONGODB-AWS` authentication mechanism, perform the following: * Assign the `AuthMechanism` option the value `MONGODB-AWS`\n* Assign the `Username` option the value of your `accessKeyID`\n* Assign the `Password` option the value of your `secretAccessKey` ```go var accessKeyID, secretAccessKey string awsCredential := options.Credential{    AuthMechanism: \"MONGODB-AWS\",    AuthSource: \"<authenticationDb>\",    Username: \"<accessKeyID>\",    Password: \"<secretAccessKey>\", } awsIAMClient, err := mongo.Connect(    context.TODO(),    options.Client().SetAuth(awsCredential)) if err != nil {    panic(err) } _ = awsIAMClient \n``` If you need to specify an AWS session token, use the temporary credentials returned from an assume role request. To use temporary credentials, assign the `AuthMechanismProperties`option the value of your `sessionToken`: ```go var sessionToken string assumeRoleCredential := options.Credential{    AuthMechanism: \"MONGODB-AWS\",    AuthSource: \"<authenticationDb>\",    Username: \"<accessKeyID>\",    Password: \"<secretAccessKey>\",    AuthMechanismProperties: map[string]string{       \"AWS_SESSION_TOKEN\": \"<sessionToken>\",\n\n } assumeRoleClient, err := mongo.Connect(context.TODO(),    options.Client().SetAuth(assumeRoleCredential)) \n``` ### `X.509` The `X.509` authentication mechanism uses[TLS](https://en.wikipedia.org/wiki/Transport%5FLayer%5FSecurity) with X.509 certificates to authenticate your user, identified by the relative distinguished names (RDNs) of your client certificate. When you specify the `X.509`authentication mechanism, the server authenticates the connection using the paths of the following files: * `tlsCAFile` which contains either a single or a bundle of certificate authorities to trust when making a TLS connection\n* `tlsCertificateKeyFile` which references the path to the client certificate file or the client private key file To specify the `X.509` authentication mechanism, perform the following: * Assign the `tlsCAFile` the path to its file in the connection string\n* Assign the `tlsCertificateKeyFile` the path to its file in the connection string\n* Assign the `AuthMechanism` option the value `\"MONGODB-X509\"` ```go caFilePath := \"<cafile_path>\" certificateKeyFilePath := \"<client_certificate_path>\" uri := \"mongodb://<hostname>:<port>/?tlsCAFile=%s&tlsCertificateKeyFile=%s\" uri = fmt.Sprintf(uri, caFilePath, certificateKeyFilePath) credential := options.Credential{    AuthMechanism: \"MONGODB-X509\", } clientOpts := options.Client().ApplyURI(uri).SetAuth(credential) \n``` ← [Context](https://mongodb.com/docs/drivers/go/current/fundamentals/context/ \"Previous Section\")[Enterprise Authentication Mechanisms](https://mongodb.com/docs/drivers/go/current/fundamentals/enterprise-auth/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/collations/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Collations On this page * [Overview](#overview)\n* [Collations in MongoDB](#collations-in-mongodb)\n* [Specify a Collation](#specify-a-collation)\n* [Set a Collation on a Collection or View](#set-a-collation-on-a-collection-or-view)\n* [Create a Collection Example](#create-a-collection-example)\n* [Use the Default Collation Example](#use-the-default-collation-example)\n* [Set a Collation on an Index](#set-a-collation-on-an-index)\n* [Example](#example)\n* [Set a Collation on an Operation](#set-a-collation-on-an-operation)\n* [Example](#example-1)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to use **collations** to order your query or aggregation operation results by string values. A collation is a set of character ordering conventions that apply to a specific language and locale. ## Collations in MongoDB MongoDB sorts strings using _binary collation_ by default. This collation method uses the [ASCII standard](https://en.wikipedia.org/wiki/ASCII)character values to compare and order strings. Certain languages and locales have specific character ordering conventions that differ from the ASCII standard. For example, in Canadian French, the right-most accented character determines the ordering for strings when the other characters are the same. Consider the following Canadian French words: * cote\n* coté\n* côte\n* côté When using the default binary collation, MongoDB sorts them in the following order: `| cote |\n| ---- |\n| coté |\n| côte |\n| côté | ` When using the Canadian French collation, MongoDB sorts them in the following order: ``` cote côte coté côté \n``` ## Specify a Collation To specify a collation, create a `Collation` object. You must define the `Locale` field of the `Collation` object; all other fields are optional. For example, the following code snippet specifies a `Collation` object with the `\"en_US\"` locale collation: ```go myCollation := &options.Collation{Locale: \"en_US\"} \n``` For a complete list of `Collation` object fields, visit the [Collation API documentation](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#Collation). To see all the supported locales and the default values for the `Locale` fields, visit [Supported Languages and Locales.](https://www.mongodb.com/docs/manual/reference/collation-locales-defaults/#supported-languages-and-locales) ## Set a Collation on a Collection or View You can apply a collation when you create a new collection or view. This defines the default collation for any operations called on that collection or view. Set a collation through a`CreateCollectionOptions` or `CreateViewOptions` object. Then, call the`CreateCollection()` or `CreateView()` method with your options object as an argument. ### Create a Collection Example The following example creates a new collection called `books` and specifies a default collation with the `\"fr\"` locale. The `Strength` collation field has a value of `1`to ignore differences in letter accents. ```go myCollation := &options.Collation{Locale: \"fr\", Strength: 1} opts := options.CreateCollection().SetCollation(myCollation) err := db.CreateCollection(context.TODO(), \"books\", opts) if err != nil {    panic(err) } \n``` ### Use the Default Collation Example If you call an operation that uses a collation on the `books` collection, the operation will now use the default collation specified in the [Create a Collection Example.](#std-label-golang-create-collection) Assume the `books` collection contains the following documents: ``` {\"name\" : \"Emma\", \"length\" : \"474\"}\n\n {\"name\" : \"Infinite Jest\", \"length\" : \"1104\"} {\"name\" : \"Cryptonomicon\", \"length\" : \"918\"} {\"name\" : \"Ça\", \"length\" : \"1138\"} \n``` ## Note To learn how to insert documents, see [Insert a Document.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/insert/#std-label-golang-insert-guide) The following example uses the `Find()` method to return all documents with a `name` value that alphabetically precedes `\"Infinite Jest\"`: ```go filter := bson.D{{\"name\", bson.D{{\"$lt\", \"Infinite Jest\"}}}} cursor, err := coll.Find(context.TODO(), filter) if err != nil {    panic(err) } var results []bson.D if err = cursor.All(context.TODO(), &results); err != nil {    panic(err) } for _, result := range results {    fmt.Println(result) } \n``` VIEW OUTPUT Without specifying a default `books` collation, the `Find()` method would follow default binary collation rules to determine the `name` values that precede `\"Infinite Jest\"`. These rules place words beginning with \"Ç\" after those beginning with \"I\". The output would resemble the following: ``` [{name Cryptonomicon} {length 918}] [{name Emma} {length 474}] \n``` To learn more about the `Find()` method, see [Retrieve Data.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/#std-label-golang-retrieve) ## Set a Collation on an Index You can apply a collation when you create a new index on a collection. The index stores an ordered representation of the documents in the collection so your MongoDB instance does not need to perform the ordering for sorting operations in-memory. To use the index in an operation, your operation must use the same collation as the one specified in the index. Additionally, ensure that the operation is covered by the index that contains the collation. Set a collation through an `IndexOptions` object and call the`CreateOne()` method with your options object as an argument. ### Example After creating the `books` collection and applying a default collation, as shown in the[Create a Collection Example](#std-label-golang-create-collection) section, you cannot change the collection's default collation. However, you can create an index for the collection with a different collation. The following example uses the `CreateOne()` method to create an ascending index on the`name` field and specifies a new collation with an `\"en_US\"` locale: ```go  myCollation := &options.Collation{Locale: \"en_US\"}  opts := options.Index().SetCollation(myCollation)  indexModel := mongo.IndexModel{    Keys:    bson.D{{\"name\", 1}},    Options: opts,  }  name, err := coll.Indexes().CreateOne(context.TODO(), indexModel)  if err != nil {    panic(err)  }  fmt.Println(\"Name of Index Created: \" + name) \n``` VIEW OUTPUT ## Set a Collation on an Operation Operations that read, update, and delete documents from a collection can use collations. Applying a collation to an operation overrides any default collation previously defined for a collection. If you apply a new collation to an operation that differs from an index's collation, you cannot use that index. As a result, the operation may not perform as well as one that is covered by an index. For more information on the disadvantages of sorting operations not covered by an index, see [Using Indexes to Sort Query Results](https://www.mongodb.com/docs/manual/tutorial/sort-results-with-indexes/). See the [MongoDB manual](https://www.mongodb.com/docs/manual/reference/collation/#collation-document) for a list of operations that support collation. ### Example You can use operations that support collation to update and query documents in the`books` collection.\n\n ```go filter := bson.D{{\"length\", bson.D{{\"$gt\", \"1000\"}}}} myCollation := &options.Collation{Locale: \"en_US\", NumericOrdering: true} opts := options.Find().SetCollation(myCollation) cursor, err := coll.Find(context.TODO(), filter, opts) if err != nil {    panic(err) } var results []bson.D if err = cursor.All(context.TODO(), &results); err != nil {    panic(err) } for _, result := range results {    fmt.Println(result) } \n``` VIEW OUTPUT Without specifying a collation with a `NumericOrdering` field set to `true`, the same `Find()` operation would compare `length` values as strings. For example, the operation would consider the string `\"824\"` as greater than `\"1000\"`. The output would resemble the following: ``` [{name Emma} {length 474}] [{name Cryptonomicon} {length 918}] \n``` ## Additional Information To learn more about the `Find()` method, see the [Retrieve Data](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/#std-label-golang-retrieve) guide. To learn more about collations, visit the following manual pages: * [Collation](https://www.mongodb.com/docs/manual/reference/collation/#collation-document)\n* [Collation Locales and Default Parameters](https://www.mongodb.com/docs/manual/reference/collation-locales-defaults/#supported-languages-and-locales) ### API Documentation To learn more about the methods discussed in this guide, see the following API Documentation: * [Collation](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#Collation)\n* [CreateCollectionOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#CreateCollectionOptions)\n* [IndexModel](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#IndexModel)\n* [CreateOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#IndexView.CreateOne)\n* [IndexOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#IndexOptions)\n* [UpdateOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#UpdateOptions) ← [Transactions](https://mongodb.com/docs/drivers/go/current/fundamentals/transactions/ \"Previous Section\")[Monitoring](https://mongodb.com/docs/drivers/go/current/fundamentals/monitoring/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/transactions/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Transactions On this page * [Overview](#overview)\n* [Methods](#methods)\n* [Example](#example)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to use **transactions** with the MongoDB Go Driver. [Transactions](https://www.mongodb.com/docs/manual/core/transactions/) allow you to run a series of operations that do not change any data until the transaction is committed. If any operation in the transaction fails, the driver aborts the transaction and discards all data changes before they ever become visible. In MongoDB, transactions run within logical **sessions**. A[session](https://www.mongodb.com/docs/manual/reference/server-sessions/) is a grouping of related read or write operations that you intend to run sequentially. Sessions enable [causal consistency](https://www.mongodb.com/docs/manual/core/read-isolation-consistency-recency/#causal-consistency)for a group of operations or allow you to execute operations in an [ACID transaction](https://www.mongodb.com/basics/acid-transactions?tck=docs). MongoDB guarantees that the data involved in your transaction operations remains , even if the operations encounter unexpected errors. With the Go driver, you can create a new session from a`Client` instance as a `Session` type. ## Warning You should use a `Session` only with the `Client` (or associated`Database` or `Collection`) that created it. Using a`Session` with a different `Client` will result in operation errors. ## Warning Implementations of `Session` are not safe for concurrent use by multiple [goroutines.](https://www.golang-book.com/books/intro/10) ## Methods After you start a session using the `StartSession()` method, you can modify the session state using the method set provided by the `Session` interface. The following table describes these methods:\n\n The `Session` interface also has methods to retrieve session properties and modify mutable session properties. Find more information in the [API documentation.](#std-label-api-docs-transaction) ## Example The following example shows how you can create a session, create a transaction, and commit a multi-document insert operation through the following steps: 1. Create a session from the client using the `StartSession()` method.\n2. Use the `WithTransaction()` method to start a transaction.\n3. Insert multiple documents. The `WithTransaction()` method executes the insert and commits the transaction. If any operation results in errors, `WithTransaction()` handles aborting the transaction.\n4. Close the transaction and session using the `EndSession()` method.\n\n ` If you need more control over your transactions, you can find an example showing how to manually create, commit, and abort transactions in the[full code example.](https://raw.githubusercontent.com/mongodb/docs-golang/master/source/includes/fundamentals/code-snippets/transaction.go) ## Additional Information For more information about insert operations, see the[Insert a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/insert/#std-label-golang-insert-guide) fundamentals page. For more information about write concerns, see the[Modify Execution of CRUD Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-read-pref/#std-label-golang-write-read-pref) fundamentals page. For an additional example using sessions and transactions with the Go driver, see the[developer blog post on Multi-Document ACID Transactions.](https://www.mongodb.com/developer/languages/go/golang-multi-document-acid-transactions/?tck=docs) ### API Documentation To learn more about any of the types or methods discussed in this guide, see the following API Documentation: * [Session](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Session)\n* [Client](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Client)\n* [StartSession()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Client.StartSession)\n* [TransactionOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#TransactionOptions)\n* [SetWriteConcern()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#TransactionOptions.SetWriteConcern)\n* [InsertMany()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.InsertMany) ← [Indexes](https://mongodb.com/docs/drivers/go/current/fundamentals/indexes/ \"Previous Section\")[Collations](https://mongodb.com/docs/drivers/go/current/fundamentals/collations/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/aggregation/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Aggregation On this page * [Overview](#overview)\n* [Compare Operations](#compare-operations)\n* [Limitations](#limitations)\n* [Examples](#examples)\n* [Additional Information](#additional-information) ## Overview In this guide, you can learn how to use **aggregation operations** in the MongoDB Go Driver. Aggregation operations process data in your MongoDB collections based on your specifications in the **aggregation pipeline**. An aggregation pipeline consists of one or more **stages**. Each stage performs an operation based on its expression operators. After the driver executes the aggregation pipeline, it returns an aggregated result. ### Analogy Aggregation operations operate similarly to a car factory. Car factories have an assembly line. The assembly lines have assembly stations with specialized tools to peform a specific task. To build a car, you send raw parts to the factory. Then, the assembly line transforms and assembles the parts into a car. The assembly line resembles the **aggregation pipeline**, the assembly stations in the assembly line resemble the **aggregation stages**, the specialized tools represent the **expression operators**, and the finished product resembles the **aggregated result**. ## Compare Operations The following table lists the tasks you can perform with find and aggregation operations. | Find Operations                                                                                                    | Aggregation Operations                                                                                                                                                    |\n| ------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Select _what_ documents to returnSelect _which_ fields to returnSort the resultsLimit the resultsCount the results | Select _what_ documents to returnSelect _which_ fields to returnSort the resultsLimit the resultsCount the resultsRename fieldsCalculate fieldsSummarize dataGroup values | ## Limitations Aggregation operations have limitations. When performing agregation operations, keep the following in mind: * Returned documents must not violate the [BSON document size limit](https://www.mongodb.com/docs/manual/reference/limits/#BSON-Document-Size) of 16 megabytes.\n* Pipeline stages have a memory limit of 100 megabytes by default. If required, you may exceed this limit by using the [allowDiskUse](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#AggregateOptions.SetAllowDiskUse)method.\n* The [$graphLookup](https://www.mongodb.com/docs/manual/reference/operator/aggregation/graphLookup/) stage has a strict memory limit of 100 megabytes and ignores`allowDiskUse`. ## Examples The examples in this section use the following `Tea` struct as a model for documents in the `menu` collection: `| type Tea struct { |\n| ----------------- |\n| Type     string   |\n| Category string   |\n| Toppings []string |\n| Price    float32  |\n| }                 | ` To run the examples in this section, load the sample data into the`tea.menu` collection with the following snippet: ```go coll := client.Database(\"tea\").Collection(\"menu\") docs := []interface{}{\n\n \tTea{Type: \"Gyokuro\", Category: \"green\", Toppings: []string{\"berries\", \"milk foam\"}, Price: 5.65}, \tTea{Type: \"English Breakfast\", Category: \"black\", Toppings: []string{\"whipped cream\", \"honey\"}, Price: 5.75}, \tTea{Type: \"Sencha\", Category: \"green\", Toppings: []string{\"lemon\", \"whipped cream\"}, Price: 5.15}, \tTea{Type: \"Assam\", Category: \"black\", Toppings: []string{\"milk foam\", \"honey\", \"berries\"}, Price: 5.65}, \tTea{Type: \"Matcha\", Category: \"green\", Toppings: []string{\"whipped cream\", \"honey\"}, Price: 6.45}, \tTea{Type: \"Earl Grey\", Category: \"black\", Toppings: []string{\"milk foam\", \"pumpkin spice\"}, Price: 6.15}, \tTea{Type: \"Hojicha\", Category: \"green\", Toppings: []string{\"lemon\", \"ginger\", \"milk foam\"}, Price: 5.55}, } result, err := coll.InsertMany(context.TODO(), docs) \n``` Each document represents a tea on the menu of a shop and contains information about the tea type, the available toppings, and the price. ### Average Rating The following example calculates and displays the average rating and number of ratings for each tea category. The aggregation pipeline uses the `$group` stage to group the documents by the `category` field, calculates the average using the`$avg` expression operator, and counts the number of documents using the `$sum` expression operator. ```go // create group stage groupStage := bson.D{     {\"$group\", bson.D{         {\"_id\", \"$category\"},         {\"average_price\", bson.D{{\"$avg\", \"$price\"}}},         {\"type_total\", bson.D{{\"$sum\", 1}}},     }}} // pass the pipeline to the Aggregate() method cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{groupStage}) if err != nil {     panic(err) } // display the results var results []bson.M if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     fmt.Printf(\"Average price of %v tea options: $%v \\n\", result[\"_id\"], result[\"average_price\"])     fmt.Printf(\"Number of %v tea options: %v \\n\\n\", result[\"_id\"], result[\"type_total\"]) } \n``` VIEW OUTPUT ### Omit Fields in Results The following example matches documents where you can get milk foam as a topping and lists the two cheapest options. The aggregation pipeline contains the following stages: * `$match` stage to match documents where the `toppings` field contains \"milk foam\"\n* `$unset` stage to omit the `_id` and `category` fields\n* `$sort` stage to sort the `price` and `toppings` in ascending order\n* `$limit` stage to show the first two documents ```go // create the stages matchStage := bson.D{{\"$match\", bson.D{{\"toppings\", \"milk foam\"}}}} unsetStage := bson.D{{\"$unset\", bson.A{\"_id\", \"category\"}}} sortStage := bson.D{{\"$sort\", bson.D{{\"price\", 1}, {\"toppings\", 1}}}} limitStage := bson.D{{\"$limit\", 2}} // pass the pipeline to the Aggregate() method cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{matchStage, unsetStage, sortStage, limitStage}) if err != nil {     panic(err) } // display the results var results []Tea if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {\n\n } \n``` VIEW OUTPUT ## Additional Information To learn more about the terms mentioned, see the following guides: * [Expression Operators](https://www.mongodb.com/docs/manual/reference/operator/aggregation/)\n* [Aggregation Pipeline](https://www.mongodb.com/docs/manual/core/aggregation-pipeline/)\n* [Aggregation Stages](https://www.mongodb.com/docs/manual/meta/aggregation-quick-reference/#stages)\n* [Operator Expressions](https://www.mongodb.com/docs/manual/meta/aggregation-quick-reference/#operator-expressions)\n* [Aggregation Pipeline Limits](https://www.mongodb.com/docs/manual/core/aggregation-pipeline-limits/) To view more aggregation examples, see the following guides: * [Count](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/count/#std-label-golang-count-aggregation)\n* [Limit](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/limit/#std-label-golang-limit-aggregation)\n* [Skip](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/skip/#std-label-golang-skip-aggregation)\n* [Text](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/text/#std-label-golang-search-text-aggregation) To learn more about the `Aggregate()` method and its behavior, see[Retrieve Data.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/#std-label-golang-retrieve-aggregation) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation: * [Aggregate()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.Aggregate)\n* [AggregateOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#AggregateOptions) ← [Modify Execution of CRUD Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-read-pref/ \"Previous Section\")[Indexes](https://mongodb.com/docs/drivers/go/current/fundamentals/indexes/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/time-series/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Time Series Collections On this page * [Overview](#overview)\n* [Create a Time Series Collection](#create-a-time-series-collection)\n* [Query a Time Series Collection](#query-a-time-series-collection)\n* [Additional Information](#additional-information) ## Overview In this guide, you can learn about **time series collections** in MongoDB, and how to interact with them in the MongoDB Go Driver. Time series collections efficiently store sequences of measurements over a period of time. The collection consists of time series data with the following information: * Data collected over time\n* Metadata that describes the measurement\n* Date of the measurement | Example         | Measurement               | Metadata |\n| --------------- | ------------------------- | -------- |\n| Sales Data      | Revenue                   | Company  |\n| Infection Rates | Amount of People Infected | Location | ## Create a Time Series Collection ## Important Time series collections require MongoDB 5.0 or later. To create a time series collection, pass the following parameters to the`CreateCollection()` method: * The name of the new collection to create\n* The `TimeSeriesOptions` object specifying at least the time field ### Example The following example creates the `spring_weather.march2022` time series collection with the `temperature` as the time field: `| db := client.Database(\"spring_weather\")                      |\n| ------------------------------------------------------------ |\n| tso := options.TimeSeries().SetTimeField(\"temperature\")      |\n| opts := options.CreateCollection().SetTimeSeriesOptions(tso) |\n| db.CreateCollection(context.TODO(), \"march2022\", opts)       | ` To check if you created the collection, send the `\"listCollections\"`command to the `RunCommand()` method: Testing whether we created a time series collection. ```go command := bson.D{{\"listCollections\", 1}} var result bson.M \tcommandErr := db.RunCommand(context.TODO(), command).Decode(&result) if commandErr != nil { \tpanic(commandErr) } output, outputErr := json.MarshalIndent(result, \"\", \"    \") if outputErr != nil { \tpanic(outputErr) } fmt.Printf(\"%s\\n\", output) \n``` VIEW OUTPUT ## Query a Time Series Collection To query a time series collection, use the same conventions as you would for [retrieving](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/#std-label-golang-retrieve) and aggregating data. ## Additional Information To learn more about the operations mentioned, see the following guides: * [Time Series Collections](https://www.mongodb.com/docs/manual/core/timeseries-collections/#std-label-manual-timeseries-collection)\n* [Time Series Collection Limitations](https://www.mongodb.com/docs/manual/core/timeseries/timeseries-limitations/#std-label-manual-timeseries-collection-limitations)\n* [Run a Command](https://mongodb.com/docs/drivers/go/current/usage-examples/command/#std-label-golang-run-command-usage-example)\n* [Retrieve Data](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/#std-label-golang-retrieve) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation:\n\n ← [GridFS](https://mongodb.com/docs/drivers/go/current/fundamentals/gridfs/ \"Previous Section\")[Encrypt Fields](https://mongodb.com/docs/drivers/go/current/fundamentals/encrypt-fields/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Work with BSON On this page * [Overview](#overview)\n* [Data Types](#data-types)\n* [Struct Tags](#struct-tags)\n* [Unmarshalling](#unmarshalling) ## Overview In this guide, you can learn about how the Go Driver handles conversions between BSON and Go types. The process of converting a Go type to BSON is called **marshalling**, while the reverse process is called **unmarshalling**. You should read this guide if you want to learn more about how the Go Driver represents BSON data or need to adjust default marshalling and unmarshalling behaviors. ## Data Types MongoDB stores documents in a binary representation called [BSON](https://www.mongodb.com/docs/manual/reference/bson-types/) that allows for easy and flexible data processing. The Go Driver provides four main types for working with BSON data: * `D`: An ordered representation of a BSON document (slice)\n* `M`: An unordered representation of a BSON document (map)\n* `A`: An ordered representation of a BSON array\n* `E`: A single element inside a D type The following example demonstrates how to construct a query filter using the`bson.D` type to match documents with a `quantity` field value greater than 100: `| filter := bson.D{{\"quantity\", bson.D{{\"$gt\", 100}}}} |\n| ---------------------------------------------------- | ` To learn more about how the Go Driver handles BSON data, see the[bson package API documentation.](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/bson) ## Struct Tags In Go, a **struct** is a collection of data fields with declared data types. The Go Driver can marshal/unmarshal structs and other native Go types to/from BSON using a [configurable codec system](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/bson/bsoncodec). You can modify the default marshalling and unmarshalling behavior of the Go Driver using**struct tags**, which are optional pieces of metadata attached to struct fields. The most common use of struct tags is for specifying the field name in the BSON document that corresponds to the struct field. The following table describes the additional struct tags that you can use with the Go Driver:\n\n Without additional instruction from struct tags, the Go Driver will marshal structs using the following rules: 1. The Go Driver only marshals and unmarshals exported fields.\n2. The Go Driver generates BSON key using the lowercase of the corresponding struct field.\n3. The Go Driver marshals embedded struct fields as subdocuments. Each key is the lowercase of the field's type.\n4. The Go Driver marshals a pointer field as the underlying type if the pointer is non-nil. If the pointer is nil, the driver marshals it as a BSON null value.\n5. When unmarshalling, the Go Driver follows [these D/M type mappings](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/bson#hdr-Native%5FGo%5FTypes)for fields of type `interface{}`. The driver unmarshals BSON documents unmarshalled into an `interface{}` field as a `D` type. ## Unmarshalling You can unmarshal BSON documents by using the `Decode()` method on the result of the `FindOne` method or any `*mongo.Cursor` instance. The `Decode()` method returns an `error` type which contains one of the following values: * `nil` if a document matched your query, and there were no errors retrieving and unmarshalling the document.\n* If the driver retrieved your document but could not unmarshal your result, the`Decode()` method returns the unmarshalling error.\n* If there was an error retrieving your document during execution of the`FindOne()` method, the error propagates to the `Decode()` method and the `Decode()` method returns the error. When used on the `SingleResult` type returned by the `FindOne()`method, `Decode()` can also return the `ErrNoDocuments` error if no documents matched the query filter. The following example demonstrates how you can use the `Decode()`method to unmarshal and read the result of a simple `FindOne()`operation: ```go coll := client.Database(\"school\").Collection(\"students\") filter := bson.D{{\"age\", 8}} var result bson.D err := coll.FindOne(context.TODO(), filter).Decode(&result) fmt.Println(result) \n``` VIEW OUTPUT The `Cursor` type also uses the `All()` method, which unmarshals all documents stored in the cursor into an array at the same time. The `bson` package includes a family of`Marshal()` and `Unmarshal()` methods that work with BSON-encoded data of `[]byte` type. The following code demonstrates how you can unmarshal BSON back into a user-defined struct by using methods from the `bson` package: ```go type Item struct {    Category string    Quantity int32 } doc, err := bson.Marshal(bson.D{{\"category\", \"plate\"}, {\"quantity\", 6}}) var test Item err = bson.Unmarshal(doc, &test) fmt.Printf(\"Unmarshalled Struct:\\n%+v\\n\", test) \n``` VIEW OUTPUT ## Note You can use the `Raw` type to retrieve elements from a BSON document byte slice without unmarshalling it to a Go type. This can be useful if you need to look up individual elements without unmarshalling the entire BSON document. To learn more about the marshalling and unmarshalling methods used with the`Cursor` type, see the [Cursor API documentation](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Cursor) To learn more about the marshalling and unmarshalling methods in the`bson` package, see the [bson API documentation](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/bson#hdr-Marshalling%5Fand%5FUnmarshalling) ← [Enterprise Authentication Mechanisms](https://mongodb.com/docs/drivers/go/current/fundamentals/enterprise-auth/ \"Previous Section\")[CRUD Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/connection/tls/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Enable TLS/SSL on a Connection [MongoDB Go Driver](https://mongodb.com/docs/drivers/go/current/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/monitoring/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Monitoring On this page * [Overview](#overview)\n* [Subscribe to Events](#subscribe-to-events)\n* [Event Descriptions](#event-descriptions)\n* [Example Event Documents](#example-event-documents)\n* [ServerDescriptionChangedEvent](#serverdescriptionchangedevent)\n* [ServerOpeningEvent](#serveropeningevent)\n* [ServerClosedEvent](#serverclosedevent)\n* [TopologyDescriptionChangedEvent](#topologydescriptionchangedevent)\n* [TopologyOpeningEvent](#topologyopeningevent)\n* [TopologyClosedEvent](#topologyclosedevent)\n* [ServerHeartbeatStartedEvent](#serverheartbeatstartedevent)\n* [ServerHeartbeatSucceededEvent](#serverheartbeatsucceededevent)\n* [ServerHeartbeatFailedEvent](#serverheartbeatfailedevent)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to monitor topology events in a MongoDB instance, replica set, or sharded cluster. The driver creates topology events, also known as Server Discovery and Monitoring (SDAM) events, when there are changes in the state of the instance or cluster that you are connected to. For example, the driver creates an SDAM event when you establish a new connection or when the cluster elects a new primary. You should read this guide if you need to record topology changes in your application or want to explore the information provided by these events. ## Subscribe to Events You can access details about SDAM events by subscribing to them in your application. The following example demonstrates how to subscribe to the `ServerClosed` event by instantiating a`ServerMonitor` and connecting to a deployment: `| var eventArray []*event.ServerClosedEvent                                 |\n| ------------------------------------------------------------------------- |\n| srvMonitor := &event.ServerMonitor{                                       |\n| ServerClosed: func(e *event.ServerClosedEvent) {                          |\n| eventArray = append(eventArray, e)                                        |\n| },                                                                        |\n| }                                                                         |\n| clientOpts := options.Client().ApplyURI(uri).SetServerMonitor(svrMonitor) |\n| client, err := mongo.Connect(context.Background(), clientOpts)            | ` ## Event Descriptions You can subscribe to the following SDAM events by specifying properties of a `ServerMonitor` instance:\n\n ## Example Event Documents The following sections show sample output for each type of SDAM event. ### ServerDescriptionChangedEvent ```bash *event.ServerDescriptionChangedEvent {     \"Address\": \"...\",     \"TopologyID\": \"...\",     \"PreviousDescription\": {         \"Addr\": \"...\",         \"Arbiters\": null,         \"AverageRTT\": 0,         \"AverageRTTSet\": false,         \"Compression\": null,         \"CanonicalAddr\": \"...\",         \"ElectionID\": \"...\",         \"HeartbeatInterval\": 0,         \"HelloOK\": false,         \"Hosts\": null,         \"LastError\": null,         \"LastUpdateTime\": \"...\",         \"LastWriteTime\": \"...\",         \"MaxBatchCount\": 0,         \"MaxDocumentSize\": 0,         \"MaxMessageSize\": 0,         \"Members\": null,         \"Passives\": null,         \"Passive\": false,         \"Primary\": \"...\",         \"ReadOnly\": false,         \"ServiceID\": null,         \"SessionTimeoutMinutes\": 0,         \"SetName\": \"...\",         \"SetVersion\": 0,         \"Tags\": null,         \"TopologyVersion\": null,         \"Kind\": 0,         \"WireVersion\": null     },     \"NewDescription\": {         \"Addr\": \"...\",         \"Arbiters\": null,         \"AverageRTT\": ...,         \"AverageRTTSet\": true,         \"Compression\": null,         \"CanonicalAddr\": \"...\",         \"ElectionID\": \"...\",         \"HeartbeatInterval\": ...,         \"HelloOK\": true,         \"Hosts\": [...],         \"LastError\": null,         \"LastUpdateTime\": \"...\",         \"LastWriteTime\": \"...\",         \"MaxBatchCount\": ...,         \"MaxDocumentSize\": ...,         \"MaxMessageSize\": ...,         \"Members\": [...],         \"Passives\": null,         \"Passive\": false,         \"Primary\": \"...\",         \"ReadOnly\": false,         \"ServiceID\": null,         \"SessionTimeoutMinutes\": 30,         \"SetName\": \"...\",         \"SetVersion\": 9,         \"Tags\": [...],         \"TopologyVersion\": {...},         \"Kind\": 10,         \"WireVersion\": {...}     } } \n``` #### `Kind` Field Value The `Kind` field in an event document represents the type of a single server in a topology and can have the following values:\n\n ### ServerOpeningEvent ```bash *event.ServerOpeningEvent {     \"Address\": \"...\",     \"TopologyID\": \"...\" } \n``` ### ServerClosedEvent ```bash *event.ServerClosedEvent {     \"Address\": \"...\",     \"TopologyID\": \"...\" } \n``` ### TopologyDescriptionChangedEvent ## Important Because the driver calls `TopologyDescriptionChanged` when the deployment topology is locked, the callback (function argument) for this event should not attempt any operation that requires server selection on the same client. ```bash *event.TopologyDescriptionChangedEvent {     \"TopologyID\": \"...\",     \"PreviousDescription\": {         \"Servers\": [             {                 \"Addr\": \"...\",                 \"Arbiters\": null,                 \"AverageRTT\": 0,                 \"AverageRTTSet\": false,                 \"Compression\": null,                 \"CanonicalAddr\": \"...\",                 \"ElectionID\": \"...\",                 \"HeartbeatInterval\": 0,                 \"HelloOK\": false,                 \"Hosts\": null,                 \"LastError\": null,                 \"LastUpdateTime\": \"...\",                 \"LastWriteTime\": \"...\",                 \"MaxBatchCount\": 0,                 \"MaxDocumentSize\": 0,                 \"MaxMessageSize\": 0,                 \"Members\": null,                 \"Passives\": null,                 \"Passive\": false,                 \"Primary\": \"...\",                 \"ReadOnly\": false,                 \"ServiceID\": null,                 \"SessionTimeoutMinutes\": 0,                 \"SetName\": \"...\",                 \"SetVersion\": 0,                 \"Tags\": null,                 \"TopologyVersion\": null,                 \"Kind\": 0,                 \"WireVersion\": null             },             ...         ],         \"SetName\": \"...\",         \"Kind\": 10,         \"SessionTimeoutMinutes\": 30,         \"CompatibilityErr\": null     },     \"NewDescription\": {         \"Servers\": [...],         \"SetName\": \"...\",         \"Kind\": 10,         \"SessionTimeoutMinutes\": 30,         \"CompatibilityErr\": null     } } \n```\n\n ### TopologyOpeningEvent ```bash *event.TopologyOpeningEvent {     \"TopologyID\": \"...\" } \n``` ### TopologyClosedEvent ```bash *event.TopologyClosedEvent {     \"TopologyID\": \"...\" } \n``` ### ServerHeartbeatStartedEvent ```bash *event.ServerHeartbeatStartedEvent {     \"ConnectionID\": \"...\",     \"Awaited\": true } \n``` ### ServerHeartbeatSucceededEvent ```bash *event.ServerHeartbeatSucceededEvent {  \"DurationNanos\": ...,     \"Reply\": {         \"Addr\": \"...\",         \"Arbiters\": null,         \"AverageRTT\": 0,         \"AverageRTTSet\": false,         \"Compression\": null,         \"CanonicalAddr\": \"...\",         \"ElectionID\": \"...\",         \"HeartbeatInterval\": 0,         \"HelloOK\": true,         \"Hosts\": [...],         \"LastError\": null,         \"LastUpdateTime\": \"...\",         \"LastWriteTime\": \"...\",         \"MaxBatchCount\": ...,         \"MaxDocumentSize\": ...,         \"MaxMessageSize\": ...,         \"Members\": [...],         \"Passives\": null,         \"Passive\": false,         \"Primary\": \"...\",         \"ReadOnly\": false,         \"ServiceID\": null,         \"SessionTimeoutMinutes\": 30,         \"SetName\": \"...\",         \"SetVersion\": 9,         \"Tags\": [...],         \"TopologyVersion\": {...},         \"Kind\": 6,         \"WireVersion\": {...}     },     \"ConnectionID\": \"...\",     \"Awaited\": true } \n``` To interpret the value of the `Kind` field, see the [Kind Field Value section.](#std-label-golang-monitoring-kind-field) ### ServerHeartbeatFailedEvent ```bash *event.ServerHeartbeatFailedEvent {     \"DurationNanos\": ...,     \"Failure\": \"<error message>\"     \"ConnectionID\": \"...\",     \"Awaited\": true } \n``` ## API Documentation * [ServerMonitor](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/event#ServerMonitor) type\n* [SetServerMonitor()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#ClientOptions.SetServerMonitor) method\n* [ServerKind](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/description#ServerKind) type\n* [Server](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/description#Server) type ← [Collations](https://mongodb.com/docs/drivers/go/current/fundamentals/collations/ \"Previous Section\")[GridFS](https://mongodb.com/docs/drivers/go/current/fundamentals/gridfs/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Read Operations * [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document)\n* [Count Documents](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/count/#std-label-golang-count-documents)\n* [Retrieve Data](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/#std-label-golang-retrieve)\n* [Access Data From a Cursor](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/cursor/#std-label-golang-cursor)\n* [Retrieve Distinct Values](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/distinct/#std-label-golang-retrieve-distinct)\n* [Sort Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/sort/#std-label-golang-sort-results)\n* [Skip Returned Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/skip/#std-label-golang-skip)\n* [Limit the Number of Returned Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/limit/#std-label-golang-limit)\n* [Specify Which Fields to Return](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/project/#std-label-golang-project)\n* [Search Text](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/text/#std-label-golang-search-text)\n* [Watch for Changes](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/watch/#std-label-golang-watch-changes) ← [CRUD Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/ \"Previous Section\")[Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/connection/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Connection Guide On this page * [Connection URI](#connection-uri)\n* [Parts of a Connection URI](#parts-of-a-connection-uri)\n* [Connection Example](#connection-example)\n* [Other Ways to Connect to MongoDB](#other-ways-to-connect-to-mongodb)\n* [Connect to a MongoDB Server on Your Local Machine](#connect-to-a-mongodb-server-on-your-local-machine)\n* [Connect to a Replica Set](#connect-to-a-replica-set)\n* [Connection Options](#connection-options)\n* [Single Timeout Setting](#single-timeout-setting) This guide shows you how to connect to a MongoDB instance or replica set deployment using the Go Driver. ## Connection URI A **connection URI**, also known as a connection string, tells the driver how to connect to MongoDB and how to behave while connected. ### Parts of a Connection URI The following example explains each part of a sample connection URI: ![Each part of the connection string](https://mongodb.com/docs/drivers/go/current/includes/figures/connection_uri_parts.png) In this example, we use `mongodb` for the protocol, which specifies the[Standard Connection String Format](https://www.mongodb.com/docs/manual/reference/connection-string/#std-label-connections-standard-connection-string-format). You can also use the [DNS Seed List Connection Format](https://www.mongodb.com/docs/manual/reference/connection-string/#dns-seed-list-connection-format) if you want more flexibility of deployment and the ability to change the servers in rotation without reconfiguring clients. The next part of the connection string contains your username and, if you are using password-based authentication, your password. Replace the value of`user` with your username and `pass` with your password. If you are using an authentication mechanism that does not require a username and password, omit this part of the connection URI. The next part of the connection string specifies the hostname or IP address and port of your MongoDB instance. In the preceding example, we use `sample.host`as the hostname and `27017` as the port. Replace these values to point to your MongoDB instance. The last part of the connection string specifies connection and authentication options. In the example, we set two connection options:`maxPoolSize=20` and `w=majority`. To learn more about connection options, read the [Connection Options](#std-label-golang-connection-options) section of this guide. ### Connection Example To connect to MongoDB, you need to create a client. A client manages your connections and runs database commands. You can create a client that uses your connection string and other client options by passing a `ClientOptions` object to the `Connect()`method. To specify your connection URI, pass it to the `ApplyURI()`method, which returns a new `ClientOptions` instance. To set any other options, call the relevant helper method from the `options` package. To learn more about connection options, see the[Connection Options section](#std-label-golang-connection-options). To learn more about creating a client, see the API documentation for [Client](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Client) and [Connect().](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Connect) You can set the Stable API version as an option to avoid breaking changes when you upgrade to a new server version. To learn more about the Stable API feature, see the [Stable API page.](https://mongodb.com/docs/drivers/go/current/fundamentals/stable-api/#std-label-golang-stable-api) The following code shows how you can create a client that uses an Atlas connection string and the Stable API version, connect to MongoDB, and verify that the connection is successful:\n\n ` ## Tip Follow the [Quick Start guide](https://mongodb.com/docs/drivers/go/current/quick-start/#std-label-golang-connect-to-your-cluster)to retrieve your Atlas connection string. ## Note To learn about connecting to Atlas Serverless, see the[Serverless Instance Limitations page](https://www.mongodb.com/docs/atlas/reference/serverless-instance-limitations/#std-label-atlas-serverless-drivers) to identify the minimum driver version you need. ## Other Ways to Connect to MongoDB If you are connecting to a single MongoDB server instance or replica set that is not hosted on Atlas, see the following sections to find out how to connect. ### Connect to a MongoDB Server on Your Local Machine If you need to run a MongoDB server on your local machine for development purposes, you need to complete the following: 1. Download the [Community](https://www.mongodb.com/try/download/community)or [Enterprise](https://www.mongodb.com/try/download/enterprise) version of MongoDB Server.\n2. [Install and configure](https://www.mongodb.com/docs/manual/installation/#std-label-tutorials-installation) MongoDB Server.\n3. Start the server. ## Important Always secure your MongoDB server from malicious attacks. See our[Security Checklist](https://www.mongodb.com/docs/manual/administration/security-checklist/) for a list of security recommendations. After you successfully start your MongoDB server, specify your connection string in your driver connection code. If your MongoDB Server is running locally, you can use the connection string`\"mongodb://localhost:<port>\"` where `<port>` is the port number you configured your server to listen for incoming connections. If you need to specify a different hostname or IP address, see our Server Manual entry on [Connection Strings.](https://www.mongodb.com/docs/manual/reference/connection-string/) To test whether you can connect to your server, replace the connection string with your localhost connection string in the preceding code example. ### Connect to a Replica Set A MongoDB replica set deployment is a group of connected instances that store the same set of data. This configuration provides data redundancy and high data availability. To connect to a replica set deployment, specify the hostname and port numbers of each instance, separated by commas, and the replica set name as the value of the `replicaSet` parameter in the connection string. In the following example, the hostnames are `host1`, `host2`, and `host3`, and the port numbers are all `27017`. The replica set name is `myRS`. ``` mongodb://host1:27017,host2:27017,host3:27017/?replicaSet=myRS \n``` When connecting to a replica set, the driver takes the following actions by default: * Discovers all replica set members when given the address of any one member.\n* Dispatches operations to the appropriate member, such as instructions to write against the **primary**. ## Tip You only need to specify one host to connect to a replica set. However, to ensure connectivity when the specified host is unavailable, you should provide the full list of hosts. #### Direct Connection To force operations on the host designated in the connection URI, specify the `directConnection` option. Direct connections: * Don't support SRV strings.\n* Fail on writes when the specified host is not the **primary**.\n* Require you to [specify a secondary read preference](https://www.mongodb.com/docs/manual/core/read-preference/#mongodb-readmode-secondary)when the specified host isn't the **primary**. ## Connection Options This section explains several common MongoDB connection and authentication options. You can pass the connection options as parameters of the connection URI to specify the behavior of the client.\n\n For a full list of connection options, see the [ClientOptions API documentation.](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#ClientOptions) ### Single Timeout Setting You can set a single `Timeout` option on your `Client` to govern the amount of time that a single operation can take to execute using the`SetTimeout()` method or specifying the `timeoutMS` option in your connection URI string. `Database`, `Collection`,`Session`, `ChangeStream`, and `Bucket` instances elsewhere in your code inherit the `Timeout` option from `Client` if you do not set a Context for operations against the same entity. If you pass a Context into an operation with a deadline, the driver uses that Context deadline for the operation. If the context does not have a deadline, the driver derives a new Context from the given Context using the `Timeout` option set on the `Client`. ## Note ### Retries under Timeout Specification With default settings, if you set a `Timeout` option on your `Client`and your operation requires a retry, the driver retries the operation as many times as possible before the timeout expires. Once the timeout expires, the driver returns a timeout error. Versions 1.1 and later of the Go driver enable retryable reads and writes by default. See the Server manual for more information about [retryable reads](https://www.mongodb.com/docs/manual/core/retryable-reads/#std-label-retryable-reads) and [retryable writes.](https://www.mongodb.com/docs/manual/core/retryable-writes/) The following code shows how to set the `Timeout` option on a `Client`with the `SetTimeout` option: ```go opts := options.Client().SetTimeout(5 * time.Second) \n``` The following example shows how you can set a single timeout with the URI option and execute an operation that inherits this setting: ```go uri := \"mongodb://user:pass@sample.host:27017/?timeoutMS=5000\" client := mongo.Connect(uri) coll := client.Database(\"<db>\").Collection(\"<collection>\") ... coll.InsertOne(context.Background(), doc) \n``` ## Important ### Legacy Timeout Options `SocketTimeout`, `wTimeout`, `MaxTime`, and `MaxCommitTime`will be deprecated in an upcoming release. The driver ignores `MaxTime` and`MaxCommitTime` if you set `Timeout`. The driver still honors`SocketTimeout` and `wTimeout`, but these settings may result in undefined behavior. Consider using only the single timeout option instead. ← [Fundamentals](https://mongodb.com/docs/drivers/go/current/fundamentals/ \"Previous Section\")[Stable API](https://mongodb.com/docs/drivers/go/current/fundamentals/stable-api/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Write Operations * [Insert a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/insert/#std-label-golang-insert-guide)\n* [Delete a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/delete/#std-label-golang-delete-guide)\n* [Change a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/change-a-document/#std-label-golang-change-document)\n* [Update Arrays in a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/embedded-arrays/#std-label-golang-update-arrays)\n* [Insert or Update in a Single Operation](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/upsert/#std-label-golang-upsert-guide)\n* [Bulk Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/bulk/#std-label-golang-bulk) ← [Watch for Changes](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/watch/ \"Previous Section\")[Insert a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/insert/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/run-command/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Run a Command On this page * [Overview](#overview)\n* [Execute a Command](#execute-a-command)\n* [Response](#response)\n* [Example](#example)\n* [Output](#output)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to run a database command with the Go driver. You can use database commands to perform a variety of administrative and diagnostic tasks, such as fetching server statistics, initializing a replica set, or running an aggregation pipeline. ## Execute a Command To run a database command, you must specify the command and any relevant parameters in a command document, then pass the command document to a wrapper method. The command document must be an order-preserving type such as `bson.D`. The Go driver provides the following methods to run database commands: * `RunCommand()`, which returns the command response as a`SingleResult` type. You can use this method with any database command.\n* `RunCommandCursor()`, which returns the command response as a`Cursor` type. You can use this method if your database command returns multiple result documents. The following code shows how you can use the `RunCommand()`method to run the `hello` command, which returns information about the current member's role in the replica set, on a database: `| command := bson.D{{\"hello\", 1}}                              |\n| ------------------------------------------------------------ |\n| var result bson.M                                            |\n| err = db.RunCommand(context.TODO(), command).Decode(&result) | ` For a full list of database commands and corresponding parameters, see the [Additional Information section.](#std-label-addl-info-runcommand) ## Note ### Read Preference `RunCommand()` and `RunCommandCursor()` do not obey the read preference you may have set on your `Database` object elsewhere in your code. You can set a read preference for command execution by passing a `RunCmdOptions` object to either method: ```go opts := options.RunCmd().SetReadPreference(readpref.Primary()) cursor, err := db.RunCommandCursor(context.TODO(), command, opts) \n``` For more information on read preference options, see the [Modify Execution of CRUD Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-read-pref/#std-label-golang-write-read-pref)fundamentals page. ## Response Each method returns a `SingleResult` object or a cursor that contains the response from the database after the command has been executed. Each database command performs a different function, so the response content can vary across commands. However, every response contains documents with the following fields:\n\n ## Example The following code shows how you can use the `RunCommand()` method to run the `explain` command for a `count` operation on the `flowers` collection of the`plants` database. The `explain` command runs in the`\"queryPlanner\"` verbosity mode: ```go db := client.Database(\"plants\") countCommand := bson.D{{\"count\", \"flowers\"}} explainCommand := bson.D{{\"explain\", countCommand}, {\"verbosity\", \"queryPlanner\"}} var result bson.M err = db.RunCommand(context.TODO(), explainCommand).Decode(&result) \n``` ### Output In the output, you should see fields explaining the execution of the `count` operation, such as the winning plan, which is the plan selected by the query optimizer, and any rejected plans. The output also contains information about the execution of the`explain` command: ``` {     \"$clusterTime\": {         \"clusterTime\": {             \"T\": 1673969525,             \"I\": 24         },         \"signature\": {...}     },     \"command\": {         \"$db\": \"plants\",         \"count\": \"flowers\"     },     \"explainVersion\": \"1\",     \"ok\": 1,     \"operationTime\": {         \"T\": 1673969525,         \"I\": 24     },     \"queryPlanner\": {         \"indexFilterSet\": false,         \"maxIndexedAndSolutionsReached\": false,         \"maxIndexedOrSolutionsReached\": false,         \"maxScansToExplodeReached\": false,         \"namespace\": \"plants.flowers\",         \"rejectedPlans\": [],         \"winningPlan\": {             \"stage\": \"RECORD_STORE_FAST_COUNT\"         }     },     \"serverInfo\": {...},     \"serverParameters\": {         \"internalDocumentSourceGroupMaxMemoryBytes\": 104857600,         ...     } } \n``` ## Additional Information For more information about the concepts in this guide, see the following documentation: * [db.runCommand()](https://www.mongodb.com/docs/manual/reference/method/db.runCommand/)\n* [Database Commands](https://www.mongodb.com/docs/manual/reference/command/)\n* [hello Command](https://www.mongodb.com/docs/manual/reference/command/hello/)\n* [explain Command](https://www.mongodb.com/docs/manual/reference/command/explain/) To learn how to retrieve data from a cursor, see the[Access Data From a Cursor](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/cursor/#std-label-golang-cursor) fundamentals page. ### API Documentation * [RunCommand()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Database.RunCommand)\n* [RunCommandCursor()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Database.RunCommandCursor)\n* [RunCmdOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#RunCmdOptions)\n\n",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/write-read-pref/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Modify Execution of CRUD Operations On this page * [Overview](#overview)\n* [Write Concern](#write-concern)\n* [Read Concern](#read-concern)\n* [Read Preference](#read-preference)\n* [Additional Information](#additional-information) ## Overview In this guide, you can learn how to modify the way that the MongoDB Go Driver executes create, read, update, and delete (CRUD) operations using**write concern**, **read concern**, and **read preference** configurations for replica sets. You can set write concern, read concern, and read preference options at the following levels: * Client level, which sets the _default for all operation executions_unless overridden\n* Session level\n* Transaction level\n* Database level\n* Collection level\n* Query level You should read this guide if you need to customize the consistency and availability of the data in your replica sets. ## Write Concern A write concern describes the number of data-bearing members in a replica set that must acknowledge a write operation, such as an insert or update, before the operation is returned as successful. By default, the write concern requires only the primary replica set member to acknowledge the write operation before the operation is deemed successful. ### Options The MongoDB Go Driver provides the `writeconcern` package, which lets you specify the write concern for a replica set. Set the write concern using the `SetWriteConcern()` method with an `Option`type. The `Option` type has the following methods to specify the write concern:\n\n ## Tip You can alternatively specify a write concern in your connection string. See the [Server Manual entry on Write Concern Options](https://www.mongodb.com/docs/manual/reference/connection-string/#write-concern-options) for more information. ### Example The following code shows how you can specify a write concern to request acknowledgement from two replica set members. The code then creates a `Client`with this option. `| uri := \"mongodb://<hostname>:<port>\"                                         |\n| ---------------------------------------------------------------------------- |\n| wc := writeconcern.W(2)                                                      |\n| opts := options.Client().ApplyURI(uri).SetWriteConcern(writeconcern.New(wc)) |\n| client, err := mongo.Connect(context.TODO(), opts)                           | ` ## Read Concern The read concern option allows you to determine which data the client returns from a query. The default read concern level is \"local\", meaning that the client returns the instance’s most recent data, with no guarantee that the data has been written to a majority of the replica set members. ### Options The MongoDB Go Driver provides the `readconcern` package, which lets you specify the read concern for a replica set. Set the read concern using the`SetReadConcern()` method with a `ReadConcern` type. The `ReadConcern`type has the following methods to specify the read concern:\n\n ### Example The following code shows how you can specify a read concern of \"majority\". The code then selects a `Collection`with this option. ```go rc := readconcern.Majority() opts := options.Collection().SetReadConcern(rc) database := client.Database(\"myDB\") coll := database.Collection(\"myCollection\", opts) \n``` ## Read Preference The read preference option specifies how the MongoDB client routes read operations to the members of a replica set. By default, an application directs its read operations to the primary member in a replica set. Read preference consists of the read preference mode and, optionally, a[tag set list](https://www.mongodb.com/docs/rapid/core/read-preference-tags/), the[maxStalenessSeconds](https://www.mongodb.com/docs/rapid/core/read-preference-staleness/) option, and the[hedged read](https://www.mongodb.com/docs/rapid/core/read-preference-hedge-option/) option. ### Options The MongoDB Go Driver provides the `readpref` package, which lets you specify the read preference for a replica set. Set the read preference using the`SetReadPreference()` method with a `ReadPref` type. The `ReadPref`type has the following methods to specify the read preference:\n\n ## Tip You can alternatively specify a read preference in your connection string. See the [Server Manual entry on Read Preference Options](https://www.mongodb.com/docs/manual/reference/connection-string/#read-preference-options) for more information. ### Example The following code shows how you can specify a read preference to read from secondary nodes. The code then selects a `Database`with this option. ```go rp := readpref.Secondary() opts := options.Database().SetReadPreference(rp) database := client.Database(\"myDB\", opts) \n``` ## Additional Information For more information about the concepts in this guide, see the following Server documentation: * [Connection Guide](https://mongodb.com/docs/drivers/go/current/fundamentals/connection/#std-label-golang-connection-guide)\n* [Write Concern for Replica Sets](https://www.mongodb.com/docs/rapid/core/replica-set-write-concern/)\n* [Read Concern](https://www.mongodb.com/docs/rapid/reference/read-concern/)\n* [Read Preference](https://www.mongodb.com/docs/rapid/core/read-preference/) ### API Documentation * [Option](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/writeconcern#Option)\n* [WriteConcern](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/writeconcern#WriteConcern)\n* [ReadConcern](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/readconcern#ReadConcern)\n* [ReadPref](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/readpref#ReadPref) ← [Run a Command](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/run-command/ \"Previous Section\")[Aggregation](https://mongodb.com/docs/drivers/go/current/fundamentals/aggregation/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/skip/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Skip Returned Results On this page * [Overview](#overview)\n* [Skip](#skip)\n* [Aggregation](#aggregation)\n* [Additional Information](#additional-information) ## Overview In this guide, you can learn how to skip a specified number of returned results from read operations. ### Sample Data The examples in this guide use the following `Course` struct as a model for documents in the `courses` collection: `| type Course struct { |\n| -------------------- |\n| Title      string    |\n| Enrollment int32     |\n| }                    | ` To run the examples in this guide, load these documents into the`db.courses` collection with the following snippet: ```go coll := client.Database(\"db\").Collection(\"courses\") docs := []interface{}{ \tCourse{Title: \"World Fiction\", Enrollment: 35}, \tCourse{Title: \"Abstract Algebra\", Enrollment: 60}, \tCourse{Title: \"Modern Poetry\", Enrollment: 12}, \tCourse{Title: \"Plate Tectonics\", Enrollment: 45}, } result, err := coll.InsertMany(context.TODO(), docs) \n``` ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. Each document contains a description of a university course that includes the course title and maximum enrollment, corresponding to the `title` and `enrollment` fields. ## Skip To skip a specified number of returned results from a query, pass the number of documents you want to skip to the `SetSkip()` method of the read operation's options. The following read operations take an options object as a parameter: * `Find()`\n* `FindOne()`\n* `CountDocuments()`\n* `gridfs.Bucket.Find()` If the number of documents exceeds the number of matched documents for a query, that query returns no documents. ## Tip Passing in a negative number to the `SetSkip()` method results in a runtime error. Find operations return documents in a natural order that is not sorted on any field. To avoid skipping random documents, use the `SetSort()`method to sort documents on a field with unique values before setting a skip option. ### Example The following example performs a `Find()` operation with the following behavior: * Sorts results in ascending order on the `enrollment` field\n* Skips the first two documents ```go opts := options.Find().SetSort(bson.D{{\"enrollment\", 1}}).SetSkip(2) cursor, err := coll.Find(context.TODO(), bson.D{}, opts) var results []Course if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ## Aggregation You can also include the [$skip](https://www.mongodb.com/docs/manual/reference/operator/aggregation/skip/)stage in an aggregation pipeline to skip documents. ### Example The following example performs an `Aggregate()` operation with the following behavior: * Sorts results in descending order on the `enrollment` field\n* Skips the first document ```go sortStage := bson.D{{\"$sort\", bson.D{{\"enrollment\", -1}}}} skipStage := bson.D{{\"$skip\", 1}} cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{sortStage, skipStage}) if err != nil {     panic(err) } var results []Course if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ## Additional Information To learn more about the operations mentioned, see the following guides:\n\n ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation: * [Find()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.Find)\n* [FindOptions.SetSkip()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#FindOptions.SetSkip)\n* [Aggregate()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.Aggregate)\n* [CountDocuments()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.CountDocuments)\n* [gridfs.Bucket.Find()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/gridfs#Bucket.Find) ← [Sort Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/sort/ \"Previous Section\")[Limit the Number of Returned Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/limit/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/count/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Count Documents On this page * [Overview](#overview)\n* [Accurate Count](#accurate-count)\n* [Aggregation](#aggregation)\n* [Estimated Count](#estimated-count)\n* [Additional Information](#additional-information) ## Overview In this guide, you can learn how to get an [accurate](#std-label-golang-accurate-count) and [estimated](#std-label-golang-estimated-count) count of the number of documents in your collection. ### Sample Data The examples in this section use the following `Tea` struct as a model for documents in the `ratings` collection: `| type Tea struct { |\n| ----------------- |\n| Type   string     |\n| Rating int32      |\n| }                 | ` To run the examples in this guide, load the sample data into the `tea.ratings` collection with the following snippet: ```go coll := client.Database(\"tea\").Collection(\"ratings\") docs := []interface{}{ \tTea{Type: \"Masala\", Rating: 10}, \tTea{Type: \"Matcha\", Rating: 7}, \tTea{Type: \"Assam\", Rating: 4}, \tTea{Type: \"Oolong\", Rating: 9}, \tTea{Type: \"Chrysanthemum\", Rating: 5}, \tTea{Type: \"Earl Grey\", Rating: 8}, \tTea{Type: \"Jasmine\", Rating: 3}, \tTea{Type: \"English Breakfast\", Rating: 6}, \tTea{Type: \"White Peony\", Rating: 4}, } result, err := coll.InsertMany(context.TODO(), docs) \n``` ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. Each document describes a tea type and its rating. These items correspond to the `type` and `rating` fields. ## Accurate Count To count the number of documents that match your query filter, use the`CountDocuments()` method. ## Tip If you pass an empty query filter, this method returns the total number of documents in the collection. ### Modify Behavior You can modify the behavior of `CountDocuments()` by passing in a`CountOptions` type. If you don't specify any options, the driver uses its default values. The `CountOptions` type allows you to configure options with the following methods: | Method         | Description                                                                  |\n| -------------- | ---------------------------------------------------------------------------- |\n| SetCollation() | The type of language collation to use when sorting results.Default: nil      |\n| SetHint()      | The index to use to scan for documents to count.Default: nil                 |\n| SetLimit()     | The maximum number of documents to count.Default: 0                          |\n| SetMaxTime()   | The maximum amount of time that the query can run on the server.Default: nil |\n| SetSkip()      | The number of documents to skip before counting.Default: 0                   | #### Example The following example counts the number of documents where the`rating` is less than `6`: ```go filter := bson.D{{\"rating\", bson.D{{\"$lt\", 6}}}} count, err := coll.CountDocuments(context.TODO(), filter) if err != nil {     panic(err) } fmt.Printf(\"Number of documents with a rating less than six: %d\\n\", count) \n``` VIEW OUTPUT ## Aggregation\n\n ### Example The following example performs the following actions: * Counts the number of documents where the `rating` is greater than `5`\n* Assigns the count to the `counted_documents` field ```go matchStage := bson.D{{\"$match\", bson.D{{\"rating\", bson.D{{\"$gt\", 5}}}}}} countStage := bson.D{{\"$count\", \"counted_documents\"}} cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{matchStage, countStage}) if err != nil {    panic(err) } var results []bson.D if err = cursor.All(context.TODO(), &results); err != nil {    panic(err) } for _, result := range results {    fmt.Println(result) } \n``` VIEW OUTPUT ## Estimated Count To estimate the number of documents in your collection, use the`EstimatedDocumentCount()` method. ## Note The `EstimatedDocumentCount()` method is quicker than the`CountDocuments()` method because it uses the collection's metadata rather than scanning the entire collection. ### Modify Behavior You can modify the behavior of `EstimatedDocumentCount()` by passing in an `EstimatedDocumentCountOptions` type. If you don't specify any options, the driver uses its default values. The `EstimatedDocumentCountOptions` type allows you to configure options with the following methods: | Method       | Description                                                                  |\n| ------------ | ---------------------------------------------------------------------------- |\n| SetMaxTime() | The maximum amount of time that the query can run on the server.Default: nil | #### Example The following example estimates the number of documents in the`ratings` collection: ```go count, err := coll.EstimatedDocumentCount(context.TODO()) if err != nil {    panic(err) } fmt.Printf(\"Estimated number of documents in the ratings collection: %d\\n\", count) \n``` VIEW OUTPUT ## Additional Information To learn more about the operations mentioned, see the following guides: * [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document)\n* [Skip Returned Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/skip/#std-label-golang-skip)\n* [Limit the Number of Returned Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/limit/#std-label-golang-limit)\n* [Aggregation](https://mongodb.com/docs/drivers/go/current/fundamentals/aggregation/#std-label-golang-aggregation) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation: * [CountDocuments()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.CountDocuments)\n* [CountOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#CountOptions)\n* [EstimatedDocumentCount()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.EstimatedDocumentCount)\n* [EstimatedDocumentCountOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#EstimatedDocumentCountOptions) ← [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/ \"Previous Section\")[Retrieve Data](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/compound-operations/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Compound Operations On this page * [Overview](#overview)\n* [Find and Delete](#find-and-delete)\n* [Find and Update](#find-and-update)\n* [Find and Replace](#find-and-replace)\n* [Additional Information](#additional-information) ## Overview In this guide, you can learn how to perform **compound operations**. Compound operations combine a read and write operation into a single operation. If you perform a read and write operation separately, there's a chance someone else may alter the document between both operations. MongoDB prevents this by placing a write lock on the document you are modifying for the duration of your compound operation. MongoDB supports the following compound operations: * [Find and delete one document](#std-label-golang-find-and-delete)\n* [Find and update one document](#std-label-golang-find-and-update)\n* [Find and replace one document](#std-label-golang-find-and-replace) ## Tip If you need to read and write to more than one document, use[transactions.](https://mongodb.com/docs/drivers/go/current/fundamentals/transactions/#std-label-golang-transactions) ### Sample Data The examples in this guide use the following `Course` struct as a model for documents in the `courses` collection: `| type Course struct { |\n| -------------------- |\n| Title      string    |\n| Enrollment int32     |\n| }                    | ` To run the examples in this guide, load the sample data into the`db.courses` collection with the following snippet: ```go coll := client.Database(\"db\").Collection(\"courses\") docs := []interface{}{ \tCourse{Title: \"Representation Theory\", Enrollment: 40}, \tCourse{Title: \"Early Modern Philosophy\", Enrollment: 25}, \tCourse{Title: \"Animal Communication\", Enrollment: 18}, } result, err := coll.InsertMany(context.TODO(), docs) \n``` Each document contains a description of a university course that includes the course title and maximum enrollment, corresponding to the `title` and `enrollment` fields in each document. ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. ## Find and Delete The `FindOneAndDelete()` method finds the first document that matches the specified query filter and deletes it. The method returns a`SingleResult` containing the deleted document. ## Note The `FindOneAndDelete()` method is an atomic operation, which means it prevents any other write operations from changing the matching document until it completes. The `deleteOne()` method is also an atomic operation, but differs from`FindOneAndDelete()` in that you cannot specify a sort order for the matched documents. If you don't need to find and delete a document in a single transaction, you can call the `findOne()` method followed by the `deleteOne()` method. ### Modify Behavior You can modify the behavior of the `FindOneAndDelete()` method by passing in a `FineOneAndDeleteOptions`. If you don't specify a`FineOneAndDeleteOptions`, the driver uses the default values for each option. The `FineOneAndDeleteOptions` type allows you to configure options with the following methods:\n\n #### Example The following example uses the `FindOneAndDelete()` method to match and delete the first document where the `enrollment`field value is less than 20: ```go filter := bson.D{{\"enrollment\", bson.D{{\"$lt\", 20}}}} var deletedDoc Course err := coll.FindOneAndDelete(context.TODO(), filter).Decode(&deletedDoc) if err != nil {    panic(err) } res, _ := bson.MarshalExtJSON(deletedDoc, false, false) fmt.Println(string(res)) \n``` VIEW OUTPUT ## Find and Update The `FindOneAndUpdate()` method finds the first document that matches the specified query filter and updates it according to the update document. The method returns a `SingleResult` containing the matched document. ## Note The `FindOneAndUpdate()` method is an atomic operation, which means it prevents any other write operations from changing the matching document until it completes. The `updateOne()` method is also an atomic operation, but differs from`FindOneAndUpdate()` in that you cannot specify a sort order for the matched documents. If you don't need to find and update a document in a single transaction, you can call the `findOne()` method followed by the `updateOne()` method. ### Modify Behavior You can modify the behavior of the `FindOneAndUpdate()` method by passing in a `FineOneAndUpdateOptions`. If you don't specify a`FineOneAndUpdateOptions`, the driver uses the default values for each option. The `FineOneAndUpdateOptions` type allows you to configure options with the following methods:\n\n #### Example The following example uses the `FindOneAndUpdate()` method to perform the following actions in order: * Matches the first document where the `title` field value includes \"Modern\"\n* Updates the matched document's `enrollment` field value to `32`\n* Returns the updated document ```go filter := bson.D{{\"title\", bson.D{{\"$regex\", \"Modern\"}}}} update := bson.D{{\"$set\", bson.D{{\"enrollment\", 32}}}} opts := options.FindOneAndUpdate().SetReturnDocument(options.After) var updatedDoc Course err := coll.FindOneAndUpdate(context.TODO(), filter, update, opts).Decode(&updatedDoc) if err != nil {     panic(err) } res, _ := bson.MarshalExtJSON(updatedDoc, false, false) fmt.Println(string(res)) \n``` VIEW OUTPUT ## Find and Replace The `FindOneAndReplace()` method finds the first document that matches the specified query filter and replaces it with the replacement document. The method returns a `SingleResult` containing the matched document. ## Note This method differs from the `ReplaceOne()` method.`FindOneAndReplace()` performs a find and replace as a single operation, and eliminates the possibility of someone altering a document between both operations. ### Modify Behavior You can modify the behavior of the `FindOneAndReplace()` method by passing in a `FineOneAndReplaceOptions`. If you don't specify a`FineOneAndReplaceOptions`, the driver uses the default values for each option. The `FineOneAndReplaceOptions` type allows you to configure options with the following methods:\n\n #### Example The following example uses the `FindOneAndReplace()` method to perform the following actions in order: * Matches the first document where the `title` is \"Representation Theory\"\n* Replaces the matched document with a new document where the `title`is \"Combinatorial Theory\" and the `enrollment` is `35` ```go filter := bson.D{{\"title\", \"Representation Theory\"}} replacement := Course{Title: \"Combinatorial Theory\", Enrollment: 35} var outdatedDoc Course err := coll.FindOneAndReplace(context.TODO(), filter, replacement).Decode(&previousDoc) if err != nil {     panic(err) } res, _ := bson.MarshalExtJSON(outdatedDoc, false, false) fmt.Println(string(res)) \n``` VIEW OUTPUT ## Additional Information To learn more about performing the operations mentioned, see the following guides: * [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document)\n* [Retrieve Data](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/#std-label-golang-retrieve)\n* [Delete a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/delete/#std-label-golang-delete-guide)\n* [Change a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/change-a-document/#std-label-golang-change-document)\n* [Access Data in a SingleResult](https://mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-bson-unmarshalling) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation: * [FindOneAndDelete()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.FindOneAndDelete)\n* [FindOneAndDeleteOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#FindOneAndDeleteOptions)\n* [FindOneAndUpdate()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.FindOneAndUpdate)\n* [FindOneAndUpdateOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#FindOneAndUpdateOptions)\n* [FindOneAndReplace()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.FindOneAndReplace)\n* [FindOneAndReplaceOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#FindOneAndReplaceOptions) ← [Bulk Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/bulk/ \"Previous Section\")[Run a Command](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/run-command/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/limit/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Limit the Number of Returned Results On this page * [Overview](#overview)\n* [Limit](#limit)\n* [Multiple Options](#multiple-options)\n* [Aggregation](#aggregation)\n* [Additional Information](#additional-information) ## Overview In this guide, you can learn how to limit the number of documents returned from a read operation. ### Sample Data The examples in this guide use the following `Course` struct as a model for documents in the `courses` collection: `| type Course struct { |\n| -------------------- |\n| Title      string    |\n| Enrollment int32     |\n| }                    | ` To run the examples in this guide, load the sample data into the`db.courses` collection with the following snippet: ```go coll := client.Database(\"db\").Collection(\"courses\") docs := []interface{}{ \tCourse{Title: \"Romantic Era Music\", Enrollment: 15}, \tCourse{Title: \"Concepts in Topology\", Enrollment: 35}, \tCourse{Title: \"Ancient Greece\", Enrollment: 100}, \tCourse{Title: \"Physiology I\", Enrollment: 60}, } result, err := coll.InsertMany(context.TODO(), docs) \n``` ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. Each document contains a description of a university course that includes the course title and maximum enrollment, corresponding to the `title` and `enrollment` fields in each document. ## Limit To limit the number of documents returned from a query, pass the number of documents you want returned to the `SetLimit()` method of the read operation's options. The following read operations take an options object as a parameter: * `Find()`\n* `CountDocuments()`\n* `gridfs.Bucket.Find()` If the limit is `0` or exceeds the number of matched documents, the method returns all the documents. If the limit is a negative number, the method uses the absolute value of the negative number as the limit and closes the cursor after retrieving documents. ### Example The following example shows how to return two documents that have an`enrollment` field value greater than 20: ```go filter := bson.D{{\"enrollment\", bson.D{{\"$gt\", 20}}}} opts := options.Find().SetLimit(2) cursor, err := coll.Find(context.TODO(), filter, opts) var results []Course if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ## Multiple Options The driver performs the limit behavior last regardless of the order in which you set any other options. ### Example The following example performs a `Find()` operation with the following behavior: * Sorts the results in descending order on the `enrollment` field\n* Skips the first document\n* Returns the first two of the remaining documents ```go filter := bson.D{} opts := options.Find().SetSort(bson.D{{\"enrollment\", -1}}).SetLimit(2).SetSkip(1) cursor, err := coll.Find(context.TODO(), filter, opts) var results []Course if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ## Tip Using any of the following option configurations also produces the same result: ```go opts := options.Find().SetSort(bson.D{{\"enrollment\", -1}}).SetSkip(1).SetLimit(2) opts := options.Find().SetLimit(2).SetSort(bson.D{{\"enrollment\", -1}}).SetSkip(1)\n\n opts := options.Find().SetSkip(1).SetSort(bson.D{{\"enrollment\", -1}}).SetLimit(2) opts := options.Find().SetSkip(1).SetLimit(2).SetSort(bson.D{{\"enrollment\", -1}}) \n``` ## Aggregation You can also include the [$limit](https://www.mongodb.com/docs/manual/reference/operator/aggregation/limit/)stage to specify a limit in an aggregation pipeline. ### Example The following example shows how to return three documents: ```go limitStage := bson.D{{\"$limit\", 3}} cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{limitStage}) if err != nil {     panic(err) } var results []Course if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ## Additional Information To learn more about the operations mentioned, see the following guides: * [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document)\n* [Retrieve Data](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/#std-label-golang-retrieve)\n* [Sort Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/sort/#std-label-golang-sort-results)\n* [Skip Returned Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/skip/#std-label-golang-skip)\n* [Aggregation](https://mongodb.com/docs/drivers/go/current/fundamentals/aggregation/#std-label-golang-aggregation) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation: * [FindOptions.SetLimit()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#FindOptions.SetLimit)\n* [FindOptions.SetSort()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#FindOptions.SetSort)\n* [FindOptions.SetSkip()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#FindOptions.SetSkip)\n* [Aggregate()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.Aggregate)\n* [CountDocuments()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.CountDocuments)\n* [gridfs.Bucket.Find()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/gridfs#Bucket.Find) ← [Skip Returned Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/skip/ \"Previous Section\")[Specify Which Fields to Return](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/project/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/text/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Search Text On this page * [Overview](#overview)\n* [Sample Data](#sample-data)\n* [Text Index](#text-index)\n* [Text Search](#text-search)\n* [Search by a Term](#search-by-a-term)\n* [Search by a Phrase](#search-by-a-phrase)\n* [Search with Terms Excluded](#search-with-terms-excluded)\n* [Sort by Relevance](#sort-by-relevance)\n* [Aggregation](#aggregation)\n* [Match a Search Term](#match-a-search-term)\n* [Sort by Relevance](#sort-by-relevance-1)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to run a [text search.](#std-label-golang-text-search) ## Important MongoDB text search is different than [Atlas Search.](https://www.mongodb.com/docs/atlas/atlas-search/) ### Sample Data The examples in this guide use the following `Dish` struct as a model for documents in the `menu` collection: `| type Dish struct { |\n| ------------------ |\n| Name        string |\n| Description string |\n| }                  | ` To run the examples in this guide, load the sample data into the`db.menu` collection with the following snippet: ```go coll := client.Database(\"db\").Collection(\"menu\") docs := []interface{}{ \tDish{Name: \"Shepherd’s Pie\", Description: \"A vegetarian take on the classic dish that uses lentils as a base. Serves 2.\"}, \tDish{Name: \"Green Curry\", Description: \"A flavorful Thai curry, made vegetarian with fried tofu. Vegetarian and vegan friendly.\"}, \tDish{Name: \"Herbed Whole Branzino\", Description: \"Grilled whole fish stuffed with herbs and pomegranate seeds. Serves 3-4.\"}, \tDish{Name: \"Kale Tabbouleh\", Description: \"A bright, herb-based salad. A perfect starter for vegetarians and vegans.\"}, \tDish{Name: \"Garlic Butter Trout\", Description: \"Baked trout seasoned with garlic, lemon, dill, and, of course, butter. Serves 2.\"}, } result, err := coll.InsertMany(context.TODO(), docs) \n``` Each document contains the `name` and `description` of a dish on a restaurant's menu. ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. ### Text Index You must create a **text index** before running a text search. A text index specifies the string or string array field on which to run a text search. The examples in the following sections run text searches on the`description` field of documents in the `menu` collection. To enable text searches on the `description` field, create a text index with the following snippet: ```go model := mongo.IndexModel{Keys: bson.D{{\"description\", \"text\"}}} name, err := coll.Indexes().CreateOne(context.TODO(), model) if err != nil { \tpanic(err) } fmt.Println(\"Name of index created: \" + name) \n``` ## Text Search A text search retrieves documents that contain a **term** or a**phrase** in the text indexed fields. A term is a sequence of characters that excludes whitespace characters. A phrase is a sequence of terms with any number of whitespace characters. To perform a text search, use the `$text` evaluation query operator, followed by the `$search` field in your query filter. The `$text` operator performs a text search on the text indexed fields. The `$search` field specifies the text to search in the text indexed fields. Query filters for text searches use the following format: ```go filter := bson.D{{\"$text\", bson.D{{\"$search\", \"<text to search>\"}}}} \n``` ### Search by a Term\n\n ## Note When searching for multiple terms, the `Find()` method returns documents with at least one of the terms in text indexed fields. #### Example The following example runs a text search for descriptions that contain the term \"herb\": ```go filter := bson.D{{\"$text\", bson.D{{\"$search\", \"herb\"}}}} cursor, err := coll.Find(context.TODO(), filter) if err != nil {    panic(err) } var results []Dish if err = cursor.All(context.TODO(), &results); err != nil {    panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ## Tip Although the search term was \"herb\", the method also matches descriptions containing \"herbs\" because a MongoDB text index uses suffix stemming to match similar words. To learn more about how MongoDB matches terms, see [Index Entries.](https://www.mongodb.com/docs/manual/core/index-text/#index-entries) ### Search by a Phrase To search for a phrase, specify the phrase with escaped quotes as a string in your query filter. If you don't add escaped quotes around the phrase, the `Find()` method runs a [term search.](#std-label-golang-term-search) ## Tip Escaped quotes are a backslash character followed by a double quote character. #### Example The following example runs a text search for descriptions that contain the phrase \"serves 2\": ```go filter := bson.D{{\"$text\", bson.D{{\"$search\", \"\\\"serves 2\\\"\"}}}} cursor, err := coll.Find(context.TODO(), filter) if err != nil {    panic(err) } var results []Dish if err = cursor.All(context.TODO(), &results); err != nil {    panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ### Search with Terms Excluded For each term or phrase you want to exclude from your text search, specify the term or phrase prefixed with a minus sign as a string in your query filter. ## Important You must search for at least one term if you want to exclude terms from your search. If you don't search for any terms, the`Find()` method doesn't return any documents. #### Example The following example runs a text search for descriptions that contain the term \"vegan\", but do not contain the term \"tofu\": ```go filter := bson.D{{\"$text\", bson.D{{\"$search\", \"vegan -tofu\"}}}} cursor, err := coll.Find(context.TODO(), filter) if err != nil {    panic(err) } var results []Dish if err = cursor.All(context.TODO(), &results); err != nil {    panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ### Sort by Relevance A text search assigns a numerical text score to indicate how closely each result matches the string in your query filter. To reveal the text score in your output, use a projection to retrieve the `textScore`metadata. You can sort the text score in descending order by specifying a sort on the `textScore` metadata. #### Example The following example performs the following actions: * Runs a text search for descriptions that contain the term \"vegetarian\"\n* Sorts the results in descending order based on their text score\n* Includes only the `name` and `score` fields in the final output document ```go filter := bson.D{{\"$text\", bson.D{{\"$search\", \"vegetarian\"}}}} sort := bson.D{{\"score\", bson.D{{\"$meta\", \"textScore\"}}}} projection := bson.D{{\"name\", 1}, {\"score\", bson.D{{\"$meta\", \"textScore\"}}}, {\"_id\", 0}} opts := options.Find().SetSort(sort).SetProjection(projection) cursor, err := coll.Find(context.TODO(), filter, opts) if err != nil {\n\n } var results []bson.D if err = cursor.All(context.TODO(), &results); err != nil {    panic(err) } for _, result := range results {    fmt.Println(result) } \n``` VIEW OUTPUT ## Aggregation You can also include the `$text` evaluation query operator in the[$match](https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/) stage to perform a text search in an aggregation pipeline. ### Match a Search Term The following example runs a text search for descriptions that contain the term \"herb\": ```go matchStage := bson.D{{\"$match\", bson.D{{\"$text\", bson.D{{\"$search\", \"herb\"}}}}}} cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{matchStage}) if err != nil {    panic(err) } var results []Dish if err = cursor.All(context.TODO(), &results); err != nil {    panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ### Sort by Relevance The following example performs the following actions: * Runs a text search for descriptions that contain the term \"vegetarian\"\n* Sorts the results in descending order based on their text score\n* Includes only the `name` and `score` fields in the final output document ```go matchStage := bson.D{{\"$match\", bson.D{{\"$text\", bson.D{{\"$search\", \"vegetarian\"}}}}}} sortStage := bson.D{{\"$sort\", bson.D{{\"score\", bson.D{{ \"$meta\", \"textScore\" }}}}}} projectStage := bson.D{{\"$project\", bson.D{{\"name\", 1}, {\"score\", bson.D{{ \"$meta\", \"textScore\" }}}, {\"_id\", 0}}}} cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{matchStage, sortStage, projectStage}) if err != nil {    panic(err) } var results []bson.D if err = cursor.All(context.TODO(), &results); err != nil {    panic(err) } for _, result := range results {    fmt.Println(result) } \n``` VIEW OUTPUT ## Additional Information To learn more about the operations mentioned, see the following guides: * [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document)\n* [Sort Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/sort/#std-label-golang-sort-results)\n* [Specify Which Fields to Return](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/project/#std-label-golang-project)\n* [Text Indexes](https://www.mongodb.com/docs/manual/core/index-text/)\n* [$text](https://www.mongodb.com/docs/manual/reference/operator/query/text/)\n* [$meta](https://www.mongodb.com/docs/manual/reference/operator/aggregation/meta/)\n* [Aggregation](https://mongodb.com/docs/drivers/go/current/fundamentals/aggregation/#std-label-golang-aggregation) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation:\n\n ← [Specify Which Fields to Return](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/project/ \"Previous Section\")[Watch for Changes](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/watch/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/sort/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Sort Results On this page * [Overview](#overview)\n* [Sample Data](#sample-data)\n* [Sort Direction](#sort-direction)\n* [Ascending](#ascending)\n* [Descending](#descending)\n* [Handling Ties](#handling-ties)\n* [Aggregation](#aggregation)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to specify the order of your results from read operations. ### Sample Data The examples in this guide use the following `Course` struct as a model for documents in the `courses` collection: `| type Course struct { |\n| -------------------- |\n| Title      string    |\n| Enrollment int32     |\n| }                    | ` To run the examples in this guide, load the sample data into the`db.courses` collection with the following snippet: ```go coll := client.Database(\"db\").Collection(\"courses\") docs := []interface{}{ \tCourse{Title: \"World Fiction\", Enrollment: 35}, \tCourse{Title: \"Abstract Algebra\", Enrollment: 60}, \tCourse{Title: \"Modern Poetry\", Enrollment: 12}, \tCourse{Title: \"Plate Tectonics\", Enrollment: 35}, } result, err := coll.InsertMany(context.TODO(), docs) \n``` ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. Each document contains a description of a university course that includes the course title and maximum enrollment, corresponding to the `title` and `enrollment` fields in each document. ## Sort Direction To specify the order of your results, pass an interface specifying the sort fields and direction to the `SetSort()` method of a read operation's options. The following read operations take options as a parameter: * `Find()`\n* `FindOne()`\n* `FindOneAndDelete()`\n* `FindOneAndUpdate()`\n* `FindOneAndReplace()`\n* `gridfs.Bucket.Find()` You can set an **ascending** or **descending** sort direction. ### Ascending An ascending sort orders your results from smallest to largest. To specify this sort, pass the field you want to sort by and `1` to the`SetSort()` method. ## Tip With an ascending sort, the method orders values of type`Boolean` from `false` _to_ `true`, `String` type values from _a to z_ and numeric type values from _negative infinity to positive infinity_. #### Example The following example specifies an ascending sort on the `enrollment` field: ```go filter := bson.D{} opts := options.Find().SetSort(bson.D{{\"enrollment\", 1}}) cursor, err := coll.Find(context.TODO(), filter, opts) var results []Course if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ### Descending A descending sort orders your results from largest to smallest. To specify this sort, pass the field you want to sort by and `-1` to the`SetSort()` method. ## Tip With an descending sort, the method orders values of type`Boolean` from `true` _to_ `false`, `String` type values from _z to a_ and numeric type values from _positive infinity to negative infinity_. #### Example The following example specifies a descending sort on the `enrollment` field: ```go filter := bson.D{} opts := options.Find().SetSort(bson.D{{\"enrollment\", -1}}) cursor, err := coll.Find(context.TODO(), filter, opts) var results []Course if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {\n\n     fmt.Println(string(res)) } \n``` VIEW OUTPUT ### Handling Ties A tie occurs when two or more documents have identical values in the field you are using to sort your results. MongoDB does not guarantee order if ties occur. For example, in the sample data, there is a tie for `enrollment` in the following documents: ``` {\"Title\":\"World Fiction\",\"Enrollment\":35} {\"Title\":\"Plate Tectonics\",\"Enrollment\":35} \n``` You can sort on additional fields to resolve ties in the original sort. If you want to guarantee a specific order for documents, you should select sort fields that will not result in additional ties. #### Example The following example specifies a descending sort on the `enrollment` field, then an ascending sort on the `title` field: ```go filter := bson.D{} opts := options.Find().SetSort(bson.D{{\"enrollment\", -1}, {\"title\", 1}}) cursor, err := coll.Find(context.TODO(), filter, opts) var results []Course if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ### Aggregation You can also include the [$sort](https://www.mongodb.com/docs/manual/reference/operator/aggregation/sort/)stage to specify a sort in an aggregation pipeline. #### Example The following example specifies a descending sort on the `enrollment`field, then an ascending sort on the `title` field: ```go sortStage := bson.D{{\"$sort\", bson.D{{\"enrollment\", -1}, {\"title\", 1}}}} cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{sortStage}) if err != nil {     panic(err) } var results []Course if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ## Additional Information To learn more about the operations mentioned, see the following guides: * [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document)\n* [Retrieve Data](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/#std-label-golang-retrieve)\n* [Compound Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/compound-operations/#std-label-golang-compound-operations)\n* [Aggregation](https://mongodb.com/docs/drivers/go/current/fundamentals/aggregation/#std-label-golang-aggregation) To learn about sorting text scores from your text search, see [Search Text.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/text/#std-label-golang-search-text) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation:\n\n ← [Retrieve Distinct Values](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/distinct/ \"Previous Section\")[Skip Returned Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/skip/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Specify a Query On this page * [Overview](#overview)\n* [Literal Values](#literal-values)\n* [Comparison](#comparison)\n* [Logical](#logical)\n* [Element](#element)\n* [Evaluation](#evaluation)\n* [Array](#array)\n* [Bitwise](#bitwise)\n* [Additional Information](#additional-information) ## Overview In this guide, you can learn how to specify a query to match a subset of documents. To match a subset of documents, specify a **query filter** containing your **match criteria**. Match criteria consist of the fields and values you want present in a document. A query filter contains at least one set of match criteria to determine which documents to include in the resulting set. In a query filter, you can match fields with [literal values](#std-label-golang-literal-values) or with [query operators](#std-label-golang-query-operators). Query operators allow you to perform mathematical or logical operations to locate documents within a collection. Match criteria with literal values use the following format: `| filter := bson.D{{\"<field>\", \"<value>\"}} |\n| ---------------------------------------- | ` Match criteria with a query operator use the following format: ```go filter := bson.D{{\"<field>\", bson.D{{\"<operator>\", \"<value>\"}}}} \n``` The following sections use [literal values](#std-label-golang-literal-values)and [query operators](#std-label-golang-query-operators) with the `Find()`method to match a subset of documents. ### Sample Data The examples in this section use the following `Tea` struct as a model for documents in the `ratings` collection: ```go type Tea struct { \tType   string \tRating int32 \tVendor []string `bson:\"vendor,omitempty\" json:\"vendor,omitempty\"` } \n``` The `omitempty` [struct tag](https://mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-struct-tags) omits the corresponding field from the inserted document when left empty. To run the examples in this guide, load the sample data into the`tea.ratings` collection with the following snippet: ```go coll := client.Database(\"tea\").Collection(\"ratings\") docs := []interface{}{ \tTea{Type: \"Masala\", Rating: 10, Vendor: []string{\"A\", \"C\"}}, \tTea{Type: \"English Breakfast\", Rating: 6}, \tTea{Type: \"Oolong\", Rating: 7, Vendor: []string{\"C\"}}, \tTea{Type: \"Assam\", Rating: 5}, \tTea{Type: \"Earl Grey\", Rating: 8, Vendor: []string{\"A\", \"B\"}}, } result, err := coll.InsertMany(context.TODO(), docs) \n``` ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. Each document describes a tea type, its rating, and the vendors that carry that variety. These items correspond to the `type`, `rating`, and`vendor` fields. ## Literal Values Literal value query filters return documents with an exact match to your match criteria. ## Tip If you specify an empty query filter, CRUD operations match all the documents in a collection. ### Example The following example matches documents where the `type` is \"Oolong\": ```go filter := bson.D{{\"type\", \"Oolong\"}} cursor, err := coll.Find(context.TODO(), filter) if err != nil {     panic(err) } var results []Tea if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ## Tip Literal value queries return the same value as the `$eq`comparison operator. For example, the following query filters produce the same result: ```go\n\n \n``` ```go filter := bson.D{{\"type\", bson.D{{\"$eq\", \"Oolong\"}}}} \n``` ## Comparison Comparison operators analyze the value in a document against the specified value in your match criteria. Common comparison operators include`$gt` for \"greater than\" comparisons, `$lte` for \"less than or equal to\" comparisons, and `$ne` for \"not equal to\" comparisons. ### Example The following example matches documents where the `rating` is less than `7`: ```go filter := bson.D{{\"rating\", bson.D{{\"$lt\", 7}}}} cursor, err := coll.Find(context.TODO(), filter) if err != nil {    panic(err) } var results []Tea if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT For a full list of comparison operators, see the [Comparison Query Operators](https://www.mongodb.com/docs/manual/reference/operator/query-comparison/) page. ## Logical Logical operators require at least two match criteria. They check if documents meet all, at lease one, or none of the specified criteria. Common logical operators include `$and` where all match criteria must be true, and `$or` where at least one of the match criteria must be true. ### Example The following example matches documents where the `rating` is greater than `7` and less than or equal to `10`: ```go filter := bson.D{    {\"$and\",       bson.A{          bson.D{{\"rating\", bson.D{{\"$gt\", 7}}}},          bson.D{{\"rating\", bson.D{{\"$lte\", 10}}}},       },    }, } cursor, err := coll.Find(context.TODO(), filter) if err != nil {    panic(err) } var results []Tea if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT For a full list of logical operators, see the [Logical Query Operators](https://www.mongodb.com/docs/manual/reference/operator/query-logical/) page. ## Tip Multiple match criteria resembling an `$eq` comparison operator in a literal query return the same value as the `$and` logical operator. For example, the following query filters produce the same result: ```go filter := bson.D{{\"type\", \"Oolong\"}, {\"rating\", 7}} \n``` ```go filter := bson.D{   {\"$and\",     bson.A{       bson.D{{\"type\", \"Oolong\"}},       bson.D{{\"rating\", 7}},     }}, } \n``` ## Element Element operators check for the presence or type of the specified field. ### Example The following example matches documents where the `vendor` field does not exist: ```go filter := bson.D{{\"vendor\", bson.D{{\"$exists\", false}}}} cursor, err := coll.Find(context.TODO(), filter) if err != nil {    panic(err) } var results []Tea if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT For a full list of element operators, see the [Element Query Operators](https://www.mongodb.com/docs/manual/reference/operator/query-element/) page. ## Evaluation\n\n ### Example The following example matches documents where the `type` begins with the letter \"E\": ```go filter := bson.D{{\"type\", bson.D{{\"$regex\", \"^E\"}}}} cursor, err := coll.Find(context.TODO(), filter) if err != nil {    panic(err) } var results []Tea if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT For a full list of evaluation operators, see the [Evaluation Query Operators](https://www.mongodb.com/docs/manual/reference/operator/query-evaluation/) page. ## Array Array operators check the values or amount of elements in an array field. ### Example The following example matches documents where the `vendor` contains \"C\": ```go filter := bson.D{{\"vendor\", bson.D{{\"$all\", bson.A{\"C\"}}}}} cursor, err := coll.Find(context.TODO(), filter) if err != nil {    panic(err) } var results []Tea if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT For a full list of array operators, see the [Array Query Operators](https://www.mongodb.com/docs/manual/reference/operator/query-array/) page. ## Bitwise Bitwise operators convert a numeric field from a base-10 (decimal) number into the corresponding base-2 (binary) number. They check whether the value in a document has the same bits set as the value in your match criteria. ### Example The following example matches documents where the `rating` has the same bits set as `6` (which is \"00000110\"): ```go filter := bson.D{{\"rating\", bson.D{{\"$bitsAllSet\", 6}}}} cursor, err := coll.Find(context.TODO(), filter) if err != nil {    panic(err) } var results []Tea if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT For a full list of bitwise operators, see the [Bitwise Query Operators](https://www.mongodb.com/docs/manual/reference/operator/query-bitwise/) page. ## Additional Information ### API Documentation To learn more about any of the methods or types used in this guide, see the following API Documentation: * [Find()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.Find)\n* [Cursor](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Cursor) ← [Read Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/ \"Previous Section\")[Count Documents](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/count/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/watch/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Watch for Changes On this page * [Overview](#overview)\n* [Sample Data](#sample-data)\n* [Open a Change Stream](#open-a-change-stream)\n* [Example](#example)\n* [Modify the Change Stream Output](#modify-the-change-stream-output)\n* [Example](#example-1)\n* [Modify the Behavior of Watch()](#modify-the-behavior-of-watch--)\n* [Pre- and Post-Images](#pre--and-post-images)\n* [Example](#example-2)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to monitor document changes with a change stream. A change stream outputs new change events, providing access to real-time data changes. You can open a change stream on a collection, database, or client object. ### Sample Data To run the examples in this guide, load these documents into the`db.courses` collection with the following snippet: `| coll := client.Database(\"db\").Collection(\"courses\")  |\n| ---------------------------------------------------- |\n| docs := []interface{}{                               |\n| Course{Title: \"World Fiction\", Enrollment: 35},      |\n| Course{Title: \"Abstract Algebra\", Enrollment: 60},   |\n| Course{Title: \"Modern Poetry\", Enrollment: 12},      |\n| Course{Title: \"Plate Tectonics\", Enrollment: 35},    |\n| }                                                    |\n| result, err := coll.InsertMany(context.TODO(), docs) | ` ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. Each document contains a description of a university course that includes the course title and maximum enrollment, corresponding to the `title` and `enrollment` fields in each document. ## Note Each example output shows truncated `_data`, `clusterTime`, and`ObjectID` values because the driver generates them uniquely. ## Open a Change Stream To open a change stream, use the `Watch()` method. The `Watch()` method requires a context parameter and a pipeline parameter. To return all changes, pass in an empty `Pipeline` object. ### Example The following example opens a change stream on the `db.courses` collection and outputs all changes: ```go coll := client.Database(\"db\").Collection(\"courses\") // open a change stream with an empty pipeline parameter changeStream, err := coll.Watch(context.TODO(), mongo.Pipeline{}) if err != nil {    panic(err) } defer changeStream.Close(context.TODO()) // iterate over the cursor to print the change-stream events for changeStream.Next(context.TODO()) {    fmt.Println(changeStream.Current) } \n``` If you modify the `db.courses` collection in a separate program or shell, this code will print your changes as they occur. Inserting a document with a `title` value of \"Advanced Screenwriting\" and an `enrollment` value of `20`results in the following change-stream event: ``` map[_id:map[_data:...] clusterTime: {...} documentKey:map[_id:ObjectID(\"...\")] fullDocument:map[_id:ObjectID(\"...\") enrollment:20 title:Advanced Screenwriting] ns: map[coll:courses db:db] operationType:insert] \n``` ## Modify the Change Stream Output Use the pipeline parameter to modify the change stream output. This parameter allows you to only watch for certain change events. Format the pipeline parameter as an array of documents, with each document representing an aggregation stage. You can use the following pipeline stages in this parameter:\n\n ### Example The following example opens a change stream on the `db` database, but only watches for new delete operations: ```go db := client.Database(\"db\") pipeline := bson.D{{\"$match\", bson.D{{\"operationType\", \"delete\"}}}} changeStream, err := db.Watch(context.TODO(), mongo.Pipeline{pipeline}) \n``` ## Note The `Watch()` method was called on the `db` database, so the code outputs new delete operations in any collection within this database. ## Modify the Behavior of `Watch()` Use the `options` parameter to modify the behavior of the `Watch()` method. You can specify the following options for the `Watch()` method: * `ResumeAfter`\n* `StartAfter`\n* `FullDocument`\n* `FullDocumentBeforeChange`\n* `BatchSize`\n* `MaxAwaitTime`\n* `Collation`\n* `StartAtOperationTime`\n* `Comment`\n* `ShowExpandedEvents`\n* `StartAtOperationTime`\n* `Custom`\n* `CustomPipeline` For more information on these options, visit the[MongoDB Server manual.](https://www.mongodb.com/docs/manual/reference/method/db.collection.watch/) ### Pre- and Post-Images When you perform any CRUD operation on a collection, by default, the corresponding change event document contains only the delta of the fields modified by the operation. You can see the full document before and after a change, in addition to the delta, by specifying settings in the `options`parameter of the `Watch()` method. If you want to see a document's post-image, the full version of the document after a change, set the `FullDocument` field of the`options` parameter to one of the following values: * `UpdateLookup`: The change event document includes a copy of the entire changed document.\n* `WhenAvailable`: The change event document includes a post-image of the modified document for change events if the post-image is available.\n* `Required`: The output is the same as for `WhenAvailable`, but the driver raises a server-side error if the post-image is not available. If you want to see a document's pre-image, the full version of the document before a change, set the `FullDocumentBeforeChange` field of the`options` parameter to one of the following values: * `WhenAvailable`: The change event document includes a pre-image of the modified document for change events if the pre-image is available.\n* `Required`: The output is the same as for `WhenAvailable`, but the driver raises a server-side error if the pre-image is not available. ## Important To access document pre- and post-images, you must enable`changeStreamPreAndPostImages` for the collection. See the[MongoDB Server manual](https://www.mongodb.com/docs/manual/reference/command/collMod/#change-streams-with-document-pre--and-post-images) for instructions and more information. ## Note There is no pre-image for an inserted document and no post-image for a deleted document. ### Example The following example calls the `Watch()` method on the `db.courses` collection. It specifies a value for the `FullDocument` field of the `options` parameter to output a copy of the entire modified document, instead of only the changed fields: ```go coll := client.Database(\"db\").Collection(\"courses\") opts := options.ChangeStream().SetFullDocument(options.UpdateLookup) changeStream, err := coll.Watch(context.TODO(), mongo.Pipeline{}, opts) if err != nil {   panic(err) } defer changeStream.Close(context.TODO()) for changeStream.Next(context.TODO()) {   fmt.Println(changeStream.Current) } \n``` Updating the `enrollment` value of the document with the`title` of \"World Fiction\" from `35` to `30` results in the following change-stream event: ``` {\"_id\": {\"_data\": \"...\"},\"operationType\": \"update\",\"clusterTime\": {\"$timestamp\": {\"t\":\"...\",\"i\":\"...\"}},\"fullDocument\": {\"_id\": {\"$oid\":\"...\"},\"title\": \"World Fiction\",\"enrollment\":\n\n {\"$oid\":\"...\"}}, \"updateDescription\": {\"updatedFields\": {\"enrollment\": {\"$numberInt\":\"30\"}}, \"removedFields\": [],\"truncatedArrays\": []}} \n``` Without specifying the `FullDocument` option, the same update operation no longer outputs the `\"fullDocument\"` value in the change event document. ## Additional Information For a runnable example of a change stream, see [Watch for Changes.](https://mongodb.com/docs/drivers/go/current/usage-examples/watch/#std-label-golang-watch) For more information on change streams, see [Change Streams.](https://www.mongodb.com/docs/manual/changeStreams/) ### API Documentation To learn more about the `Watch()` method, visit the following API documentation links: * [Watch() for collections](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.Watch)\n* [Watch() for databases](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Database.Watch)\n* [Watch() for clients](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Client.Watch) ← [Search Text](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/text/ \"Previous Section\")[Write Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/cursor/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Access Data From a Cursor On this page * [Overview](#overview)\n* [Sample Cursor](#sample-cursor)\n* [Retrieve Documents Individually](#retrieve-documents-individually)\n* [Tailable Cursor](#tailable-cursor)\n* [Retrieve All Documents](#retrieve-all-documents)\n* [Close the Cursor](#close-the-cursor)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to access data with a **cursor**. A cursor is a mechanism that allows an application to iterate over database results while holding only a subset of them in memory at a given time. Read operations that match multiple documents use a cursor to return those documents in batches as opposed to all at once. ### Sample Cursor Each section uses the following `cursor` variable, which is a`Cursor` struct that contains all the documents in a collection: `| cursor, err := coll.Find(context.TODO(), bson.D{}) |\n| -------------------------------------------------- |\n| if err != nil {                                    |\n| panic(err)                                         |\n| }                                                  | ` In the examples in this guide, the driver unmarshals documents held in the `cursor` variable to a sample `MyStruct` struct. ## Important A cursor is not [goroutine](https://www.golang-book.com/books/intro/10) safe. Do not use the same cursor in multiple goroutines at the same time. ## Retrieve Documents Individually To retrieve documents from your cursor individually while blocking the current goroutine, use the `Next()` method. The method returns a document if all of the following conditions are met: * A document is currently or will later be available.\n* The driver didn't throw any errors.\n* The context didn't expire. ```go for cursor.Next(context.TODO()) { \tvar result MyStruct \tif err := cursor.Decode(&result); err != nil { \t\tlog.Fatal(err) \t} \tfmt.Printf(\"%+v\\n\", result) } if err := cursor.Err(); err != nil { \tlog.Fatal(err) } \n``` ### Tailable Cursor To attempt retrieving a document from a [tailable cursor](https://www.mongodb.com/docs/manual/core/tailable-cursors/), use the `TryNext()` method. The method returns a document if all of the following conditions are met: * A document is currently available.\n* The driver didn't throw any errors.\n* The context didn't expire. ```go for { \tif cursor.TryNext(context.TODO()) { \t\tvar result MyStruct \t\tif err := cursor.Decode(&result); err != nil { \t\t\tlog.Fatal(err) \t\t} \t\tfmt.Printf(\"%+v\\n\", result) \t\tcontinue \t} \tif err := cursor.Err(); err != nil { \t\tlog.Fatal(err) \t} \tif cursor.ID() == 0 { \t\tbreak \t} } \n``` ## Retrieve All Documents To populate an array with all of your query results, use the `All()`method: ```go var results []MyStruct if err = cursor.All(context.TODO(), &results); err != nil { \tpanic(err) } for _, result := range results { \tfmt.Printf(\"%+v\\n\", result) } \n``` ## Important ### Memory\n\n ## Close the Cursor When your application no longer needs to use a cursor, close the cursor with the `Close()` method. This method frees the resources your cursor consumes in both the client application and the MongoDB server. ```go defer cursor.Close(context.TODO()) \n``` ## Note Close the cursor when you [retrieve documents individually](#std-label-golang-individual-documents) because those methods make a cursor[tailable.](https://www.mongodb.com/docs/manual/core/tailable-cursors/) ## Additional Information To learn more about the operations discussed in this guide, see the following guides: * [Retrieve Data](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/#std-label-golang-retrieve)\n* [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document)\n* [Work with BSON](https://mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-bson)\n* [Tailable Cursors](https://www.mongodb.com/docs/manual/core/tailable-cursors/) ### API Documentation To learn more about cursors and how to access their elements, see the following API Documentation: * [Cursor](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Cursor)\n* [Cursor.All()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Cursor.All)\n* [Cursor.Next()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Cursor.Next)\n* [Cursor.TryNext()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Cursor.TryNext)\n* [Cursor.Decode()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Cursor.Decode)\n* [Cursor.RemainingBatchLength()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Cursor.RemainingBatchLength)\n* [Cursor.ID()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Cursor.ID)\n* [Cursor.Err()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Cursor.Err)\n* [Cursor.Close()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Cursor.Close) ← [Retrieve Data](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/ \"Previous Section\")[Retrieve Distinct Values](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/distinct/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/distinct/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Retrieve Distinct Values On this page * [Overview](#overview)\n* [Sample Data](#sample-data)\n* [Distinct](#distinct)\n* [Modify Behavior](#modify-behavior)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to retrieve distinct values for a specified field across a single collection. ### Sample Data The example in this guide uses the following `Course` struct as a model for documents in the `courses` collection: `| type Course struct { |\n| -------------------- |\n| Title      string    |\n| Department string    |\n| Enrollment int32     |\n| }                    | ` To run the example, load the sample data into the`db.courses` collection with the following snippet: ```go coll := client.Database(\"db\").Collection(\"courses\") docs := []interface{}{ \tCourse{Title: \"World Fiction\", Department: \"English\", Enrollment: 35}, \tCourse{Title: \"Abstract Algebra\", Department: \"Mathematics\", Enrollment: 60}, \tCourse{Title: \"Modern Poetry\", Department: \"English\", Enrollment: 12}, \tCourse{Title: \"Plate Tectonics\", Department: \"Earth Science\", Enrollment: 30}, } result, err := coll.InsertMany(context.TODO(), docs) \n``` ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. Each document contains a description of a university course that includes the course title, department, and enrollment. These items correspond to the `title`, `department`, and `enrollment` fields in each document. ## Distinct To retrieve distinct values for a specified field across a single collection, pass the following parameters to the `Distinct()`method: * The field name you want distinct values for\n* A `non-nil` query filter specifying which documents to match ## Tip If you specify an empty query filter, the `Distinct()` method searches for distinct values across all documents in a collection. ### Modify Behavior You can modify the behavior of the `Distinct()` method by passing in a `DistinctOptions`. If you don't specify a`DistinctOptions`, the driver uses the default values for each option. The `DistinctOptions` type allows you to configure options with the following methods: | Method         | Description                                                                  |\n| -------------- | ---------------------------------------------------------------------------- |\n| SetCollation() | The type of language collation to use when sorting results.Default: nil      |\n| SetMaxTime()   | The maximum amount of time that the query can run on the server.Default: nil | #### Example The following example matches documents with an `enrollment` field value less than `50` and prints the distinct values of the `department` field using the `Distinct()` method: ```go results, err := coll.Distinct(context.TODO(), \"department\", bson.D{{\"enrollment\", bson.D{{\"$lt\", 50}}}}) if err != nil {     panic(err) } for _, result := range results {     fmt.Println(result) } \n``` VIEW OUTPUT ## Additional Information For a runnable example of retrieving distinct values, see [Retrieve Distinct Values of a Field.](https://mongodb.com/docs/drivers/go/current/usage-examples/distinct/#std-label-golang-distinct-usage-example) To learn about constructing a query filter, see [Specify a Query.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation:\n\n ← [Access Data From a Cursor](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/cursor/ \"Previous Section\")[Sort Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/sort/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/project/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Specify Which Fields to Return On this page * [Overview](#overview)\n* [Sample Data](#sample-data)\n* [Projection](#projection)\n* [Exclude a Field](#exclude-a-field)\n* [Include a Field](#include-a-field)\n* [Aggregation](#aggregation)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to specify which fields to return in a document from read operations. ### Sample Data The examples in this guide use the following `Course` struct as a model for documents in the `courses` collection: `` | type Course struct {                            |\n| ----------------------------------------------- |\n| Title      string `bson:\"title,omitempty\"`      |\n| CourseId   string `bson:\"course_id,omitempty\"`  |\n| Enrollment int32  `bson:\"enrollment,omitempty\"` |\n| }                                               |  `` The `omitempty` [struct tag](https://mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-struct-tags) directs the driver to exclude fields when unmarshalling based on your projection specification. To run the examples in this guide, load the sample data into the`db.courses` collection with the following snippet: ```go coll := client.Database(\"db\").Collection(\"courses\") docs := []interface{}{ \tCourse{Title: \"Primate Behavior\", CourseId: \"PSY2030\", Enrollment: 40}, \tCourse{Title: \"Revolution and Reform\", CourseId: \"HIST3080\", Enrollment: 12}, } result, err := coll.InsertMany(context.TODO(), docs) \n``` ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. Each document contains a description of a university course that includes the course title, course ID, and maximum enrollment, corresponding to the `title`, `course_id`, and `enrollment` fields in each document. ## Projection A projection specifies which fields to return in matched documents. The projection document contains field names with a `1` to include the corresponding field or `0` to exclude it. If you are using an aggregation framework, you can also specify a projection to include newly computed fields. You can specify a projection by passing a projection document to the `SetProjection()`method. The following read operations take an options object as a parameter: * `Find()`\n* `FindOne()`\n* `FindOneAndDelete()`\n* `FindOneAndReplace()`\n* `FindOneAndUpdate()` ## Tip If you don't specify a projection, the read operation returns all the fields in matched documents. ### Exclude a Field To exclude a field, pass the field you want to exclude with a `0` to the `SetProjection()` method. The driver includes all fields that are not explicitly excluded in the projection document, if you specify any fields to exclude. #### Example The following example excludes the `course_id` and `enrollment`fields from the matched documents returned by the `Find()` method: ```go filter := bson.D{} opts := options.Find().SetProjection(bson.D{{\"course_id\", 0}, {\"enrollment\", 0}}) cursor, err := coll.Find(context.TODO(), filter, opts) if err != nil {     panic(err) } var results []Course if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := bson.MarshalExtJSON(result, false, false)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ### Include a Field\n\n #### Example The following example includes only the `title` and `enrollment` fields from the matched documents returned by the `Find()` method: ```go filter := bson.D{} opts := options.Find().SetProjection(bson.D{{\"title\", 1}, {\"enrollment\", 1}}) cursor, err := coll.Find(context.TODO(), filter, opts) if err != nil {     panic(err) } var results []Course if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := bson.MarshalExtJSON(result, false, false)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ### Aggregation You can also create a [$project](https://www.mongodb.com/docs/manual/reference/operator/aggregation/project/)stage to specify a projection in an aggregation pipeline. #### Example The following example includes only the `title` and `course_id` fields from the matched documents returned by the `Aggregate()` method: ```go projectStage := bson.D{{\"$project\", bson.D{{\"title\", 1}, {\"course_id\", 1}}}} cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{projectStage}) if err != nil {     panic(err) } var results []Course if err = cursor.All(context.TODO(), &results); err != nil {     panic(err) } for _, result := range results {     res, _ := bson.MarshalExtJSON(result, false, false)     fmt.Println(string(res)) } \n``` VIEW OUTPUT ## Additional Information To learn more about the operations mentioned, see the following guides: * [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document)\n* [Retrieve Data](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/#std-label-golang-retrieve)\n* [Compound Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/compound-operations/#std-label-golang-compound-operations)\n* [Aggregation](https://mongodb.com/docs/drivers/go/current/fundamentals/aggregation/#std-label-golang-aggregation) To learn about projecting text scores from your text search, see [Search Text.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/text/#std-label-golang-search-text) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation: * [Find()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.Find)\n* [FindOptions.SetProjection()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#FindOptions.SetProjection)\n* [FindOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.FindOne)\n* [FindOneAndDelete()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.FindOneAndDelete)\n* [FindOneAndReplace()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.FindOneAndReplace)\n* [FindOneAndUpdate()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.FindOneAndUpdate)\n* [Aggregate()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.Aggregate)\n\n",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Retrieve Data On this page * [Overview](#overview)\n* [Sample Data](#sample-data)\n* [Find Operations](#find-operations)\n* [Find All Documents](#find-all-documents)\n* [Find One Document](#find-one-document)\n* [Modify Behavior](#modify-behavior)\n* [Aggregation Operations](#aggregation-operations)\n* [Aggregation](#aggregation)\n* [Modify Behavior](#modify-behavior-1)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to retrieve data from your MongoDB collections using **read operations**. Read operations allow you to do the following: * Retrieve documents from your collections by using [find operations](#std-label-golang-retrieve-find)\n* Perform transformations on documents in your collections by using [aggregation operations](#std-label-golang-retrieve-aggregation) ### Sample Data The examples in this section use the following `Review` struct as a model for documents in the `reviews` collection: `` | type Review struct {                        |\n| ------------------------------------------- |\n| Item        string                          |\n| Rating      int32                           |\n| DateOrdered time.Time `bson:\"date_ordered\"` |\n| }                                           |  `` To run the examples in this guide, load these documents into the`tea.reviews` collection with the following snippet: ```go coll := client.Database(\"tea\").Collection(\"reviews\") docs := []interface{}{ \tReview{Item: \"Masala\", Rating: 10, DateOrdered: time.Date(2009, 11, 17, 0, 0, 0, 0, time.Local)}, \tReview{Item: \"Sencha\", Rating: 7, DateOrdered: time.Date(2009, 11, 18, 0, 0, 0, 0, time.Local)}, \tReview{Item: \"Masala\", Rating: 9, DateOrdered: time.Date(2009, 11, 12, 0, 0, 0, 0, time.Local)}, \tReview{Item: \"Masala\", Rating: 8, DateOrdered: time.Date(2009, 12, 1, 0, 0, 0, 0, time.Local)}, \tReview{Item: \"Sencha\", Rating: 10, DateOrdered: time.Date(2009, 12, 17, 0, 0, 0, 0, time.Local)}, \tReview{Item: \"Hibiscus\", Rating: 4, DateOrdered: time.Date(2009, 12, 18, 0, 0, 0, 0, time.Local)}, } result, err := coll.InsertMany(context.TODO(), docs) \n``` ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. Each document describes the tea variety a customer ordered, their rating, and the date of the order. These descriptions correspond to the`item`, `rating`, and `date_ordered` fields. ## Find Operations Use **find operations** to retrieve data from MongoDB. Find operations consist of the `Find()` and `FindOne()` methods. ### Find All Documents The `Find()` method expects you to pass a `Context` type and a query filter. The method returns _all_ documents that match the filter as a `Cursor` type. To learn how to access data in a cursor, see [Access Data From a Cursor.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/cursor/#std-label-golang-cursor) ### Find One Document\n\n To learn how to access data in a `SingleResult` see [Unmarshalling.](https://mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-bson-unmarshalling) ### Modify Behavior You can modify the behavior of `Find()` and `FindOne()` by passing in a `FindOptions` and `FindOneOptions` type respectively. If you don't specify any options, the driver uses the default values for each option. You can configure the commonly used options in both types with the following methods: | Method          | Description                                                                                                                                                |\n| --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| SetCollation()  | The type of language collation to use when sorting results.Default: nil                                                                                    |\n| SetLimit()      | The maximum number of documents to return.Default: 0NoteThis option is not available for FindOneOptions. TheFindOne() method internally uses SetLimit(-1). |\n| SetProjection() | The fields to include in the returned documents.Default: nil                                                                                               |\n| SetSkip()       | The number of documents to skip.Default: 0                                                                                                                 |\n| SetSort()       | The field and type of sort to order the matched documents. You can specify an ascending or descending sort.Default: none                                   | #### Find Example The following example passes a context, filter, and `FindOptions` to the `Find()` method, which performs the following actions: * Matches documents where the `rating` value is between `5` and`9` (exclusive)\n* Sorts matched documents in ascending order by `date_ordered` ```go filter := bson.D{     {\"$and\",         bson.A{             bson.D{{\"rating\", bson.D{{\"$gt\", 5}}}},             bson.D{{\"rating\", bson.D{{\"$lt\", 9}}}},         }}, } sort := bson.D{{\"date_ordered\", 1}} opts := options.Find().SetSort(sort) cursor, err := coll.Find(context.TODO(), filter, opts) if err != nil {     panic(err) } var results []Review\n\n     panic(err) } for _, result := range results {     res, _ := json.Marshal(result)     fmt.Println(string(res)) } \n``` VIEW OUTPUT #### Find One Example The following example passes a context, filter, and `FindOneOptions`to the `FindOne()` method, which performs the following actions: * Matches documents where the `date_ordered` value is on or before November 30, 2009\n* Skips the first two matched documents ```go filter := bson.D{{\"date_ordered\", bson.D{{\"$lte\", time.Date(2009, 11, 30, 0, 0, 0, 0, time.Local)}}}} opts := options.FindOne().SetSkip(2) var result Review err := coll.FindOne(context.TODO(), filter, opts).Decode(&result) if err != nil {     panic(err) } res, _ := json.Marshal(result) fmt.Println(string(res)) \n``` VIEW OUTPUT ## Aggregation Operations Use **aggregation operations** to retrieve and transform data from MongoDB. Perform aggregation operations using the `Aggregate()`method. ### Aggregation The `Aggregate()` method expects you to pass a `Context` type and an **aggregation pipeline**. An aggregation pipeline defines how to transform data through stages. Some of the stages are matching documents, renaming fields, and grouping values. The method returns the resulting documents in a `Cursor` type. If you omit the [$match](https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match)stage, the pipeline proceeds using all documents in the collection. To learn how to access data in a cursor, see [Access Data From a Cursor.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/cursor/#std-label-golang-cursor) ### Modify Behavior The `Aggregate()` method optionally takes an `AggregateOptions`type, which represents options you can use to modify its behavior. If you don't specify any options, the driver uses the default values for each option. The `AggregateOptions` type allows you to configure options with the following methods:\n\n #### Example The following example passes a context and an aggregation pipeline that performs the following actions: * Groups reviews by item ordered\n* Calculates the average rating for each item ```go groupStage := bson.D{    {\"$group\", bson.D{       {\"_id\", \"$item\"},       {\"average\", bson.D{          {\"$avg\", \"$rating\"},       }}, }}} cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{groupStage}) if err != nil {    panic(err) } var results []bson.M if err = cursor.All(context.TODO(), &results); err != nil {    panic(err) } for _, result := range results {    fmt.Printf(\"%v had an average rating of %v \\n\", result[\"_id\"], result[\"average\"]) } \n``` VIEW OUTPUT To learn more about how to construct an aggregation pipeline, see the MongoDB server manual page on [Aggregation.](https://www.mongodb.com/docs/manual/core/aggregation-pipeline/) ## Additional Information For runnable examples of the find operations, see the following usage examples: * [Find a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/findOne/#std-label-golang-find-one)\n* [Find Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/find/#std-label-golang-find-multiple) To learn more about the operations mentioned, see the following guides: * [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document)\n* [Access Data From a Cursor](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/cursor/#std-label-golang-cursor)\n* [Skip Returned Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/skip/#std-label-golang-skip)\n* [Sort Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/sort/#std-label-golang-sort-results)\n* [Limit the Number of Returned Results](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/limit/#std-label-golang-limit)\n* [Specify Which Fields to Return](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/project/#std-label-golang-project)\n* [Aggregation](https://mongodb.com/docs/drivers/go/current/fundamentals/aggregation/#std-label-golang-aggregation)\n* [Collations](https://mongodb.com/docs/drivers/go/current/fundamentals/collations/#std-label-golang-collations) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation:\n\n ← [Count Documents](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/count/ \"Previous Section\")[Access Data From a Cursor](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/cursor/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/embedded-arrays/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Update Arrays in a Document On this page * [Overview](#overview)\n* [Sample Data](#sample-data)\n* [Specify Array Elements](#specify-array-elements)\n* [First Array Element](#first-array-element)\n* [Multiple Array Elements](#multiple-array-elements)\n* [All Array Elements](#all-array-elements)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to update array elements in one or more documents. To update elements in an array, perform the following actions: * Provide an [update document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/change-a-document/#std-label-golang-update-document) that specifies the update.\n* Specify which array elements to update.\n* Perform the update using an update operation with these specifications. ### Sample Data The examples in this guide use the following `Drink` struct as a model for documents in the `drinks` collection: `` | type Drink struct {                         |\n| ------------------------------------------- |\n| Description string                          |\n| Sizes       []int32 `bson:\"sizes,truncate\"` |\n| Styles      []string                        |\n| }                                           |  `` The `truncate` [struct tag](https://mongodb.com/docs/drivers/go/current/fundamentals/bson/#std-label-golang-struct-tags) allows the driver to truncate types such as `float64` to `int32` when unmarshalling. To run the examples in this guide, load the sample data into the`db.drinks` collection with the following snippet: ```go coll := client.Database(\"db\").Collection(\"drinks\") docs := []interface{}{ \tDrink{Description: \"Matcha Latte\", Sizes: []int32{12, 16, 20}, Styles: []string{\"iced\", \"hot\", \"extra hot\"}}, } result, err := coll.InsertMany(context.TODO(), docs) \n``` Each document contains a description of a drink that includes the drink's description, available sizes in ounces, and available preparation styles, corresponding to the `description`, `sizes`, and`styles` fields in each document. ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. The following examples use the `FindOneAndUpdate()` method to retrieve and update a document and to return the state of the document after the update occurs. If you want to update multiple documents with an array field, use the `UpdateMany()` method. ## Specify Array Elements To specify which array elements to update, use a **positional operator**. Positional operators can specify the [first](#std-label-golang-first-element),[multiple](#std-label-golang-multiple-elements), or [all](#std-label-golang-all-elements)array elements to update. To specify array elements with a positional operator, use **dot notation**. Dot notation is a property access syntax for navigating array elements and fields of an embedded document. ### First Array Element To update the first array element that matches your query filter, use the positional `$` operator. The query filter must be for the array field. #### Example This example performs the following actions: * Matches array elements in `sizes` where the value is less than or equal to `16`.\n* Decrements the first array value matched by `2`. ```go filter := bson.D{{\"sizes\", bson.D{{\"$lte\", 16}}}} update := bson.D{{\"$inc\", bson.D{{\"sizes.$\", -2}}}}\n\n     SetReturnDocument(options.After) var updatedDoc Drink err := coll.FindOneAndUpdate(context.TODO(), filter, update, opts).Decode(&updatedDoc) if err != nil {     panic(err) } res, _ := bson.MarshalExtJSON(updatedDoc, false, false) fmt.Println(string(res)) \n``` VIEW OUTPUT ## Note The query filter matches the values `12` and `16`. Since the operation matches `12` first, it is decremented. If you want to update both matched values, see [Multiple Array Elements.](#std-label-golang-multiple-elements) ### Multiple Array Elements To update multiple array elements that match your query filter, use the filtered positional `$[<identifier>]` operator. You must include an array filter in your update operation to specify which array elements to update. The `<identifier>` is the name you use within your array filter. This value must begin with a lowercase letter and only contain alphanumeric characters. #### Example This example performs the following actions: * Creates an array filter with an identifier called `hotOptions` to match array elements that contain \"hot\".\n* Applies the array filter using the `SetArrayFilters()` method.\n* Removes these array elements. ```go identifier := []interface{}{bson.D{{\"hotOptions\", bson.D{{\"$regex\", \"hot\"}}}}} update := bson.D{{\"$unset\", bson.D{{\"styles.$[hotOptions]\", \"\"}}}} opts := options.FindOneAndUpdate().     SetArrayFilters(options.ArrayFilters{Filters: identifier}).     SetReturnDocument(options.After) var updatedDoc Drink err := coll.FindOneAndUpdate(context.TODO(), bson.D{}, update, opts).Decode(&updatedDoc) if err != nil {     panic(err) } res, _ := bson.MarshalExtJSON(updatedDoc, false, false) fmt.Println(string(res)) \n``` VIEW OUTPUT ### All Array Elements To update all the array elements, use the all positional `$[]` operator. ## Note If you specify a query filter for the array field, the positional`$[]` operator ignores the query filter and updates all the array elements. #### Example This example multiplies every array element in `sizes` by `29.57`to convert from ounces to milliliters: ```go update := bson.D{{\"$mul\", bson.D{{\"sizes.$[]\", 29.57}}}} opts := options.FindOneAndUpdate().     SetReturnDocument(options.After) var updatedDoc Drink err := coll.FindOneAndUpdate(context.TODO(), bson.D{}, update, opts).Decode(&updatedDoc) if err != nil {     panic(err) } res, _ := bson.MarshalExtJSON(updatedDoc, false, false) fmt.Println(string(res)) \n``` VIEW OUTPUT ## Additional Information To learn more about the operations discussed in this guide, see the following guides: * [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document)\n* [Compound Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/compound-operations/#std-label-golang-compound-operations)\n* [Change a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/change-a-document/#std-label-golang-change-document)\n* [Positional $ Operator](https://www.mongodb.com/docs/manual/reference/operator/update/positional/)\n* [Positional $\\[\\] Operator](https://www.mongodb.com/docs/manual/reference/operator/update/positional-all/)\n* [Positional $\\[<identifier>\\] Operator](https://www.mongodb.com/docs/manual/reference/operator/update/positional-filtered/)\n* [Dot Notation](https://www.mongodb.com/docs/manual/core/document/#std-label-document-dot-notation) ### API Documentation\n\n * [FindOneAndUpdate()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.FindOneAndUpdate)\n* [FindOneAndUpdateOptions.SetReturnDocument()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#FindOneAndUpdateOptions.SetReturnDocument)\n* [FindOneAndUpdateOptions.SetArrayFilters()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#FindOneAndUpdateOptions.SetArrayFilters)\n* [UpdateMany()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.UpdateMany) ← [Change a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/change-a-document/ \"Previous Section\")[Insert or Update in a Single Operation](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/upsert/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/insert/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Insert a Document On this page * [Overview](#overview)\n* [The \\_id Field](#the-%5Fid-field)\n* [Insert a Document](#insert-a-document-1)\n* [Example](#example)\n* [Modify InsertOne Behavior](#modify-insertone-behavior)\n* [Insert Multiple Documents](#insert-multiple-documents)\n* [Example](#example-1)\n* [Modify InsertMany Behavior](#modify-insertmany-behavior)\n* [Ordered Behavior](#ordered-behavior)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to **insert** documents into a MongoDB collection. Before you can find, update, and delete documents in MongoDB, you need to insert those documents. You can insert one document using the `InsertOne()` method, or insert multiple documents using either the `InsertMany()` or `BulkWrite()` method. The following sections focus on `InsertOne()` and `InsertMany()`. To learn how to use the `BulkWrite()` method, see the[Bulk Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/bulk/#std-label-golang-bulk) guide. ## The `_id` Field In MongoDB, each document _must_ contain a unique `_id` field. The two options for managing this field are: * Managing this field yourself, ensuring that each value you use is unique.\n* Letting the driver automatically generate unique `ObjectId` values. The driver generates unique `ObjectId` values for documents that you do not explicitly specify an `_id`. Unless you provide strong guarantees for uniqueness, MongoDB recommends you let the driver automatically generate `_id` values. ## Note Duplicate `_id` values violate unique index constraints, which causes the driver to return a `WriteError`. To learn more about the `_id` field, see the Server Manual Entry on[Unique Indexes.](https://www.mongodb.com/docs/manual/core/index-unique/) To learn more about document structure and rules, see the Server Manual Entry on [Documents.](https://www.mongodb.com/docs/manual/core/document/) ## Insert a Document Use the `InsertOne()` method to insert a single document into a collection. Upon successful insertion, the method returns an`InsertOneResult` instance that contains the `_id` of the new document. ### Example This example uses the following `Book` struct as a model for documents in the `books` collection: `| type Book struct { |\n| ------------------ |\n| Title  string      |\n| Author string      |\n| }                  | ` The following example creates and inserts a document into the`books` collection using the `InsertOne()` method: ```go coll := client.Database(\"db\").Collection(\"books\") doc := Book{Title: \"Atonement\", Author: \"Ian McEwan\"} result, err := coll.InsertOne(context.TODO(), doc) fmt.Printf(\"Inserted document with _id: %v\\n\", result.InsertedID) \n``` VIEW OUTPUT ### Modify `InsertOne` Behavior You can modify the behavior of `InsertOne()` by constructing and passing an optional `InsertOneOptions` struct. The available options to set with`InsertOneOptions` are:\n\n Construct an `InsertOneOptions` as follows: ```go opts := options.InsertOne().SetBypassDocumentValidation(true) \n``` ## Insert Multiple Documents Use the `InsertMany()` method to insert multiple documents into a collection. Upon successful insertion, the `InsertMany()` method returns an `InsertManyResult`instance that contains the `_id` fields of the inserted documents. ### Example The following example creates and inserts multiple documents into the`books` collection using the `InsertMany()` method: ```go coll := client.Database(\"myDB\").Collection(\"favorite_books\") docs := []interface{}{     Book{Title: \"Cat's Cradle\", Author: \"Kurt Vonnegut Jr.\"},     Book{Title: \"In Memory of Memory\", Author: \"Maria Stepanova\"},     Book{Title: \"Pride and Prejudice\", Author: \"Jane Austen\"}, } result, err := coll.InsertMany(context.TODO(), docs) fmt.Printf(\"Documents inserted: %v\\n\", len(result.InsertedIDs)) for _, id := range result.InsertedIDs {     fmt.Printf(\"Inserted document with _id: %v\\n\", id) } \n``` Your output should look like this: ``` Documents inserted: 3 Inserted document with _id: ObjectID(\"...\") Inserted document with _id: ObjectID(\"...\") Inserted document with _id: ObjectID(\"...\") \n``` ### Modify `InsertMany` Behavior You can modify the behavior of `InsertMany()` by constructing and passing an optional `InsertManyOptions` struct. The available options to set with `InsertManyOptions` are: | Option                   | Description                                                                                                                                                                                                                                        |\n| ------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| BypassDocumentValidation | If true, allows the write to opt-out of [document level validation](https://www.mongodb.com/docs/manual/core/schema-validation/).Default: false                                                                                                    |\n| Ordered                  | If true, the driver sends documents to the server in the order provided. If an error occurs, the driver and server abort all remaining insert operations. To learn more, see [Ordered Behavior](#std-label-golang-ordered-behavior).Default: false | Construct an `InsertManyOptions` as follows: ```go opts := options.InsertMany().SetBypassDocumentValidation(true).SetOrdered(false) \n``` ### `Ordered` Behavior Assume you want to insert the following documents: ``` { \"_id\": 1, \"title\": \"Where the Wild Things Are\" } { \"_id\": 2, \"title\": \"The Very Hungry Caterpillar\" } { \"_id\": 1, \"title\": \"Blueberries for Sal\" } { \"_id\": 3, \"title\": \"Goodnight Moon\" } \n```\n\n ## Note You can get an acknowledgement of successful document insertion even if a BulkWriteException occurs: ```go type Book struct {     ID    int `bson:\"_id\"`     Title string } ... docs := []interface{}{     Book{ID: 1, Title: \"Where the Wild Things Are\"},     Book{ID: 2, Title: \"The Very Hungry Caterpillar\"},     Book{ID: 1, Title: \"Blueberries for Sal\"},     Book{ID: 3, Title: \"Goodnight Moon\"}, } result, err := coll.InsertMany(context.TODO(), docs) if err != nil {     fmt.Printf(\"A bulk write error occurred, but %v documents were still inserted.\\n\", len(result.InsertedIDs)) } for _, id := range result.InsertedIDs {     fmt.Printf(\"Inserted document with _id: %v\\n\", id) } \n``` VIEW OUTPUT If you look inside your collection, you should be able to see the following documents: ``` { \"_id\": 1, \"title\": \"Where the Wild Things Are\" } { \"_id\": 2, \"title\": \"The Very Hungry Caterpillar\" } \n``` ## Additional Information For runnable examples of the insert operations, see the following usage examples: * [Insert a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/insertOne/#std-label-golang-insert-one)\n* [Insert Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/insertMany/#std-label-golang-insert-many) To learn more about performing the operations mentioned, see the following guides: * [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document)\n* [Bulk Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/bulk/#std-label-golang-bulk) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation: * [WriteError](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#WriteError)\n* [InsertOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.InsertOne)\n* [InsertOneResult](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#InsertOneResult)\n* [InsertMany()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.InsertMany)\n* [InsertManyResult](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#InsertManyResult)\n* [BulkWriteException](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#BulkWriteException) ← [Write Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/ \"Previous Section\")[Delete a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/delete/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/change-a-document/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Change a Document On this page * [Overview](#overview)\n* [A Note About \\_id](#a-note-about-%5Fid)\n* [Update](#update)\n* [Parameters](#parameters)\n* [Return Values](#return-values)\n* [Replace](#replace)\n* [Parameters](#parameters-1)\n* [Return Values](#return-values-1)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to change documents in MongoDB using**update** and **replace** operations. Update operations change the fields that you specify while leaving other fields and values unchanged. Replace operations remove all existing fields except for `_id` in a document and substitute the deleted fields with the new fields and values you specify. In MongoDB, all methods to change documents follow the same pattern: ![Change method signature](https://mongodb.com/docs/drivers/go/current/includes/figures/change_diagram.png) ## Note ### Placeholder `changeX` is a placeholder and not a real method. The pattern expects you to: * Specify a query filter to match one or more documents to change.\n* Specify the field and value changes.\n* Specify options to modify behavior, if needed. The driver provides the following methods to change documents: * `UpdateByID()`\n* `UpdateOne()`\n* `UpdateMany()`\n* `ReplaceOne()`\n* `BulkWrite()` _(not discussed in this guide)_\n* `FindOneAndUpdate()` _(not discussed in this guide)_\n* `FindOneAndReplace()` _(not discussed in this guide)_ ### A Note About `_id` Each document in a MongoDB collection has a unique and immutable `_id`field. You cannot use update and replace operations to change the`_id` field. If you attempt to change this field, the update and replace methods return a `WriteError`. ## Update Use the `UpdateOne()` or `UpdateByID()` method to update a single document. Use the `UpdateMany()` method to update multiple documents. ### Parameters Each method takes an **update document** that includes at least one **update operator**. The update operator specifies the type of update to perform. The update document also includes the fields and values that describe the change. Update documents use the following format: `| bson.D{{\"<update operator>\", bson.D{{\"<field>\", <value>}, |\n| --------------------------------------------------------- |\n| {\"<field>\", <value>}, ... }},                             |\n| {\"<update operator>\", ... }, ... }                        | ` See the MongoDB server manual for a [complete list of update operators and descriptions.](https://www.mongodb.com/docs/manual/reference/operator/update-field/) ## Note ### Aggregation Pipelines in Update Operations If you are using MongoDB Server version 4.2 or later, you can use aggregation pipelines made up of a subset of aggregation stages in update operations. To learn more about the aggregation stages MongoDB supports in aggregation pipelines, see our tutorial on performing[updates with aggregation pipelines.](https://www.mongodb.com/docs/manual/tutorial/update-documents-with-aggregation-pipeline/) ### Return Values `UpdateOne()`, `UpdateByID()`, and `UpdateMany()` return an`UpdateResult` type that contains information about the update operation if the operation is successful. The `UpdateResult` type contains the following properties:\n\n If multiple documents match the query filter passed to `UpdateOne()`, the method selects and updates the first matched document. If no documents match the query filter, the update operation makes no changes. #### Example The following document describes an employee: ``` {    \"_id\" : 2158,    \"name\" : \"Mary Shelley\",    \"department\" : \"Marketing\",    \"role\" : \"Marketing Analyst\",    \"bonus\" : 2500,    ... } \n``` The following example uses the `UpdateByID()` method to: * Match the document where the `_id` value is 2158.\n* Set the `name` field to \"Mary Wollstonecraft Shelley\" and the`role` field to \"Marketing Director\".\n* Increment the value of the `bonus` field by 2000. ```go filter := bson.D{{\"_id\", 2158}} update := bson.D{{\"$set\", bson.D{{\"name\", \"Mary Wollstonecraft Shelley\"},    {\"role\", \"Marketing Director\"}}}, {\"$inc\", bson.D{{\"bonus\", 2000}}}} result, err := collection.UpdateOne(context.TODO(), filter, update) fmt.Printf(\"Documents matched: %v\\n\", result.MatchedCount) fmt.Printf(\"Documents updated: %v\\n\", result.ModifiedCount) \n``` VIEW OUTPUT The following shows the updated document resulting from the preceding update operation: ``` {    \"_id\" : 2158,    \"name\" : \"Mary Wollstonecraft Shelley\",    \"department\" : \"Marketing\",    \"role\" : \"Marketing Director\",    \"bonus\" : 4500,    ... } \n``` ## Replace Use the `ReplaceOne()` method to replace a single document. ### Parameters `ReplaceOne()` expects a **replacement document**, which is the document that you want to take the place of an existing document. Replacement documents use the following format: ```go bson.D{{\"<field>\", \"<value>\"}, {\"<field>\", \"<value>\"}, ... } \n``` ### Return Values `ReplaceOne()` returns an `UpdateResult` type that contains information about the replace operation if the operation is successful. The `UpdateResult` type contains the following properties: | Property      | Description                                                |\n| ------------- | ---------------------------------------------------------- |\n| MatchedCount  | The number of documents matched by the filter              |\n| ModifiedCount | The number of documents modified by the operation          |\n| UpsertedCount | The number of documents upserted by the operation          |\n| UpsertedID    | The \\_id of the upserted document, or nil if there is none | If multiple documents match the query filter passed to `ReplaceOne()`, the method selects and replaces the first matched document. Your replace operation fails if no documents match the query filter. #### Example The following document describes a kitchen item: ``` {    \"_id\" : 2056,    \"item\" : \"Mug\",    \"brand\" : \"Simply Ceramics\",    \"price\" : 2.99,    \"material\" : \"Glass\" } \n``` The following example uses the `ReplaceOne()` method to substitute this document with one that contains an `item` field with a value of \"Cup\" and a `quantity` field with a value of 107: ```go filter := bson.D{{\"_id\", 2056}} replacement := bson.D{{\"item\", \"Cup\"}, {\"quantity\", 107}} result, err := collection.ReplaceOne(context.TODO(), filter, replacement) fmt.Printf(\"Documents matched: %v\\n\", result.MatchedCount) fmt.Printf(\"Documents replaced: %v\\n\", result.ModifiedCount) \n``` VIEW OUTPUT The replaced document contains the contents of the replacement document and the immutable `_id` field as follows: ``` {    \"_id\" : 2056,    \"item\" : \"Cup\",\n\n } \n``` ## Additional Information For runnable examples of the update and replace operations, see the following usage examples: * [Update a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/updateOne/#std-label-golang-update-one)\n* [Update Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/updateMany/#std-label-golang-update-many)\n* [Replace a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/replaceOne/#std-label-golang-replace) To learn more about the operations mentioned, see the following guides: * [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document)\n* [Overview](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/upsert/#std-label-golang-upsert)\n* [Compound Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/compound-operations/#std-label-golang-compound-operations)\n* [Update Operators](https://www.mongodb.com/docs/manual/reference/operator/update/#update-operators) To learn more about updating array elements, see [Update Arrays in a Document.](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/embedded-arrays/#std-label-golang-update-arrays) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation: * [WriteError](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#WriteError)\n* [UpdateOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.UpdateOne)\n* [UpdateByID()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.UpdateByID)\n* [UpdateMany()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.UpdateMany)\n* [UpdateResult](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#UpdateResult)\n* [ReplaceOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.ReplaceOne) ← [Delete a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/delete/ \"Previous Section\")[Update Arrays in a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/embedded-arrays/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/upsert/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Insert or Update in a Single Operation On this page * [Overview](#overview)\n* [Upsert](#upsert)\n* [Additional Information](#additional-information) ## Overview In this guide, you can learn how to perform an [upsert.](#std-label-golang-upsert-definition) ### Sample Data The examples in this guide use the following `Plant` struct as a model for documents in the `plants` collection: `` | type Plant struct {             |\n| ------------------------------- |\n| Species string                  |\n| PlantID int32 `bson:\"plant_id\"` |\n| Height  float64                 |\n| }                               |  `` To run the examples in this guide, load the sample data into the`db.plants` collection with the following snippet: ```go coll := client.Database(\"db\").Collection(\"plants\") docs := []interface{}{ \tPlant{Species: \"Polyscias fruticosa\", PlantID: 1, Height: 27.6}, \tPlant{Species: \"Polyscias fruticosa\", PlantID: 2, Height: 34.9}, \tPlant{Species: \"Ledebouria socialis\", PlantID: 1, Height: 11.4}, } result, err := coll.InsertMany(context.TODO(), docs) \n``` Each document contains a description of an individual plant that includes the species, plant ID, and height corresponding to the `species`, `plant_id`, and `height` fields in each document. ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. ## Upsert Applications use insert and update operations to store and modify data. Sometimes, you need to choose between an insert and an update operation depending on whether the document exists. MongoDB simplifies this decision for us with an **upsert** option. An upsert performs one of the following actions: * Updates documents that match your query filter\n* Inserts a new document if there are no matches to your query filter You can specify an upsert by passing `true` to the `SetUpsert()`method in the options of the following write operation methods: * `UpdateOne()`\n* `UpdateByID()`\n* `UpdateMany()`\n* `ReplaceOne()`\n* `FindOneAndUpdate()`\n* `FindOneAndReplace()` ## Tip If you don't specify an upsert, no change occurs in the write operation when zero documents match your query filter. This is equivalent to passing `false` to the `SetUpsert()` method. ### Example The following example performs the following actions: * Matches documents where the `species` is \"Ledebouria socialis\" and the `plant_id` is `3`\n* Updates the `height` of the matched document to `8.3`\n* Inserts this document if there are no matches to the query filter ```go filter := bson.D{{\"species\", \"Ledebouria socialis\"}, {\"plant_id\", 3}} update := bson.D{{\"$set\", bson.D{{\"species\", \"Ledebouria socialis\"}, {\"plant_id\", 3}, {\"height\", 8.3}}}} opts := options.Update().SetUpsert(true) result, err := coll.UpdateOne(context.TODO(), filter, update, opts) if err != nil {     panic(err) } fmt.Printf(\"Number of documents updated: %v\\n\", result.ModifiedCount) fmt.Printf(\"Number of documents upserted: %v\\n\", result.UpsertedCount) \n``` VIEW OUTPUT If you query the `plants` collection to view all documents, you can see that since the query filter did not match any documents, a new document was inserted with the specified fields: ``` {\"species\":\"Polyscias fruticosa\",\"plant_id\":1,\"height\":27.6}\n\n {\"species\":\"Ledebouria socialis\",\"plant_id\":1,\"height\":11.4} {\"species\":\"Ledebouria socialis\",\"plant_id\":3,\"height\":8.3} \n``` ## Additional Information To learn more about the operations mentioned, see the following guides: * [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document)\n* [Change a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/change-a-document/#std-label-golang-change-document)\n* [Compound Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/compound-operations/#std-label-golang-compound-operations) ### API Documentation To learn more about any of the methods or types mentioned in this guide, see the following API Documentation: * [UpdateOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.UpdateOne)\n* [UpdateByID()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.UpdateByID)\n* [UpdateMany()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.UpdateMany)\n* [ReplaceOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.ReplaceOne)\n* [FindOneAndUpdate()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.FindOneAndUpdate)\n* [FindOneAndReplace()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.FindOneAndReplace)\n* [UpdateOptions.SetUpsert()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#UpdateOptions.SetUpsert)\n* [ReplaceOptions.SetUpsert()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#ReplaceOptions.SetUpsert)\n* [UpdateResult](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#UpdateResult) ← [Update Arrays in a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/embedded-arrays/ \"Previous Section\")[Bulk Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/bulk/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/delete/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Delete a Document On this page * [Overview](#overview)\n* [Sample Data](#sample-data)\n* [Delete Operations](#delete-operations)\n* [Parameters](#parameters)\n* [Return Value](#return-value)\n* [Additional Information](#additional-information)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to remove documents from your MongoDB collections using delete operations. ### Sample Data The examples in this guide use the following `Book` struct as a model for documents in the `books` collection: `| type Book struct { |\n| ------------------ |\n| Title  string      |\n| Author string      |\n| Length int32       |\n| }                  | ` To run the examples in this guide, load the sample data into the`db.books` collection with the following snippet: ```go coll := client.Database(\"db\").Collection(\"books\") docs := []interface{}{ \tBook{Title: \"Atonement\", Author: \"Ian McEwan\", Length: 351}, \tBook{Title: \"My Brilliant Friend\", Author: \"Elena Ferrante\", Length: 331}, \tBook{Title: \"Lucy\", Author: \"Jamaica Kincaid\", Length: 103}, \tBook{Title: \"Outline\", Author: \"Rachel Cusk\", Length: 258}, } result, err := coll.InsertMany(context.TODO(), docs) \n``` Each document contains a description of a book that includes the title, author, and page length corresponding to the `title`, `author`, and `length` fields in each document. ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. ## Delete Operations Use **delete operations** to remove data from MongoDB. Delete operations consist of the following methods: * `DeleteOne()`, which deletes _the first document_ that matches the filter\n* `DeleteMany()`, which deletes _all_ documents that match the filter ## Tip If one document matches your filter when running the `DeleteMany()`method, it's equivalent to running the `DeleteOne()` method. ### Parameters The `DeleteOne()` and `DeleteMany()` methods expect you to pass a`Context` type and a `non-nil` query filter specifying which documents to match. They both optionally take a `DeleteOptions` type as a third parameter, which represents options you can use to configure the delete operation. If you don't specify a `DeleteOptions`, the driver uses the default values for each option. The `DeleteOptions` type allows you to configure options with the following methods: | Method         | Description                                                             |\n| -------------- | ----------------------------------------------------------------------- |\n| SetHint()      | The index to use to scan for documents to delete.Default: nil           |\n| SetCollation() | The type of language collation to use when sorting results.Default: nil | ### Return Value The `DeleteOne()` and `DeleteMany()` methods return a`DeleteResult` type. This type contains the `DeletedCount` property, which states the number of documents deleted. If there are no matches to your filter, no document gets deleted and `DeletedCount` is `0`. #### Example The following example performs the following with the `DeleteMany()`method: * Matches and deletes documents where the `length` is greater than `300`\n* Instructs the method to use the `_id` as the index ```go filter := bson.D{{\"length\", bson.D{{\"$gt\", 300}}}} opts := options.Delete().SetHint(bson.D{{\"_id\", 1}}) result, err := coll.DeleteMany(context.TODO(), filter, opts) if err != nil {    panic(err) }\n\n \n``` VIEW OUTPUT ## Tip If the preceding example used the `DeleteOne()` method instead of`DeleteMany()`, the driver would delete the first of the two matched documents. ## Additional Information For runnable examples of the delete operations, see the following usage examples: * [Delete a Document](https://mongodb.com/docs/drivers/go/current/usage-examples/deleteOne/#std-label-golang-delete-one)\n* [Delete Multiple Documents](https://mongodb.com/docs/drivers/go/current/usage-examples/deleteMany/#std-label-golang-delete-many) To learn more about performing the operations mentioned, see the following guides: * [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document) To learn about how the driver uses Context, see [Context.](https://mongodb.com/docs/drivers/go/current/fundamentals/context/#std-label-golang-context) To learn more about specifying hints, see [Indexes.](https://mongodb.com/docs/drivers/go/current/fundamentals/indexes/#std-label-golang-indexes) To learn more about collations, see [Collations.](https://mongodb.com/docs/drivers/go/current/fundamentals/collations/#std-label-golang-collations) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation: * [DeleteOne()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.DeleteOne)\n* [DeleteMany()](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#Collection.DeleteMany)\n* [DeleteOptions](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo/options#DeleteOptions)\n* [DeleteResult](https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.11.2/mongo#DeleteResult) ← [Insert a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/insert/ \"Previous Section\")[Change a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/change-a-document/ \"Next Section\") →",
  "https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/bulk/": " [Docs Home](https://www.mongodb.com/docs/) → [Go](https://mongodb.com/docs/drivers/go/current/) # Bulk Operations On this page * [Overview](#overview)\n* [Sample Data](#sample-data)\n* [Bulk Write](#bulk-write)\n* [Modify Behavior](#modify-behavior)\n* [Return Values](#return-values)\n* [Operations](#operations)\n* [Insert](#insert)\n* [Replace](#replace)\n* [Update](#update)\n* [Delete](#delete)\n* [Execution Order](#execution-order)\n* [Ordered](#ordered)\n* [Unordered](#unordered)\n* [Additional Information](#additional-information)\n* [Related Operations](#related-operations)\n* [API Documentation](#api-documentation) ## Overview In this guide, you can learn how to use **bulk operations**. Bulk operations perform a large number of write operations. Instead of making a call for each operation to the database, bulk operations perform multiple operations with one call to the database. ### Sample Data The examples in this guide use the following `Book` struct as a model for documents in the `books` collection: `| type Book struct { |\n| ------------------ |\n| Title  string      |\n| Author string      |\n| Length int32       |\n| }                  | ` To run the examples in this guide, load the sample data into the`db.books` collection with the following snippet: ```go coll := client.Database(\"db\").Collection(\"books\") docs := []interface{}{ \tBook{Title: \"My Brilliant Friend\", Author: \"Elena Ferrante\", Length: 331}, \tBook{Title: \"Lucy\", Author: \"Jamaica Kincaid\", Length: 103}, } result, err := coll.InsertMany(context.TODO(), docs) \n``` Each document contains a description of a book that includes the title, author, and page length corresponding to the `title`, `author`, and `length` fields in each document. ## Tip ### Non-existent Databases and Collections If the necessary database and collection don't exist when you perform a write operation, the server implicitly creates them. ## Bulk Write To perform a bulk operation, pass an array of [WriteModel](#std-label-golang-write-model) documents to the `BulkWrite()` method. ### Modify Behavior The `BulkWrite()` method optionally takes a `BulkWriteOptions`type, which represents options you can use to modify its behavior. If you don't specify a `BulkWriteOptions`, the driver uses the default values for each option. The `BulkWriteOptions` type allows you to configure options with the following methods: | Method                        | Description                                                                       |\n| ----------------------------- | --------------------------------------------------------------------------------- |\n| SetBypassDocumentValidation() | Whether to allow the write to opt-out of document level validation.Default: false |\n| SetOrdered()                  | Whether to stop performing write operations after an error occurs.Default: true   | ### Return Values The `BulkWrite()` method returns a `BulkWriteResult` type, which contains information about the bulk operation if it's successful. The`BulkWriteResult` type contains the following properties:\n\n ## Operations A `WriteModel` represents an insert, replace, update, or delete operation. ### Insert To perform an insert operation, create an `InsertOneModel` specifying the document you want to insert. To insert multiple documents, create an`InsertOneModel` for each document you want to insert. The `InsertOneModel` allows you to specify its behavior with the following method: | Method        | Description             |\n| ------------- | ----------------------- |\n| SetDocument() | The document to insert. | #### Example This following example creates two `InsertOneModel` instances to insert two documents: ```go models := []mongo.WriteModel{ \tmongo.NewInsertOneModel().SetDocument(Book{Title: \"Beloved\", Author: \"Toni Morrison\", Length: 324}), \tmongo.NewInsertOneModel().SetDocument(Book{Title: \"Outline\", Author: \"Rachel Cusk\", Length: 258}), } \n``` ### Replace To perform a replace operation, create a `ReplaceOneModel` specifying the document you want to replace and a [replacement document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/change-a-document/#std-label-golang-replacement-document). To replace multiple documents, create a`ReplaceOneModel` for each document you want to replace. The `ReplaceOneModel` allows you to specify its behavior with the following methods:\n\n #### Example The following example creates a `ReplaceOneModel` to replace a document where the `title` is \"Lucy\" with a new document: ```go models := []mongo.WriteModel{ \tmongo.NewReplaceOneModel().SetFilter(bson.D{{\"title\", \"Lucy\"}}). \t\tSetReplacement(Book{Title: \"On Beauty\", Author: \"Zadie Smith\", Length: 473}), } \n``` ### Update To perform an update operation, create an `UpdateOneModel` specifying the document you want to update and an [update document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/change-a-document/#std-label-golang-update-document). To update multiple documents, use the`UpdateManyModel`. The `UpdateOneModel` and `UpdateManyModel` allow you to specify their behavior with the following methods:\n\n #### Example The following example creates an `UpdateOneModel` to decrement a document's `length` by `15` if the `author` is \"Elena Ferrante\": ```go models := []mongo.WriteModel{ \tmongo.NewUpdateOneModel().SetFilter(bson.D{{\"author\", \"Elena Ferrante\"}}). \t\tSetUpdate(bson.D{{\"$inc\", bson.D{{\"length\", -15}}}}), } \n``` ### Delete To perform a delete operation, create a `DeleteOneModel` specifying the document you want to delete. To delete multiple documents, use the`DeleteManyModel`. The `DeleteOneModel` and `DeleteManyModel` allow you to specify their behavior with the following methods: | Method         | Description                                                                                                                                                                  |\n| -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| SetCollation() | The type of language collation to use when sorting results.                                                                                                                  |\n| SetFilter()    | The [query filter](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-filter-definition) specifying which document to delete. |\n| SetHint()      | The index to use to scan for documents.                                                                                                                                      | #### Example The following example creates a `DeleteManyModel` to delete documents where the `length` is greater than `300`: ```go models := []mongo.WriteModel{ \tmongo.NewDeleteManyModel().SetFilter(bson.D{{\"length\", bson.D{{\"$gt\", 300}}}}), } \n``` ## Execution Order The `BulkWrite()` method allows you to specify if you want to execute the bulk operations as ordered or unordered in its`BulkWriteOptions`. ### Ordered By default, the `BulkWrite()` method executes bulk operations in order you added them and stops if an error occurs. ## Tip This is equivalent to specifying `true` in the `SetOrdered()`method: ```go opts := options.BulkWrite().SetOrdered(true) \n``` ### Unordered To execute bulk write operations in any order and continue if an error occurs, specify `false` to the `SetOrdered()` method. The method reports the errors afterwards. #### Example The following example performs the following actions in any order:\n\n ```go models := []mongo.WriteModel{   mongo.NewInsertOneModel().SetDocument(Book{Title: \"Middlemarch\", Author: \"George Eliot\", Length: 904}),   mongo.NewInsertOneModel().SetDocument(Book{Title: \"Pale Fire\", Author: \"Vladimir Nabokov\", Length: 246}),   mongo.NewReplaceOneModel().SetFilter(bson.D{{\"title\", \"My Brilliant Friend\"}}).     SetReplacement(Book{Title: \"Atonement\", Author: \"Ian McEwan\", Length: 351}),   mongo.NewUpdateManyModel().SetFilter(bson.D{{\"length\", bson.D{{\"$lt\", 200}}}}).     SetUpdate(bson.D{{\"$inc\", bson.D{{\"length\", 10}}}}),   mongo.NewDeleteManyModel().SetFilter(bson.D{{\"author\", bson.D{{\"$regex\", \"Jam\"}}}}), } opts := options.BulkWrite().SetOrdered(false) results, err := coll.BulkWrite(context.TODO(), models, opts) if err != nil {    panic(err) } fmt.Printf(\"Number of documents inserted: %d\\n\", results.InsertedCount) fmt.Printf(\"Number of documents replaced or updated: %d\\n\", results.ModifiedCount) fmt.Printf(\"Number of documents deleted: %d\\n\", results.DeletedCount) \n``` VIEW OUTPUT The following documents are present in the `ratings` collection after the bulk operation: ``` {\"title\":\"Atonement\",\"author\":\"Ian McEwan\",\"length\":351} {\"title\":\"Middlemarch\",\"author\":\"George Eliot\",\"length\":904} {\"title\":\"Pale Fire\",\"author\":\"Vladimir Nabokov\",\"length\":246} \n``` ## Additional Information For a runnable example on performing a bulk operation, see[Perform Bulk Operations.](https://mongodb.com/docs/drivers/go/current/usage-examples/bulkWrite/#std-label-golang-bulk-ops-usage-example) ### Related Operations To learn more about performing the operations mentioned, see the following guides: * [Specify a Query](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/query-document/#std-label-golang-query-document)\n* [Insert a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/insert/#std-label-golang-insert-guide)\n* [Change a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/change-a-document/#std-label-golang-change-document)\n* [Delete a Document](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/delete/#std-label-golang-delete-guide)\n* [Bulk Write Operations](https://www.mongodb.com/docs/manual/core/bulk-write-operations/) ### API Documentation To learn more about any of the methods or types discussed in this guide, see the following API Documentation:\n\n ← [Insert or Update in a Single Operation](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/write-operations/upsert/ \"Previous Section\")[Compound Operations](https://mongodb.com/docs/drivers/go/current/fundamentals/crud/compound-operations/ \"Next Section\") →"
}