{
  "https://www.mongodb.com/docs/mongodb-vscode/crud-ops/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Perform CRUD Operations On this page * [Open a Playground to Perform CRUD Operations](#open-a-playground-to-perform-crud-operations) ## Note ### Preview MongoDB for VS Code is currently available as a **Preview** in the Visual Studio Marketplace. The product, its features, and the corresponding documentation may change during the Preview stage. Documents are individual records in a MongoDB collection and are the basic unit of data in MongoDB. You can use a MongoDB Playground to perform CRUD (create, read, update, and delete) operations on documents in a collection on a[connected deployment.](https://mongodb.com/docs/mongodb-vscode/connect/) Use the [MongoDB CRUD Operators](https://www.mongodb.com/docs/manual/crud/) and[shell methods](https://www.mongodb.com/docs/manual/reference/method/) to interact with your databases in MongoDB Playgrounds. ## Note You can also use your application to perform CRUD operations on documents using the appropriate [driver](https://www.mongodb.com/docs/drivers/). Playgrounds are meant to help you prototype database operations as you develop your application. ## Open a Playground to Perform CRUD Operations Before you can create, read, update, and delete documents using a MongoDB Playground, you must open one. 1 ### Open the Visual Studio Code Command Palette. In Visual Studio Code, press one of the following key combinations: * Control + Shift + P on Windows or Linux.\n* Command + Shift + P on macOS. The Command Palette provides quick access to commands and keyboard shortcuts. 2 ### Find and run the \"Create MongoDB Playground\" command. Use the Command Palette search bar to search for commands. All commands related to MongoDB for VS Code are prefaced withMongoDB:. When you run the MongoDB: Create MongoDB Playgroundcommand, MongoDB for VS Code opens a default playground template pre-configured with a few commands. ## Note To load new Playgrounds without the template, disable theUse Default Template For Playground setting. To learn more about MongoDB for VS Code settings, see [MongoDB for VS Code Settings.](https://mongodb.com/docs/mongodb-vscode/settings/#std-label-vsce-settings) ← [Create Time Series Collections](https://mongodb.com/docs/mongodb-vscode/time-series-collections/ \"Previous Section\")[Create Documents](https://mongodb.com/docs/mongodb-vscode/create-document-playground/ \"Next Section\") →",
  "https://www.mongodb.com/docs/mongodb-vscode/create-document-playground/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Create Documents On this page * [Prerequisites](#prerequisites)\n* [Create One Document](#create-one-document)\n* [Create Many Documents](#create-many-documents) You can create documents in a collection using the[MongoDB CRUD Operators](https://www.mongodb.com/docs/manual/crud/) in a MongoDB Playground: * Use the [insertOne()](https://www.mongodb.com/docs/manual/reference/method/db.collection.insertOne/) method to insert one document.\n* Use the [insertMany()](https://www.mongodb.com/docs/manual/reference/method/db.collection.insertMany/) method to insert more than one document. ## Prerequisites If you have not done so already, you must complete the following prerequisites before you can create documents with a MongoDB Playground: * [Create a connection to a MongoDB deployment.](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-connect-task)\n* [Activate the connection to the MongoDB deployment.](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-activate-connection)\n* [Open a MongoDB Playground.](https://mongodb.com/docs/mongodb-vscode/crud-ops/#std-label-open-playground-for-crud-vsce) ## Create One Document To create one document, use the following syntax in your Playground: `| db.collection.insertOne( |\n| ------------------------ |\n| <document>,              |\n| {                        |\n| writeConcern: <document> |\n| }                        |\n| )                        | ` ## Note If the database doesn't exist, insert operations will create it. For a detailed description of this method's parameters, see [insertOne()](https://www.mongodb.com/docs/manual/reference/method/db.collection.insertOne/)in the MongoDB Manual. To run your Playground, press the Play Button at the top right of the Playground View. MongoDB for VS Code splits your Playground and outputs the results of your Playground in the Playground Results.json pane. If you disabled split-view, MongoDB for VS Code outputs the results of your Playground in a new tab. ### Example To run this example, **start with a blank MongoDB Playground** by clearing the template Playground if it is loaded. The following example: 1. Switches to the `test` database.\n2. Inserts eight documents into the `test.sales` collection. ```javascript use(\"test\"); db.sales.insertOne(   { \"_id\" : 1, \"item\" : \"abc\", \"price\" : 10, \"quantity\" : 2, \"date\" : new Date(\"2014-03-01T08:00:00Z\")} ); \n``` When you press the Play Button, MongoDB for VS Code splits your Playground and outputs the following document in thePlayground Results.json pane. If you disabled split-view,MongoDB for VS Code outputs the following document in a new tab. If you manually move your playground results, MongoDB for VS Code displays the results in that tab. ```javascript {   acknowleged: 1,   insertedId: 1 } \n``` ## Create Many Documents To create many documents, use the following syntax in your Playground: ```javascript db.collection.insertMany(    [ <document 1> , <document 2>, ... ],    {       writeConcern: <document>,       ordered: <boolean>    } ) \n``` ## Note If the database doesn't exist, insert operations will create it. For a detailed description of this method's parameters, see [insertMany()](https://www.mongodb.com/docs/manual/reference/method/db.collection.insertMany/)in the MongoDB Manual.\n\n ### Example To run this example, **start with a blank MongoDB Playground** by clearing the template Playground if it is loaded. The following example: 1. Switches to the `test` database.\n2. Inserts eight documents into the `test.sales` collection. ```javascript use(\"test\"); db.sales.insertMany([   { \"_id\" : 2, \"item\" : \"abc\", \"price\" : 10, \"quantity\" : 2, \"date\" : new Date(\"2014-03-01T08:00:00Z\") },   { \"_id\" : 3, \"item\" : \"jkl\", \"price\" : 20, \"quantity\" : 1, \"date\" : new Date(\"2014-03-01T09:00:00Z\") },   { \"_id\" : 4, \"item\" : \"xyz\", \"price\" : 5, \"quantity\" : 10, \"date\" : new Date(\"2014-03-15T09:00:00Z\") },   { \"_id\" : 5, \"item\" : \"xyz\", \"price\" : 5, \"quantity\" :  20, \"date\" : new Date(\"2014-04-04T11:21:39.736Z\") },   { \"_id\" : 6, \"item\" : \"abc\", \"price\" : 10, \"quantity\" : 10, \"date\" : new Date(\"2014-04-04T21:23:13.331Z\") },   { \"_id\" : 7, \"item\" : \"def\", \"price\" : 7.5, \"quantity\": 5, \"date\" : new Date(\"2015-06-04T05:08:13Z\") },   { \"_id\" : 8, \"item\" : \"def\", \"price\" : 7.5, \"quantity\": 10, \"date\" : new Date(\"2015-09-10T08:43:00Z\") },   { \"_id\" : 9, \"item\" : \"abc\", \"price\" : 10, \"quantity\" : 5, \"date\" : new Date(\"2016-02-06T20:20:13Z\") }, ]); \n``` When you press the Play Button, MongoDB for VS Code splits your Playground and outputs the following document in thePlayground Results.json pane. If you disabled split-view,MongoDB for VS Code outputs the following document in a new tab. If you manually move your playground results, MongoDB for VS Code displays the results in that tab. ```javascript {   acknowleged: 1,   insertedIds: {     '0': 2,     '1': 3,     '2': 4,     '3': 5,     '4': 6,     '5': 7,     '6': 8,     '7': 9   } } \n``` ← [Perform CRUD Operations](https://mongodb.com/docs/mongodb-vscode/crud-ops/ \"Previous Section\")[Read Documents](https://mongodb.com/docs/mongodb-vscode/read-document-playground/ \"Next Section\") →",
  "https://www.mongodb.com/docs/mongodb-vscode/update-document-playground/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Update Documents On this page * [Prerequisites](#prerequisites)\n* [Update One Document](#update-one-document)\n* [Update Many Documents](#update-many-documents) You can update documents in a collection using the[MongoDB CRUD Operators](https://www.mongodb.com/docs/manual/crud/) in a MongoDB Playground: * Use the [updateOne()](https://www.mongodb.com/docs/manual/reference/method/db.collection.updateOne/) method to update one document.\n* Use the [updateMany()](https://www.mongodb.com/docs/manual/reference/method/db.collection.updateMany/) method to update more than one document. ## Prerequisites If you have not done so already, you must complete the following prerequisites before you can update documents with a MongoDB Playground: * [Create a connection to a MongoDB deployment.](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-connect-task)\n* [Activate the connection to the MongoDB deployment.](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-activate-connection)\n* [Open a MongoDB Playground.](https://mongodb.com/docs/mongodb-vscode/crud-ops/#std-label-open-playground-for-crud-vsce)\n* [Create Documents](https://mongodb.com/docs/mongodb-vscode/create-document-playground/#std-label-vsce-create-doc-playground) or create documents in a collection using a different method. ## Update One Document To update one document, use the following syntax in your Playground: `| db.collection.updateOne(                  |\n| ----------------------------------------- |\n| <filter>,                                 |\n| <update>,                                 |\n| {                                         |\n| upsert: <boolean>,                        |\n| writeConcern: <document>,                 |\n| collation: <document>,                    |\n| arrayFilters: [ <filterdocument1>, ... ], |\n| hint:  <document\\|string>                 |\n| }                                         |\n| )                                         | ` For a detailed description of this method's parameters, see [updateOne()](https://www.mongodb.com/docs/manual/reference/method/db.collection.updateOne/)in the MongoDB Manual. To run your Playground, press the Play Button at the top right of the Playground View. MongoDB for VS Code splits your Playground and outputs the results of your Playground in the Playground Results.json pane. If you disabled split-view, MongoDB for VS Code outputs the results of your Playground in a new tab. ### Example The following example: 1. Switches to the `test` database.\n2. Updates one document in the `test.sales` collection that matches the filter. ```  use(\"test\"); db.sales.updateOne(   { \"_id\" : 1},   { $inc: { \"quantity\" : 1 }} ); \n```\n\n ```javascript {   acknowleged: 1,   matchedCount: 1,   modifiedCount: 1,   upsertedCount: 0,   insertedId: null } \n``` ## Update Many Documents To update many documents, use the following syntax in your Playground: ```javascript db.collection.updateMany(    <filter>,    <update>,    {      upsert: <boolean>,      writeConcern: <document>,      collation: <document>,      arrayFilters: [ <filterdocument1>, ... ],      hint:  <document|string>    } ) \n``` For a detailed description of this method's parameters, see [updateMany()](https://www.mongodb.com/docs/manual/reference/method/db.collection.updateMany/)in the MongoDB Manual. To run your Playground, press the Play Button at the top right of the Playground View. MongoDB for VS Code splits your Playground and outputs the results of your Playground in the Playground Results.json pane. If you disabled split-view, MongoDB for VS Code outputs the results of your Playground in a new tab. ### Example The following example: 1. Switches to the `test` database.\n2. Updates all documents in the `test.sales` collection that match the filter. ```javascript use(\"test\"); db.sales.updateMany(   { \"item\" : \"abc\" },   { $set: { \"price\": 9 }} ); \n``` When you press the Play Button, MongoDB for VS Code splits your Playground and outputs the following document in thePlayground Results.json pane. If you disabled split-view,MongoDB for VS Code outputs the following document in a new tab. If you manually move your playground results, MongoDB for VS Code displays the results in that tab. ```javascript {   acknowleged: 1,   matchedCount: 3,   modifiedCount: 3,   upsertedCount: 0,   insertedId: null } \n``` ← [Read Documents](https://mongodb.com/docs/mongodb-vscode/read-document-playground/ \"Previous Section\")[Delete Documents](https://mongodb.com/docs/mongodb-vscode/delete-document-playground/ \"Next Section\") →",
  "https://www.mongodb.com/docs/mongodb-vscode/reference/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Reference ← [Create an Atlas Cluster from a Template using Terraform](https://mongodb.com/docs/mongodb-vscode/create-cluster-terraform/ \"Previous Section\")[MongoDB for VS Code Commands](https://mongodb.com/docs/mongodb-vscode/commands/ \"Next Section\") →",
  "https://www.mongodb.com/docs/mongodb-vscode/settings/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # MongoDB for VS Code Settings On this page * [Configure Settings](#configure-settings)\n* [Settings](#settings) ## Note ### Preview MongoDB for VS Code is currently available as a **Preview** in the Visual Studio Marketplace. The product, its features, and the corresponding documentation may change during the Preview stage. This document lists the configurable settings for MongoDB for VS Code. ## Configure Settings To configure MongoDB for VS Code settings: 1 ### Open the Settings View. | Operating System  | Method                  | Actions                              |\n| ----------------- | ----------------------- | ------------------------------------ |\n| Any               | Visual Studio Code Menu | File / Code \\>Preferences \\>Settings |\n| MacOS             | Keyboard Shortcut       | Press Command \\+ ,                   |\n| Windows and Linux | Keyboard Shortcut       | Press Ctrl \\+ ,                      | 2 ### Search \"MongoDB\" in the Settings search bar. MongoDB for VS Code extension settings are displayed. Changes you make are saved automatically. ## Settings The following table lists the available settings forMongoDB for VS Code:\n\n ← [MongoDB for VS Code Commands](https://mongodb.com/docs/mongodb-vscode/commands/ \"Previous Section\")",
  "https://www.mongodb.com/docs/mongodb-vscode/connect/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Connect to Your MongoDB Deployment On this page * [Considerations](#considerations)\n* [Create a Connection to a Deployment](#create-a-connection-to-a-deployment)\n* [Activate a Connection](#activate-a-connection)\n* [Rename a Connection](#rename-a-connection)\n* [Disconnect from a Deployment](#disconnect-from-a-deployment)\n* [Remove a Connection](#remove-a-connection) ## Note ### Preview MongoDB for VS Code is currently available as a **Preview** in the Visual Studio Marketplace. The product, its features, and the corresponding documentation may change during the Preview stage. This page outlines how to use MongoDB for VS Code to connect to a MongoDB host. You can connect to a standalone, replica set, or sharded cluster host. ## Note ### MongoDB Atlas If you need to create a MongoDB host, consider using[MongoDB Atlas](https://www.mongodb.com/cloud/atlas?tck=docs%5Fvsce).Atlas is a cloud-hosted database-as-a-service which requires no installation, offers a free tier to get started, and provides a copyable URI to easily connect MongoDB for VS Code to your deployment. To create a cluster on the Atlas free tier, run the command`MongoDB: Open Overview Page` in the Visual Studio Code Command Palette and then click Create free cluster. To create an Atlas cluster using a Terraform template included with MongoDB for VS Code, see [Create an Atlas Cluster from a Template using Terraform.](https://mongodb.com/docs/mongodb-vscode/create-cluster-terraform/#std-label-vsce-create-cluster-terraform) If you need to install MongoDB for VS Code, see [Install MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/install/#std-label-vsce-install) for instructions. ## Considerations * When connecting MongoDB for VS Code to a replica set, use either the replica set SRV record or Replica Set Namewhen filling in your connection information. It is not recommended to connect directly to an individual replica set member.  \n   * If the member to which you are connected switches from a[primary](https://www.mongodb.com/docs/manual/core/replica-set-primary/) member to a[secondary](https://www.mongodb.com/docs/manual/core/replica-set-secondary/) or vice versa as the result of an election, MongoDB for VS Code may either forcibly close the connection or display stale data.\n* You can't connect MongoDB for VS Code directly to an [analytics node.](https://www.mongodb.com/docs/atlas/faq/#what-are-analytics-nodes)\n* MongoDB for VS Code appends the `appName` connection string option with a value of `mongodb-vscode <version>` for all deployment connections. ## Create a Connection to a Deployment MongoDB for VS Code provides two methods to create a connection to a deployment. You can: * Provide a deployment connection string, or\n* Fill in a deployment information in specific fields. Providing a connection string is faster and easier than filling in a deployment's details. Use this option if Atlas hosts your deployment or if you have a connection string for a deployment available. Define how your connection is saved with theDefault Connection Saving Location [setting:](https://mongodb.com/docs/mongodb-vscode/settings/#std-label-vsce-settings)\n\n ## Activate a Connection You can connect MongoDB for VS Code to only one deployment at a time. To change the active connection to a different deployment, or to connect to a deployment from which you were disconnected: 1 ### In Visual Studio Code, click the MongoDB view in the Activity Bar. 2 ### Right-click the connection you want to activate, then click Connect. ### Launch MongoDB Shell You can connect the [MongoDB Shell](https://www.mongodb.com/docs/mongodb-shell/) or legacy[mongo](https://www.mongodb.com/docs/manual/reference/mongo/#mongodb-binary-bin.mongo) shell to your active deployment. #### Considerations * The shell that MongoDB for VS Code uses to connect to your deployment is determined by the Shell setting in your[extension settings](https://mongodb.com/docs/mongodb-vscode/settings/#std-label-vsce-settings). You can choose either the [MongoDB Shell](https://www.mongodb.com/docs/mongodb-shell/) or the legacy [mongo](https://www.mongodb.com/docs/manual/reference/mongo/#mongodb-binary-bin.mongo) shell.\n* The path to your selected shell must exist in your system's `PATH`. If it does not exist in your `PATH`, the operation errors. #### Procedure To connect the shell to your active deployment: 1. In the MongoDB for VS Code Connections list, right-click your active deployment.\n2. Select Launch MongoDB Shell. MongoDB for VS Code opens the Terminal window in VS Code and launches the shell connected to your selected deployment. ## Tip ### See also:  [Perform CRUD Operations in the MongoDB Shell](https://www.mongodb.com/docs/mongodb-shell/crud/) ## Rename a Connection To rename a connection to a deployment in MongoDB for VS Code: 1 ### In Visual Studio Code, click the MongoDB view in the Activity Bar. 2 ### Right-click the connection you want to activate, then click Rename Connection. 3 ### Rename the connection. 1. In the Command Palette, type a new name for the connection.\n2. Press the **Enter** or **Return** key to rename the connection. ## Disconnect from a Deployment MongoDB for VS Code provides two methods to disconnect from a deployment. You can: * Disconnect with the Command Palette, or\n* Disconnect from the MongoDB view in theActivity Bar. Disconnecting from a MongoDB instance closes the MongoDB for VS Code connection to the active instance. You must [reconnect](#std-label-vsce-connect-task) to interact with data in your deployment again. ## Remove a Connection MongoDB for VS Code provides two methods to remove a connection to a deployment fromVisual Studio Code. You can: * Remove a connection with the Command Palette, or\n* Remove a connection from the MongoDB view in theActivity Bar. ## Important Removing a connection from Visual Studio Code removes it both from the current workspace and from Visual Studio Code globally. ## Tip ### See also:  [Connect to a Deployment from a Playground](https://mongodb.com/docs/mongodb-vscode/playgrounds/#std-label-playground-connect-to-deployment) ← [Install MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/install/ \"Previous Section\")[Navigate Your Data](https://mongodb.com/docs/mongodb-vscode/databases-collections/ \"Next Section\") →",
  "https://www.mongodb.com/docs/mongodb-vscode/install/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Install MongoDB for VS Code On this page * [Prerequisites](#prerequisites)\n* [Procedure](#procedure) ## Note ### Preview MongoDB for VS Code is currently available as a **Preview** in the Visual Studio Marketplace. The product, its features, and the corresponding documentation may change during the Preview stage. ## Prerequisites Before you can install MongoDB for VS Code, you must install Visual Studio Code. You can download Visual Studio Code from [https://code.visualstudio.com/.](https://code.visualstudio.com/) ## Procedure 1 ### Open the Extensions View. In Visual Studio Code, click the Extensions icon in the left navigation. Alternatively, you can open the Extensions view by pressing: * Control + Shift + X or\n* Command + Shift + X. 2 ### Search \"MongoDB for VS Code\" in the extension marketplace. 3 ### Click Install on the \"MongoDB for VS Code\" extension. Once the installation is complete, the Install button changes to the Manage gear button. Once you install MongoDB for VS Code, you can [view data in your deployment](https://mongodb.com/docs/mongodb-vscode/databases-collections/#std-label-vsce-databases-collections) and [create Playgrounds to interact with your data.](https://mongodb.com/docs/mongodb-vscode/playgrounds/#std-label-vsce-playgrounds) To configure MongoDB for VS Code settings, see [MongoDB for VS Code Settings.](https://mongodb.com/docs/mongodb-vscode/settings/#std-label-vsce-settings) ← [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/ \"Previous Section\")[Connect to Your MongoDB Deployment](https://mongodb.com/docs/mongodb-vscode/connect/ \"Next Section\") →",
  "https://www.mongodb.com/docs/mongodb-vscode/require-modules/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Use `require()` to Include External Modules On this page * [Require Native Modules](#require-native-modules)\n* [Require Non-Native Modules](#require-non-native-modules) ## Note ### Preview MongoDB for VS Code is currently available as a **Preview** in the Visual Studio Marketplace. The product, its features, and the corresponding documentation may change during the Preview stage. ## Important A complete description of Node.js, modules, and the[require()](https://nodejs.org/api/modules.html#modules%5Frequire%5Fid)function is out of scope for this tutorial. To learn more, refer to the [Node.js Documentation.](https://nodejs.org/api/modules.html) You can use the[require()](https://nodejs.org/api/modules.html#modules%5Frequire%5Fid)function in your MongoDB Playgrounds to include modules which exist in separate files. ## Require Native Modules You can `require()` native Node modules (such as[fs](https://nodejs.org/api/fs.html#fs%5Ffile%5Fsystem)) in your Playground without any additional setup or configuration. ## Example The following Playground uses the `fs` module to write a document from the `test.employees` collection to a file named`employee.txt`: `| const fs = require('fs');                                   |\n| ----------------------------------------------------------- |\n| use(\"test\");                                                |\n| const document = db.employees.findOne();                    |\n| fs.writeFileSync('employee.txt', JSON.stringify(document)); | ` ## Tip ### See also:  * [fs.writeFileSync](https://nodejs.org/api/fs.html#fs%5Ffs%5Fwritefilesync%5Ffile%5Fdata%5Foptions)\n* [require()](https://nodejs.org/api/modules.html#modules%5Frequire%5Fid) ## Require Non-Native Modules To `require()` non-native Node modules (such as those downloaded from[npm](https://www.npmjs.com/)) you must install the module in one of the following folders based on your operating system:\n\n Once you install or copy your desired package to one of the module directories, you can `require()` that package. ## Example The following Playground uses the[moment](https://www.npmjs.com/package/moment) package to write the current date to a file called `date.txt`: ```javascript const moment = require('moment'); const fs = require('fs'); const currentDate = moment().format(\"MMMM DD YYYY\"); fs.writeFileSync('date.txt', currentDate); \n``` ## Tip ### See also:  * [fs.writeFileSync](https://nodejs.org/api/fs.html#fs%5Ffs%5Fwritefilesync%5Ffile%5Fdata%5Foptions)\n* [require()](https://nodejs.org/api/modules.html#modules%5Frequire%5Fid) ← [Export a Query or Pipeline to Language](https://mongodb.com/docs/mongodb-vscode/export-to-language/ \"Previous Section\")[Create an Atlas Cluster from a Template using Terraform](https://mongodb.com/docs/mongodb-vscode/create-cluster-terraform/ \"Next Section\") →",
  "https://www.mongodb.com/docs/mongodb-vscode/read-document-playground/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Read Documents On this page * [Prerequisites](#prerequisites)\n* [Read One Document](#read-one-document)\n* [Read Many Documents](#read-many-documents) You can read documents in a collection using the[MongoDB CRUD Operators](https://www.mongodb.com/docs/manual/crud/) in a MongoDB Playground: * Use the [findOne()](https://www.mongodb.com/docs/manual/reference/method/db.collection.findOne/) method to read one document.\n* Use the [find()](https://www.mongodb.com/docs/manual/reference/method/db.collection.find/) method to read more than one document. ## Note You can open a [JavaScript Playground](https://mongodb.com/docs/mongodb-vscode/crud-ops/#std-label-vsce-crud)pre-configured to search a collection by hovering over theDocuments label in the navigation panel and clicking the icon that appears. ## Prerequisites If you have not done so already, you must complete the following prerequisites before you can read documents with a MongoDB Playground: * [Create a connection to a MongoDB deployment.](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-connect-task)\n* [Activate the connection to the MongoDB deployment.](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-activate-connection)\n* [Open a MongoDB Playground.](https://mongodb.com/docs/mongodb-vscode/crud-ops/#std-label-open-playground-for-crud-vsce)\n* [Create Documents](https://mongodb.com/docs/mongodb-vscode/create-document-playground/#std-label-vsce-create-doc-playground) or create documents in a collection using a different method. ## Read One Document To read one document, use the following syntax in your Playground: `| db.collection.findOne( |\n| ---------------------- |\n| { <query> },           |\n| { <projection> }       |\n| )                      | ` If multiple documents satisfy the query, this method returns the first document according to the[natural order](https://www.mongodb.com/docs/manual/reference/glossary/#term-natural-order) which reflects the order of documents on the disk. To learn more about this method's parameters, see [findOne()](https://www.mongodb.com/docs/manual/reference/method/db.collection.findOne/) in the MongoDB Manual. To run your Playground, press the Play Button at the top right of the Playground View. MongoDB for VS Code splits your Playground and outputs the results of your Playground in the Playground Results.json pane. If you disabled split-view, MongoDB for VS Code outputs the results of your Playground in a new tab. You may edit any JSON document returned from a [findOne()](https://www.mongodb.com/docs/manual/reference/method/db.collection.findOne/) or [find()](https://www.mongodb.com/docs/manual/reference/method/db.collection.find/)operation. 1. At the top of this document, click Edit Document.MongoDB for VS Code opens it as an editable EJSON document titled `<database>.<collection>:\"<_id>\".json`.\n2. Make any edits you require.\n3. Press `Ctrl + S` (Windows/Linux) or `Cmd + S` to save the edited document to the MongoDB database.  \n   * If the update succeeds, MongoDB for VS Code confirms that the database has stored the change.  \n   * If the update results in an error, MongoDB for VS Code displays it. ### Example To run this example, **start with a blank MongoDB Playground** by clearing the template Playground if it is loaded. The following example: 1. Switches to the `test` database.\n2. Reads one document in the `test.sales` collection that matches the query.\n\n use(\"test\"); db.sales.findOne(   { \"_id\" : 1 },   { \"_id\" : 0 } ); \n``` When you press the Play Button, MongoDB for VS Code splits your Playground and outputs the following document in thePlayground Results.json pane. If you disabled split-view,MongoDB for VS Code outputs the following document in a new tab. If you manually move your playground results, MongoDB for VS Code displays the results in that tab. ```javascript {   item: 'abc',   price: 10,   quantity: 2,   date: 2014-03-01T08:00:00.000Z } \n``` ## Read Many Documents To read many documents, use the following syntax in your Playground: ```javascript db.collection.find(    { <query> },    { <projection> } ) \n``` For a detailed description of this method's parameters, see [find()](https://www.mongodb.com/docs/manual/reference/method/db.collection.find/)in the MongoDB Manual. To run your Playground, press the Play Button at the top right of the Playground View. MongoDB for VS Code splits your Playground and outputs the results of your Playground in the Playground Results.json pane. If you disabled split-view, MongoDB for VS Code outputs the results of your Playground in a new tab. ### Example To run this example, **start with a blank MongoDB Playground** by clearing the template Playground if it is loaded. The following example: 1. Switches to the `test` database.\n2. Reads all documents in the `test.sales` collection that match the query. ```javascript use(\"test\"); db.sales.find(   { \"item\" : \"abc\" },   { \"price\" : 1 } ); \n``` When you press the Play Button, MongoDB for VS Code splits your Playground and outputs the following document in thePlayground Results.json pane. If you disabled split-view,MongoDB for VS Code outputs the following document in a new tab. If you manually move your playground results, MongoDB for VS Code displays the results in that tab. ```javascript [   {     _id: 2,     price: 10   },   {     _id: 6,     price: 10   },   {     _id: 9,     price: 10   },   {     _id: 1,     price: 10   } ] \n``` ← [Create Documents](https://mongodb.com/docs/mongodb-vscode/create-document-playground/ \"Previous Section\")[Update Documents](https://mongodb.com/docs/mongodb-vscode/update-document-playground/ \"Next Section\") →",
  "https://www.mongodb.com/docs/mongodb-vscode/delete-document-playground/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Delete Documents On this page * [Prerequisites](#prerequisites)\n* [Delete One Document](#delete-one-document)\n* [Delete Many Documents](#delete-many-documents) You delete documents in a collection using the[MongoDB CRUD Operators](https://www.mongodb.com/docs/manual/crud/) in a MongoDB Playground: * Use the [deleteOne()](https://www.mongodb.com/docs/manual/reference/method/db.collection.deleteOne/) method to delete one document.\n* Use the [deleteMany()](https://www.mongodb.com/docs/manual/reference/method/db.collection.deleteMany/) method to delete more than one document. ## Prerequisites If you have not done so already, you must complete the following prerequisites before you can delete documents with a MongoDB Playground: * [Create a connection to a MongoDB deployment.](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-connect-task)\n* [Activate the connection to the MongoDB deployment.](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-activate-connection)\n* [Open a MongoDB Playground.](https://mongodb.com/docs/mongodb-vscode/crud-ops/#std-label-open-playground-for-crud-vsce)\n* [Create Documents](https://mongodb.com/docs/mongodb-vscode/create-document-playground/#std-label-vsce-create-doc-playground) or create documents in a collection using a different method.. ## Delete One Document To delete one document, use the following syntax in your Playground: `| db.collection.deleteOne(  |\n| ------------------------- |\n| <filter>,                 |\n| {                         |\n| writeConcern: <document>, |\n| collation: <document>     |\n| }                         |\n| )                         | ` For a detailed description of this method's parameters, see [deleteOne()](https://www.mongodb.com/docs/manual/reference/method/db.collection.deleteOne/)in the MongoDB Manual. To run your Playground, press the Play Button at the top right of the Playground View. MongoDB for VS Code splits your Playground and outputs the results of your Playground in the Playground Results.json pane. If you disabled split-view, MongoDB for VS Code outputs the results of your Playground in a new tab. ### Example To run this example, **start with a blank MongoDB Playground** by clearing the template Playground if it is loaded. The following example: 1. Switches to the `test` database.\n2. Deletes one document in the `test.sales` collection that matches the query. ```javascript use(\"test\"); db.sales.deleteOne(   { \"_id\" : 1 } ); \n``` When you press the Play Button, MongoDB for VS Code splits your Playground and outputs the following document in thePlayground Results.json pane. If you disabled split-view,MongoDB for VS Code outputs the following document in a new tab. If you manually move your playground results, MongoDB for VS Code displays the results in that tab. ```javascript {   acknowleged: 1,   deletedCount: 1 } \n``` ## Delete Many Documents To delete many documents, use the following syntax in your Playground: ```javascript db.collection.deleteMany(    <filter>,    {       writeConcern: <document>,       collation: <document>    } ) \n``` For a detailed description of this method's parameters, see [deleteMany()](https://www.mongodb.com/docs/manual/reference/method/db.collection.deleteMany/)in the MongoDB Manual.\n\n ### Example To run this example, **start with a blank MongoDB Playground** by clearing the template Playground if it is loaded. The following example: 1. Switches to the `test` database.\n2. Deletes all documents in the `test.sales` collection that match the query. ```javascript use(\"test\"); db.sales.deleteMany(   { \"item\" : \"abc\" } ); \n``` When you press the Play Button, MongoDB for VS Code splits your Playground and outputs the following document in thePlayground Results.json pane. If you disabled split-view,MongoDB for VS Code outputs the following document in a new tab. If you manually move your playground results, MongoDB for VS Code displays the results in that tab. ```javascript {   acknowleged: 1,   deletedCount: 3 } \n``` ← [Update Documents](https://mongodb.com/docs/mongodb-vscode/update-document-playground/ \"Previous Section\")[Run Aggregation Pipelines](https://mongodb.com/docs/mongodb-vscode/run-agg-pipelines/ \"Next Section\") →",
  "https://www.mongodb.com/docs/mongodb-vscode/create-cluster-terraform/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Create an Atlas Cluster from a Template using Terraform On this page * [Prerequisites](#prerequisites)\n* [Procedures](#procedures) ## Note ### Preview MongoDB for VS Code is currently available as a **Preview** in the Visual Studio Marketplace. The product, its features, and the corresponding documentation may change during the Preview stage. This page outlines how to use the Atlas template for Terraform files included with the MongoDB Extension for Visual Studio Code to create Shared Tier Atlas clusters. After loading the template, you configure the cluster and provide details about your Atlas account. You then use Terraform commands to plan, apply, and destroy your Atlas cluster. ## Prerequisites Before you use the Atlas template for Terraform files included with the MongoDB Extension for Visual Studio Code, you must: * [Install MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/install/#std-label-vsce-install)\n* [Install Terraform](https://learn.hashicorp.com/terraform/getting-started/install.html)\n* Have an [Atlas account.](https://www.mongodb.com/docs/atlas/tutorial/create-atlas-account/)\n* Have an [Atlas organization.](https://www.mongodb.com/docs/atlas/tutorial/manage-organizations/)\n* Have an [API key in an organization](https://www.mongodb.com/docs/atlas/tutorial/manage-programmatic-access/) with the`Organization Owner` or `Organization Project Creator` [role.](https://www.mongodb.com/docs/atlas/reference/user-roles/) ## Procedures ### Create an Atlas Terraform File using the Template Use the Atlas template for Terraform files included with the MongoDB for VS Codeto configure an Atlas cluster: 1 #### In Visual Studio Code, create a new file. | Operating System  | Method                  | Actions            |\n| ----------------- | ----------------------- | ------------------ |\n| Any               | Visual Studio Code Menu | File \\> New File   |\n| MacOS             | Keyboard Shortcut       | Press Command \\+ N |\n| Windows and Linux | Keyboard Shortcut       | Press Control \\+ N | 2 #### Save the file. Name it `main.tf`. ## Note `main.tf` is the recommended filename for the entry point to a Terraform module. 3 #### In the `main.tf` file, type `atlas`, then press the **Enter** or **Return** key. The MongoDB Extension for VSCode populates the file with an example configuration using the [MongoDB Atlas](https://www.terraform.io/docs/providers/mongodbatlas/index.html)Terraform provider to create a Shared Tier Atlas cluster. 4 #### Update the Atlas Terraform configuration to configure your cluster. The cursor moves to select the value of the `name` argument of the`mongodbatlas_project` resource. Provide values for the following arguments to configure your cluster: ## Tip Press the **Tab** key to select to the next argument in the template that you should update.\n\n 5 #### Update the `local` variables. ## Warning The `local` variables contain sensitive information. **Do not**check these values in to a repository that is available publicly. Provide values for the following `local` variables: | Variable                                 | Value                                                                              |\n| ---------------------------------------- | ---------------------------------------------------------------------------------- |\n| mongodb\\_atlas\\_api\\_pub\\_key            | Atlas public API key.                                                              |\n| mongodb\\_atlas\\_api\\_pri\\_key            | Atlas private API key.                                                             |\n| mongodb\\_atlas\\_org\\_id                  | Atlas organization ID in which you want to create a project.                       |\n| mongodb\\_atlas\\_database\\_username       | Username of the MongoDB database user that Atlas creates for your cluster.         |\n| mongodb\\_atlas\\_database\\_user\\_password | Password for the MongoDB database user named inmongodb\\_atlas\\_database\\_username. |\n| mongodb\\_atlas\\_whitelistip              | IP address or CIDR block from which your Atlas cluster is accessible.              | ## Note ### Use an Input Variables File to Maximize security To maximize security, consider taking the following steps: 1. Define the `local` variables in an [input variables](https://learn.hashicorp.com/terraform/getting-started/variables.html)file.  \n## Example  \n`| variable \"mongodb_atlas_api_pub_key\" { |  \n| -------------------------------------- |  \n| default = \"my-public-key\"              |  \n| }                                      |  \n| variable \"mongodb_atlas_api_pri_key\" { |  \n| default = \"my-private-key\"             |  \n| }                                      |  \n`\n2. Exclude the input variables file from your repository. For example, add the filename to the `.gitignore` file for your repository.\n3. Reference variables from the input variables file in the`main.tf` file by prefacing them with `vars.`.  \n## Example  \n```  \nprovider \"mongodbatlas\" {  \n  public_key  = vars.mongodb_atlas_api_pub_key  \n  private_key = vars.mongodb_atlas_api_pri_key  \n}  \n``` 6 #### Add optional configuration options to the `main.tf` file.\n\n ## Note Shared Tier Atlas clusters don't support all configurations available with the MongoDB Atlas Terraform provider. For a list of unsupported configurations, see the [Atlas documentation.](https://www.mongodb.com/docs/atlas/reference/free-shared-limitations/) 7 #### Save the `main.tf` file. ### Create the Atlas Cluster using Terraform After you create a Terraform file using the template, create theAtlas cluster: 1 #### Navigate to the directory in which you saved your `main.tf` file. 2 #### Run the `terraform init` command to install the required providers. ```shell terraform init \n``` The following output indicates that the MongoDB Atlas Terraform Provider is installed and ready for use: ```shell 1 Initializing the backend... 2  3 Initializing provider plugins... 4 - Checking for available provider plugins... 5 - Downloading plugin for provider \"mongodbatlas\" (terraform-providers/mongodbatlas) 0.5.1... 6  7 The following providers do not have any version constraints in configuration, 8 so the latest version was installed. 9  10 To prevent automatic upgrades to new major versions that may contain breaking 11 changes, it is recommended to add version = \"...\" constraints to the 12 corresponding provider blocks in configuration, with the constraint strings 13 suggested below. 14  15 * provider.mongodbatlas: version = \"~> 0.5\" 16  17 Terraform has been successfully initialized! \n``` 3 #### Run the `terraform plan` command to view what happens when you apply the configuration. ```shell terraform plan \n``` The following output shows what happens when you apply the Terraform configuration: ```shell 1 Refreshing Terraform state in-memory prior to plan... 2 The refreshed state will be used to calculate this plan, but will not be 3 persisted to local or remote state storage. 4  5  6 ------------------------------------------------------------------------ 7  8 An execution plan has been generated and is shown below. 9 Resource actions are indicated with the following symbols: 10   + create 11  12 Terraform will perform the following actions: 13  14   # mongodbatlas_cluster.my_cluster will be created 15   + resource \"mongodbatlas_cluster\" \"my_cluster\" { 16       + advanced_configuration       = (known after apply) 17       + auto_scaling_disk_gb_enabled = false 18       + backing_provider_name        = \"AWS\" 19       + backup_enabled               = false 20       + bi_connector                 = (known after apply) 21       + cluster_id                   = (known after apply) 22       + cluster_type                 = (known after apply) 23       + connection_strings           = (known after apply) 24       + disk_size_gb                 = 2 25       + encryption_at_rest_provider  = (known after apply) 26       + id                           = (known after apply) 27       + mongo_db_major_version       = \"4.2\" 28       + mongo_db_version             = (known after apply) 29       + mongo_uri                    = (known after apply) 30       + mongo_uri_updated            = (known after apply) 31       + mongo_uri_with_options       = (known after apply) 32       + name                         = \"atlasClusterName\" 33\n\n 34       + paused                       = (known after apply) 35       + pit_enabled                  = (known after apply) 36       + project_id                   = (known after apply) 37       + provider_backup_enabled      = false 38       + provider_disk_iops           = (known after apply) 39       + provider_disk_type_name      = (known after apply) 40       + provider_encrypt_ebs_volume  = (known after apply) 41       + provider_instance_size_name  = \"M2\" 42       + provider_name                = \"TENANT\" 43       + provider_region_name         = \"providerRegionName\" 44       + provider_volume_type         = (known after apply) 45       + replication_factor           = (known after apply) 46       + snapshot_backup_policy       = (known after apply) 47       + srv_address                  = (known after apply) 48       + state_name                   = (known after apply) 49  50       + labels { 51           + key   = (known after apply) 52           + value = (known after apply) 53         } 54  55       + replication_specs { 56           + id         = (known after apply) 57           + num_shards = (known after apply) 58           + zone_name  = (known after apply) 59  60           + regions_config { 61               + analytics_nodes = (known after apply) 62               + electable_nodes = (known after apply) 63               + priority        = (known after apply) 64               + read_only_nodes = (known after apply) 65               + region_name     = (known after apply) 66             } 67         } 68     } 69  70   # mongodbatlas_database_user.my_user will be created 71   + resource \"mongodbatlas_database_user\" \"my_user\" { 72       + auth_database_name = \"admin\" 73       + id                 = (known after apply) 74       + password           = (sensitive value) 75       + project_id         = (known after apply) 76       + username           = \"jww\" 77       + x509_type          = \"NONE\" 78  79       + labels { 80           + key   = (known after apply) 81           + value = (known after apply) 82         } 83  84       + roles { 85\n\n 86           + database_name   = \"admin\" 87           + role_name       = \"atlasAdmin\" 88         } 89     } 90  91   # mongodbatlas_project.my_project will be created 92   + resource \"mongodbatlas_project\" \"my_project\" { 93       + cluster_count = (known after apply) 94       + created       = (known after apply) 95       + id            = (known after apply) 96       + name          = \"atlasProjectName\" 97       + org_id        = \"5d3716bfcf09a21576d7983e\" 98     } 99  100   # mongodbatlas_project_ip_whitelist.my_ipaddress will be created 101   + resource \"mongodbatlas_project_ip_whitelist\" \"my_ipaddress\" { 102       + aws_security_group = (known after apply) 103       + cidr_block         = (known after apply) 104       + comment            = \"My IP Address\" 105       + id                 = (known after apply) 106       + ip_address         = \"204.210.139.18\" 107       + project_id         = (known after apply) 108     } 109  110 Plan: 4 to add, 0 to change, 0 to destroy. 111  112 ------------------------------------------------------------------------ 113  114 Note: You didn't specify an \"-out\" parameter to save this plan, so Terraform 115 can't guarantee that exactly these actions will be performed if 116 \"terraform apply\" is subsequently run. \n``` Proceed to the next step if the information is correct. 4 #### Run the `terraform apply` command to create an Atlas cluster from the Terraform configuration. ```shell terraform apply \n``` Type `yes` when prompted to confirm that you want to apply the configuration. ## Note The `terraform apply` command might take several minutes to complete. The following output indicates that your Atlas cluster is created. You can [create a connection](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-connect-task) to this deployment using the MongoDB for VS Code with the displayed connection strings: ```shell 1 Apply complete! Resources: 4 added, 0 changed, 0 destroyed. 2  3 Outputs: 4  5 connection_strings = [ 6   [ 7     { 8       \"aws_private_link\" = {} 9       \"aws_private_link_srv\" = {} 10       \"private\" = \"\" 11       \"private_srv\" = \"\" 12       \"standard\" = \"mongodb://myCluster-shard-00-00-xxxxx.mongodb.net:27017,myCluster-shard-00-01-xxxxx.mongodb.net:27017,myCluster-shard-00-02-xxxxx.mongodb.net:27017/?ssl=true&authSource=admin&replicaSet=myCluster-shard-0\" 13       \"standard_srv\" = \"mongodb+srv://myCluster-xxxxx.mongodb.net\" 14     }, 15   ], 16 ] \n``` ### Delete the Atlas Cluster using Terraform ## Warning Deleting a cluster destroys databases, collections, and documents stored on it **and** all other resources defined in the Terraform configuration in which you configured the cluster. Proceed with caution. To delete the Atlas cluster: 1 #### Navigate to the directory in which you saved your `main.tf` file. 2 #### Run the `terraform destroy` command to install the required providers. ```shell terraform destroy \n``` Type `yes` when prompted to confirm that you want to destroy the resources defined in the configuration.\n\n The `terraform destroy` command might take several minutes to complete. The following output indicates that the Atlas cluster and all associated resources are deleted: ```shell Destroy complete! Resources: 4 destroyed. \n``` ← [Use require() to Include External Modules](https://mongodb.com/docs/mongodb-vscode/require-modules/ \"Previous Section\")[Reference](https://mongodb.com/docs/mongodb-vscode/reference/ \"Next Section\") →",
  "https://www.mongodb.com/docs/mongodb-vscode/run-agg-pipelines/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Run Aggregation Pipelines On this page * [Open a Playground to Run Aggregation Pipelines](#open-a-playground-to-run-aggregation-pipelines)\n* [Open the Visual Studio Code Command Palette.](#open-the-visual-studio-code-command-palette)\n* [Find and run the \"Create MongoDB Playground\" command.](#find-and-run-the-create-mongodb-playground-command)\n* [Create and Run an Aggregation Pipeline](#create-and-run-an-aggregation-pipeline)\n* [Example](#example) ## Note ### Preview MongoDB for VS Code is currently available as a **Preview** in the Visual Studio Marketplace. The product, its features, and the corresponding documentation may change during the Preview stage. You can run [aggregation pipelines](https://www.mongodb.com/docs/manual/aggregation/) on your collections in MongoDB for VS Code. Aggregation pipelines consist of[stages](https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/) that process your data and return computed results. Common uses for aggregation include: * Grouping data by a given expression.\n* Calculating results based on multiple fields and storing those results in a new field.\n* Filtering data to return a subset that matches a given criteria.\n* Sorting data. When you run an aggregation, MongoDB for VS Code conveniently outputs the results directly within Visual Studio Code. ## Open a Playground to Run Aggregation Pipelines You can run aggregation pipelines in a MongoDB Playground. MongoDB Playgrounds are JavaScript environments where you can prototype queries, aggregations, and MongoDB commands with helpful syntax highlighting. To open a new MongoDB Playground: 1 ### Open the Visual Studio Code Command Palette. In Visual Studio Code, press one of the following key combinations: * Control + Shift + P on Windows or Linux.\n* Command + Shift + P on macOS. The Command Palette provides quick access to commands and keyboard shortcuts. 2 ### Find and run the \"Create MongoDB Playground\" command. Use the Command Palette search bar to search for commands. All commands related to MongoDB for VS Code are prefaced withMongoDB:. When you run the MongoDB: Create MongoDB Playgroundcommand, MongoDB for VS Code opens a default playground template pre-configured with a few commands. ## Note To load new Playgrounds without the template, disable theUse Default Template For Playground setting. To learn more about MongoDB for VS Code settings, see [MongoDB for VS Code Settings.](https://mongodb.com/docs/mongodb-vscode/settings/#std-label-vsce-settings) ## Create and Run an Aggregation Pipeline To create an aggregation pipeline, use the following syntax in your Playground: `| db.<collection>.aggregate([ |\n| --------------------------- |\n| {                           |\n| <$stage1>                   |\n| },                          |\n| {                           |\n| <$stage2>                   |\n| }                           |\n| ...                         |\n| ])                          | ` To run your Playground, press the Play Button at the top right of the Playground View. MongoDB for VS Code splits your Playground and outputs the results of your Playground in the Playground Results.json pane. If you disabled split-view, MongoDB for VS Code outputs the results of your Playground in a new tab. ### Example\n\n Consider the following playground which inserts sample data into a collection and aggregates that data: ```javascript use(\"test\"); db.sales.insertMany([   { \"_id\" : 1, \"item\" : \"abc\", \"price\" : 10, \"quantity\" : 2, \"date\" : new Date(\"2014-03-01T08:00:00Z\") },   { \"_id\" : 2, \"item\" : \"jkl\", \"price\" : 20, \"quantity\" : 1, \"date\" : new Date(\"2014-03-01T09:00:00Z\") },   { \"_id\" : 3, \"item\" : \"xyz\", \"price\" : 5, \"quantity\" :  10, \"date\" : new Date(\"2014-03-15T09:00:00Z\") },   { \"_id\" : 4, \"item\" : \"xyz\", \"price\" : 5, \"quantity\" :  20, \"date\" : new Date(\"2014-04-04T11:21:39.736Z\") },   { \"_id\" : 5, \"item\" : \"abc\", \"price\" : 10, \"quantity\" : 10, \"date\" : new Date(\"2014-04-04T21:23:13.331Z\") },   { \"_id\" : 6, \"item\" : \"def\", \"price\" : 7.5, \"quantity\": 5, \"date\" : new Date(\"2015-06-04T05:08:13Z\") },   { \"_id\" : 7, \"item\" : \"def\", \"price\" : 7.5, \"quantity\": 10, \"date\" : new Date(\"2015-09-10T08:43:00Z\") },   { \"_id\" : 8, \"item\" : \"abc\", \"price\" : 10, \"quantity\" : 5, \"date\" : new Date(\"2016-02-06T20:20:13Z\") } ]) db.sales.aggregate([   { $match: { date: { $gte: new Date(\"2014-01-01\"), $lt: new Date(\"2015-01-01\") } } },   { $group: { _id: \"$item\", totalSaleAmount: { $sum: { $multiply: [ \"$price\", \"$quantity\" ] } } } } ]) \n``` This pipeline: 1. Switches to the `test` database.\n2. Inserts eight documents into the `test.sales` collection.\n3. Performs an aggregation in two stages:  \n    \nFirst Stage  \nThe [$match](https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match) stage filters the data such that only sales from the year 2014 are passed to the next stage.  \nSecond Stage  \nThe [$group](https://www.mongodb.com/docs/manual/reference/operator/aggregation/group/#mongodb-pipeline-pipe.-group) stage groups the data by item. The stage adds a new field to the output called `totalSaleAmount`, which is the culmination of the item's `price` and `quantity`. When you press the Play Button, MongoDB for VS Code splits your playground and outputs the following document in thePlayground Results.json pane. If you disabled split-view,MongoDB for VS Code outputs the following document in a new tab: ```javascript [   {     _id: 'abc',     totalSaleAmount: 120   },   {     _id: 'jkl',     totalSaleAmount: 20   },   {     _id: 'xyz',     totalSaleAmount: 150   } ] \n``` ## Tip ### See also:  * To learn more about the available aggregation stages, see[Aggregation Pipeline Stages.](https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/)\n* To learn more about the available aggregation operators you can use within stages, see[Aggregation Pipeline Operators.](https://www.mongodb.com/docs/manual/reference/operator/aggregation/)\n\n",
  "https://www.mongodb.com/docs/mongodb-vscode/databases-collections/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Navigate Your Data On this page * [View Databases and Collections](#view-databases-and-collections)\n* [View Collection Documents and Schema](#view-collection-documents-and-schema)\n* [Manage Indexes](#manage-indexes)\n* [Create a New Database](#create-a-new-database)\n* [Create a New Collection](#create-a-new-collection)\n* [Drop a Database or Collection](#drop-a-database-or-collection)\n* [Refresh Data](#refresh-data) ## Note ### Preview MongoDB for VS Code is currently available as a **Preview** in the Visual Studio Marketplace. The product, its features, and the corresponding documentation may change during the Preview stage. Once you [connect to your deployment](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-connect) using MongoDB for VS Code, use the left navigation to: * Explore your databases, collections, read-only views, and documents.\n* Create new databases and collections.\n* Drop databases and collections. ![Image showing deployment navigation](https://mongodb.com/docs/mongodb-vscode/images/dbs-colls-docs.png) ## Note If your deployment requires authentication, your[database user privileges](https://www.mongodb.com/docs/manual/reference/privilege-actions/) may affect the actions you can perform using MongoDB for VS Code. ## View Databases and Collections When you expand an active connection, MongoDB for VS Code shows the databases in that deployment. * Click the name of a database to view the collections it contains.\n* Click the name of a collection to view its documents, schema, and indexes. ## Note MongoDB for VS Code closes all documents when you close Visual Studio Code. ### View Collection Documents and Schema When you expand a collection, MongoDB for VS Code displays the number of documents next to the Documents label in the navigation panel. #### Documents When you expand a collection's documents, MongoDB for VS Code lists the `_id` of each document in the collection. Click an `_id` value to open that document in Visual Studio Code and view its contents. You may edit this single document: 1. At the top of this document, click Edit Document.MongoDB for VS Code opens it as an editable EJSON document titled `<database>.<collection>:\"<_id>\".json`.\n2. Make any edits you require.\n3. Press `Ctrl + S` (Windows/Linux) or `Cmd + S` to save the edited document to the MongoDB database.  \n   * If the update succeeds, MongoDB for VS Code confirms that the database has stored the change.  \n   * If the update results in an error, MongoDB for VS Code displays it. ## Important Users must have the [listCollections](https://www.mongodb.com/docs/manual/reference/privilege-actions/#mongodb-authaction-listCollections) permission in order to view a collection's documents. To view all of the collection's documents in an array, you can: 1. Right-click a collection.\n2. Click View Documents. ## Note You can open a [JavaScript Playground](https://mongodb.com/docs/mongodb-vscode/crud-ops/#std-label-vsce-crud)pre-configured to search a collection by hovering over theDocuments label in the navigation panel and clicking the icon that appears. #### Schema Your collection's schema defines the fields and data types within the collection. Due to MongoDB's flexible schema model, different documents in a collection may contain different fields, and data types may vary within a field. MongoDB can enforce[schema validation](https://www.mongodb.com/docs/manual/core/schema-validation/) to ensure your collection documents have the same shape. When you expand a collection's schema, MongoDB for VS Code lists the fields which appear in that collection's documents. If a field exists in all documents and its type is consistent throughout the collection, MongoDB for VS Codedisplays an icon indicating that field's data type. Hover over the field name for a text description of the field's data type. ### Manage Indexes\n\n * Ascending\n* Descending\n* Geospatial (2d, 2dsphere, geoHaystack)\n* Text\n* Hashed ## Note You can open a [MongoDB Playground](https://mongodb.com/docs/mongodb-vscode/crud-ops/#std-label-vsce-crud) pre-configured to create an index by hovering over the Indexes label in the navigation panel and clicking the  icon that appears. ## Tip ### See also:  To learn more about MongoDB indexes, see the[server manual.](https://www.mongodb.com/docs/manual/indexes/) ### Create a New Database When you create a new database, you must populate it with an initial collection. To create a new database: 1. Hover over the connection for the deployment where you want your database to exist.\n2. Click the  icon that appears.\n3. In the prompt, enter a name for your new database.\n4. Press the enter key.\n5. Enter a name for the first collection in your new database.\n6. Press the enter key. ### Create a New Collection To create a new collection: 1. Hover over the database where you want your collection to exist.\n2. Click the Plus icon that appears.\n3. In the prompt, enter a name for your new collection.\n4. Press the enter key to confirm your new collection. ### Drop a Database or Collection ## Important Dropping data from MongoDB is an irreversible process. Take caution to only drop data you are sure you want to delete, and backup your data as necessary. Dropping a database also drops all collections and documents within that database. To drop a database or collection: 1. Right-click the target database or collection.\n2. Click Drop Database or Drop Collection.\n3. In the prompt, type the name of the target database or collection.\n4. Press the enter key. ## Refresh Data You can refresh a deployment, database, or collection at any time to re-query your deployment and populate MongoDB for VS Code with the most up-to-date data. To refresh: 1. Right-click the target deployment, database, or collection.\n2. Click Refresh. ← [Connect to Your MongoDB Deployment](https://mongodb.com/docs/mongodb-vscode/connect/ \"Previous Section\")[Explore Your Data with Playgrounds](https://mongodb.com/docs/mongodb-vscode/playgrounds/ \"Next Section\") →",
  "https://www.mongodb.com/docs/mongodb-vscode/export-to-language/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Export a Query or Pipeline to Language On this page * [Prerequisites](#prerequisites)\n* [Export a Query Document](#export-a-query-document)\n* [Export an Aggregation Pipeline](#export-an-aggregation-pipeline) You can export and translate query documents and aggregation pipelines from a [playground](https://mongodb.com/docs/mongodb-vscode/playgrounds/#std-label-vsce-playgrounds) into a programming language. You can export queries and pipelines to the following languages: * C#\n* Java\n* Node.js\n* Python\n* Ruby ## Prerequisites You must open a playground that contains a query document or pipeline you want to export. The tutorials on this page use the default playground template. To open a new playground containing the default template: 1 ### Open the Visual Studio Code Command Palette. In Visual Studio Code, press one of the following key combinations: * Control + Shift + P on Windows or Linux.\n* Command + Shift + P on macOS. The Command Palette provides quick access to commands and keyboard shortcuts. 2 ### Find and run the \"Create MongoDB Playground\" command. Use the Command Palette search bar to search for commands. All commands related to MongoDB for VS Code are prefaced withMongoDB:. When you run the MongoDB: Create MongoDB Playgroundcommand, MongoDB for VS Code opens a default playground template pre-configured with a few commands. ## Note To load new Playgrounds without the template, disable theUse Default Template For Playground setting. To learn more about MongoDB for VS Code settings, see [MongoDB for VS Code Settings.](https://mongodb.com/docs/mongodb-vscode/settings/#std-label-vsce-settings) ## Export a Query Document To export a query document: 1 ### Highlight the code you want to export. Highlight the query document from the playground template: `| { date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } } |\n| ----------------------------------------------------------------------- | ` 2 ### Export your selection. 1. When you highlighted your code, a light bulb icon appeared. Click the icon.\n2. In the context menu, choose the language you want to export to.MongoDB for VS Code opens a new VS Code window containing the highlighted code in your chosen language. For example, exporting the query document from Step 1 to Java results in the following code: ```java new Document(\"date\", new Document(\"$gte\", new java.util.Date(1396569600000L))         .append(\"$lt\", new java.util.Date(1396656000000L))) \n``` 3 ### Configure Export Options You can choose whether to include import statements, driver syntax, or both in your exported code. At the top of the newly opened VS Code window containing your exported code, use the Import Statements andDriver Syntax toggles to control these options. Including both import statements and driver syntax for the preceding Java code results in this output: ```java import org.bson.Document; import com.mongodb.MongoClient; import com.mongodb.MongoClientURI; import com.mongodb.client.FindIterable; import com.mongodb.client.MongoCollection; import com.mongodb.client.MongoDatabase; import org.bson.conversions.Bson; import java.util.concurrent.TimeUnit; import org.bson.Document; /* * Requires the MongoDB Java Driver. * https://mongodb.github.io/mongo-java-driver */ MongoClient mongoClient = new MongoClient(     new MongoClientURI(         \"mongodb://localhost:27017/?readPreference=primary&appname=mongodb-vscode+0.7.0&directConnection=true&ssl=false\"     ) ); MongoDatabase database = mongoClient.getDatabase(\"mongodbVSCodePlaygroundDB\"); MongoCollection<Document> collection = database.getCollection(\"sales\"); FindIterable<Document> result = collection.aggregate(new Document(\"date\", new Document(\"$gte\", new java.util.Date(1396569600000L))\n\n \n``` ## Note Export options vary by the selected export language. ## Export an Aggregation Pipeline To export an aggregation pipeline: 1 ### Highlight the code you want to export. Highlight the aggregation pipeline from the playground template: ```javascript [     { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },     { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } } ] \n``` 2 ### Export your selection. 1. When you highlighted your code, a light bulb icon appeared. Click the icon.\n2. In the context menu, choose the language you want to export to.MongoDB for VS Code opens a new VS Code window containing the highlighted code in your chosen language. For example, exporting the pipeline from Step 1 to Java results in the following code: ```java Arrays.asList(new Document(\"$match\",     new Document(\"date\",     new Document(\"$gte\",     new java.util.Date(1388534400000L))                 .append(\"$lt\",     new java.util.Date(1420070400000L)))),     new Document(\"$group\",     new Document(\"_id\", \"$item\")             .append(\"totalSaleAmount\",     new Document(\"$sum\",     new Document(\"$multiply\", Arrays.asList(\"$price\", \"$quantity\")))))) \n``` 3 ### Configure Export Options You can choose whether to include import statements, driver syntax, or both in your exported code. At the top of the newly opened VS Code window containing your exported code, use the Import Statements andDriver Syntax toggles to control these options. Including both import statements and driver syntax for the preceding Java code results in this output: ```java import java.util.Arrays; import org.bson.Document; import com.mongodb.MongoClient; import com.mongodb.MongoClientURI; import com.mongodb.client.FindIterable; import com.mongodb.client.MongoCollection; import com.mongodb.client.MongoDatabase; import org.bson.conversions.Bson; import java.util.concurrent.TimeUnit; import org.bson.Document; /*  * Requires the MongoDB Java Driver.  * https://mongodb.github.io/mongo-java-driver  */ MongoClient mongoClient = new MongoClient(     new MongoClientURI(         \"mongodb://localhost:27017/?readPreference=primary&appname=mongodb-vscode+0.7.0&directConnection=true&ssl=false\"     ) ); MongoDatabase database = mongoClient.getDatabase(\"mongodbVSCodePlaygroundDB\"); MongoCollection<Document> collection = database.getCollection(\"sales\"); FindIterable<Document> result = collection.aggregate(Arrays.asList(new Document(\"$match\",     new Document(\"date\",     new Document(\"$gte\",     new java.util.Date(1388534400000L))                 .append(\"$lt\",     new java.util.Date(1420070400000L)))),     new Document(\"$group\",     new Document(\"_id\", \"$item\")             .append(\"totalSaleAmount\",     new Document(\"$sum\",     new Document(\"$multiply\", Arrays.asList(\"$price\", \"$quantity\"))))))); \n``` ## Note Export options vary by the selected export language. ← [Run Aggregation Pipelines](https://mongodb.com/docs/mongodb-vscode/run-agg-pipelines/ \"Previous Section\")[Use require() to Include External Modules](https://mongodb.com/docs/mongodb-vscode/require-modules/ \"Next Section\") →",
  "https://www.mongodb.com/docs/mongodb-vscode/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # MongoDB for VS Code On this page * [Features](#features)\n* [Get Started](#get-started) ## Note ### Preview MongoDB for VS Code is currently available as a **Preview** in the Visual Studio Marketplace. The product, its features, and the corresponding documentation may change during the Preview stage. MongoDB provides an extension for [Microsoft Visual Studio Code](https://code.visualstudio.com/) which lets you work with MongoDB and your data directly within your coding environment. ![Image of MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/images/vsce-landing-2.png) ## Features You can use MongoDB for Visual Studio Code to: * Explore your MongoDB Data.\n* Prototype queries and run MongoDB commands.\n* Create a Shared Tier Atlas cluster using a Terraform template. ## Get Started [Install MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/install/) Install MongoDB for VS Code from the VS Code Marketplace. [Connect to Your MongoDB Deployment](https://mongodb.com/docs/mongodb-vscode/connect/) Connect to your deployment using MongoDB for VS Code. [Navigate Your Data](https://mongodb.com/docs/mongodb-vscode/databases-collections/) Explore your databases, collections, and documents. [Explore Your Data with Playgrounds](https://mongodb.com/docs/mongodb-vscode/playgrounds/) Use JavaScript environments to interact your data. Prototype queries, run aggregations, and more. [Create an Atlas Cluster from a Template using Terraform](https://mongodb.com/docs/mongodb-vscode/create-cluster-terraform/) Create a Shared Tier Atlas cluster using a Terraform template included with MongoDB for VS Code. [Install MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/install/ \"Next Section\") →",
  "https://www.mongodb.com/docs/mongodb-vscode/playground-databases/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Create Databases and Collections On this page * [Prerequisites](#prerequisites)\n* [Create a Database and Collection](#create-a-database-and-collection)\n* [Example](#example) ## Note ### Preview MongoDB for VS Code is currently available as a **Preview** in the Visual Studio Marketplace. The product, its features, and the corresponding documentation may change during the Preview stage. You can create[databases and collections](https://www.mongodb.com/docs/manual/core/databases-and-collections/)using a MongoDB Playground. ## Prerequisites If you have not done so already, you must complete the following prerequisites before you can create a database or collection with a MongoDB Playground: * [Create a connection to a MongoDB deployment.](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-connect-task)\n* [Activate the connection to the MongoDB deployment.](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-activate-connection) ## Create a Database and Collection Once you connect to your deployment using MongoDB for VS code, use the left navigation to: 1. Select an active connection and click the  icon that appears.\n2. A MongoDB playground automatically opens with a template form to create a database and a regular collection or a[time series collection.](https://mongodb.com/docs/mongodb-vscode/time-series-collections/#std-label-vsce-time-series)\n3. Fill in `const database` and `const collection` with names of your database and collection.\n4. Uncomment the form of the collection you wish to create.\n5. Fill in the collection fields according to your collection's specifications.\n6. To run the playground, click the Play Button at the top right of the VS code navigation bar. After running the playground, the left navigation updates with new database listed under the active connection it was created. You can find the newly created collection by expanding the new database. ## Tip ### See also:  * To add documents to the collection, see[Create Documents.](https://mongodb.com/docs/mongodb-vscode/create-document-playground/#std-label-vsce-create-doc-playground)\n* To learn more about creating time series collections using MongoDB playgrounds, see [Create Time Series Collections](https://mongodb.com/docs/mongodb-vscode/time-series-collections/#std-label-vsce-time-series) ## Example This example creates a database named `grades` and a regular collection named `testscores`. To use this example, start with a template from your MongoDB Playgrounds: `| const database = 'grades';       |\n| -------------------------------- |\n| const collection = 'testscores'; |\n| use(database);                   |\n| db.createCollection(collection); | ` In the example: * `const database` declares the name `grades` for the database.\n* `const collection` declares the name `testscores` for the collection.\n* `use(database)` creates the new `grades` database.\n* `db.createCollection(collection)` creates the collection `testscores`inside of the `grades` database. When you press the Play Button, MongoDB for VS Code shows the following results in the `Playground Results.json` pane to confirm the creation of the database and collection. ```javascript {    \"ok\": 1 } \n``` The `grades` database and `testscores` collection also appear in your left navigation: ![Image showing database and collection](https://mongodb.com/docs/mongodb-vscode/images/vsce-database.png) ← [Explore Your Data with Playgrounds](https://mongodb.com/docs/mongodb-vscode/playgrounds/ \"Previous Section\")[Create Time Series Collections](https://mongodb.com/docs/mongodb-vscode/time-series-collections/ \"Next Section\") →",
  "https://www.mongodb.com/docs/mongodb-vscode/commands/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # MongoDB for VS Code Commands On this page * [Connection Commands](#connection-commands)\n* [Shell Commands](#shell-commands)\n* [Playground Commands](#playground-commands)\n* [MongoDB for VS Code View Commands](#vsce-view-commands) ## Note ### Preview MongoDB for VS Code is currently available as a **Preview** in the Visual Studio Marketplace. The product, its features, and the corresponding documentation may change during the Preview stage. This document lists the VS Code commands available forMongoDB for VS Code. To open the Command Palette and execute these commands: | Operating System  | Method                  | Actions                     |\n| ----------------- | ----------------------- | --------------------------- |\n| Any               | Visual Studio Code Menu | View \\> Command Palette     |\n| MacOS             | Keyboard Shortcut       | Press Command \\+ Shift \\+ P |\n| Windows and Linux | Keyboard Shortcut       | Press Control \\+ Shift \\+ P | ## Tip Enter `mongodb` in the Command Palette to display all of theMongoDB for VS Code commands you can use. ## Connection Commands Run these commands from the Command Palette to create new connections or manage existing connections to your MongoDB deployments. Configuring a new connection adds a new entry to yourConnections list in the MongoDB for VS Code view. Select a connection from the list to activate that connection. To learn more about connecting to a deployment, see [Connect to Your MongoDB Deployment.](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-connect) ## Note You can configure multiple connections, but only have one _active_connection open at a time.\n\n ## Shell Commands Run this command from the Command Palette to open a MongoDB Shell connected to your deployment.\n\n ## Playground Commands Run these commands from the Command Palette to create and run[playgrounds.](https://mongodb.com/docs/mongodb-vscode/playgrounds/#std-label-vsce-playgrounds)\n\n ## MongoDB for VS Code View Commands Run these commands from the Command Palette to manage the MongoDB for VS Code view in the left navigation panel. | Command                                            | Description                                                         |\n| -------------------------------------------------- | ------------------------------------------------------------------- |\n| [Focus on MongoDB View](#std-label-vsce-cmd-focus) | Open and focus on the MongoDB for VS Code view.                     |\n| [Show MongoDB](#std-label-vsce-cmd-show)           | If MongoDB for VS Code is hidden from your extension view, show it. | ← [Reference](https://mongodb.com/docs/mongodb-vscode/reference/ \"Previous Section\")[MongoDB for VS Code Settings](https://mongodb.com/docs/mongodb-vscode/settings/ \"Next Section\") →",
  "https://www.mongodb.com/docs/mongodb-vscode/time-series-collections/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Create Time Series Collections On this page * [Prerequisites](#prerequisites)\n* [Create a Time Series Collection](#create-a-time-series-collection)\n* [Example](#example) ## Note ### Preview MongoDB for VS Code is currently available as a **Preview** in the Visual Studio Marketplace. The product, its features, and the corresponding documentation may change during the Preview stage. You can create[time series collections](https://www.mongodb.com/docs/manual/core/timeseries-collections/) using a MongoDB Playground. ## Prerequisites If you have not done so already, you must complete the following prerequisites before you can create a time series collection with a MongoDB Playground: * [Create a connection to a MongoDB deployment.](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-connect-task)\n* [Activate the connection to the MongoDB deployment.](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-activate-connection) ## Create a Time Series Collection Once you connect to your deployment using MongoDB for VS code, use the left navigation to: 1. Expand an active connection and hover over the database where you want your collection to exist.\n2. Click the  icon that appears.\n3. A MongoDB playground automatically opens with a template form to create both regular collections and time series collections.\n4. Delete the regular collection form and uncomment the time series form.\n5. Fill in the provided fields with details for your time series collection.\n6. To run the playground, click the Play Button at the top right of the VS code navigation bar. After running the playground with the time series collection, the left navigation will update the collection icon to identify it is a time series collection. ![Image showing time series icon in VS Code extension](https://mongodb.com/docs/mongodb-vscode/images/vsce-time-series-icon.png) ## Tip ### See also:  * To learn more about time series collections, see[Time Series Collections](https://www.mongodb.com/docs/manual/core/timeseries-collections/)\n* To add documents to the collection, see[Create Documents.](https://mongodb.com/docs/mongodb-vscode/create-document-playground/#std-label-vsce-create-doc-playground) ## Example This example creates a time series collection named `weather` in the `test`database. To use this example, start with a collection template from your MongoDB Playgrounds. Delete the template form for regular collections and keep the template for time series collections found below the regular collection template. `| use('test');            |\n| ----------------------- |\n| db.createCollection(    |\n| \"weather\",              |\n| {                       |\n| timeseries: {           |\n| timeField: \"timestamp\", |\n| granularity: \"hours\"    |\n| }                       |\n| }                       |\n| )                       | ` In the example: * `use('test')` selects the database where the collection is added to.\n* `timeseries` specifies fields to create a time series collection.  \n   * `timeField: \"timestamp\"` names the field that contains the dates in the time series documents. In this case, it is `timestamp`.  \n   * `granularity: \"hours\"` defines the time scale by which the documents are stored. When you press the Play Button, MongoDB for VS Code splits your Playground and outputs the following result in the Playground Results.json pane to confirm the creation of the time series collection. ```javascript {    \"ok\": 1 } \n``` The `weather` collection also appears in your collection list, and is marked with the time series icon.\n\n",
  "https://www.mongodb.com/docs/mongodb-vscode/playgrounds/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB for VS Code](https://mongodb.com/docs/mongodb-vscode/) # Explore Your Data with Playgrounds On this page * [Prerequisite](#prerequisite)\n* [Open a Playground](#open-a-playground)\n* [Run a Playground](#run-a-playground)\n* [Log to Console from a Playground](#log-to-console-from-a-playground)\n* [Tutorials](#tutorials)\n* [Consideration for Authentication](#consideration-for-authentication) ## Note ### Preview MongoDB for VS Code is currently available as a **Preview** in the Visual Studio Marketplace. The product, its features, and the corresponding documentation may change during the Preview stage. MongoDB Playgrounds are JavaScript environments where you can prototype queries, aggregations, and MongoDB commands with helpful syntax highlighting. MongoDB Playgrounds provide intelligent autocomplete for: * The Mongo Shell API,\n* MongoDB operators,\n* Database, collection, and field names. You can save playgrounds in your workspace and use them to document how your application interacts with MongoDB. MongoDB for VS Code interprets files with the `.mongodb` extension as playgrounds. ## Note You can also use your application to perform CRUD operations on documents using the appropriate [driver](https://www.mongodb.com/docs/drivers/). Playgrounds are meant to help you prototype database operations as you develop your application. MongoDB for VS Code splits your Playground window to display yourPlayground Result in the right-side pane. You can perform one of two actions on the result depending on the query you ran in the Playground. * You may save _any_ Playground Result to a file.\n* You may edit any JSON document that MongoDB for VS Code returns in thePlayground Result from a[findOne or find query.](https://mongodb.com/docs/mongodb-vscode/read-document-playground/)  \nMongoDB for VS Code returns these results in JSON format with JSON syntax highlighting. Each JSON document has an Edit Documentlink at its top.  \n   1. Click Edit Document at the top of the document you want to edit.  \n   MongoDB for VS Code opens this one JSON document in a new window as an editable document.  \n   2. Make any changes you need.  \n   3. Press `Ctrl+S` (`Cmd+S` on macOS) to save those changes in the database. ## Prerequisite To run a playground, you must connect to a MongoDB deployment usingMongoDB for VS Code. To learn how to connect to a deployment, see either: * [Connect to Your MongoDB Deployment](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-connect)\n* [Connect to a Deployment from a Playground](#std-label-playground-connect-to-deployment) ## Open a Playground ### Create a New Playground You can create a new playground from the Playgroundspanel, the MongoDB for VS Code _Overview_ page, or the [Microsoft Visual Studio Code](https://code.visualstudio.com/) Command Pallette. ### Open a Saved Playground If you have files in your Visual Studio Code workspace with the `.mongodb`extension, MongoDB for VS Code displays these files in the Playgroundspanel. Double click a `.mongodb` file to open that playground. ## Run a Playground To run a playground, click the Play Button in VS Code's top navigation bar. Your playground runs against the deployment specified in your [active connection.](https://mongodb.com/docs/mongodb-vscode/connect/#std-label-vsce-connect) ### Connect to a Deployment from a Playground If MongoDB for VS Code is not connected to a MongoDB deployment, you can specify a connection string for the deployment you want to run your playground against. If you have a playground file open in Visual Studio Code and do not have an active connection, MongoDB for VS Code displaysClick here to add connection at the top of your playground. ![Link to add connection from playground](https://mongodb.com/docs/mongodb-vscode/images/vsce-playground-add-connection-btn.png)\n\n ## Note When you connect to a deployment through the playground connection dialog, that connection is added to your MongoDB for VS Code Connections list. ### Run Selected Lines of a Playground If you select a section of your playground, you may optionally run only the selected portion. You may run either a single line or multiple lines of your playground. MongoDB for VS Code shows the Run Selected Lines from Playground link immediately above your selected section. Click this link to test and troubleshoot specific lines or sections of your playground. ## Log to Console from a Playground MongoDB for VS Code supports the following methods to log messages to the console. Logged messages appear in the Output panel in VSCode. * `console.log()`\n* `print()`\n* `printjson()` Logging to the console can be useful to track the output of certain commands in your playground, such as results after a particular query or aggregation. ## Tutorials * To learn how to use MongoDB Playgrounds for CRUD operations, see[Perform CRUD Operations.](https://mongodb.com/docs/mongodb-vscode/crud-ops/#std-label-vsce-crud)\n* To learn how to use MongoDB Playgrounds to run aggregation pipelines, see [Run Aggregation Pipelines.](https://mongodb.com/docs/mongodb-vscode/run-agg-pipelines/#std-label-vsce-aggregation) ## Consideration for Authentication If your deployment requires authentication, your[database user privileges](https://www.mongodb.com/docs/manual/reference/privilege-actions/) may affect the actions you can perform using MongoDB for VS Code. ← [Navigate Your Data](https://mongodb.com/docs/mongodb-vscode/databases-collections/ \"Previous Section\")[Create Databases and Collections](https://mongodb.com/docs/mongodb-vscode/playground-databases/ \"Next Section\") →"
}