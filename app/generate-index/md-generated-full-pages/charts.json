{
  "https://www.mongodb.com/docs/charts/reshape-data/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Reshape Your Data Refer to the following pages for ways to reshape your original data into a form that works best for your charts: [Calculate New Data Fields](https://mongodb.com/docs/charts/calculated-fields/#std-label-calculated-fields) Combine data from one or more fields in your collection into a single calculated field. [Convert Field Data Types](https://mongodb.com/docs/charts/convert-field-data-types/#std-label-convert-field-data-types) Convert the data type of the fields in your collection to a different type. For example, convert numbers stored as strings to the number data type. [Add a Lookup Field](https://mongodb.com/docs/charts/add-lookup-field/#std-label-add-lookup-field) Use [$lookup](https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/) functionality to add a field based on a query across multiple data sources. [Run Aggregation Pipelines on Your Data](https://mongodb.com/docs/charts/aggregation-pipeline/#std-label-charts-agg-pipeline) Transform your collection's documents with an aggregation pipeline. [Save and Reuse Queries](https://mongodb.com/docs/charts/query-library/) Save and reuse your aggregation pipeline queries. ← [Visualize Embedded Objects and Arrays](https://mongodb.com/docs/charts/rich-schema-support/ \"Previous Section\")[Calculate New Data Fields](https://mongodb.com/docs/charts/calculated-fields/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/embedding-charts-iframe/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embed Charts with an iframe On this page * [Prerequisites](#prerequisites)\n* [Procedure](#procedure) You can embed a chart into a web application with an iframe and specify settings such as height, width, refresh interval, and display theme. Charts embedded within an iframe may be either: * Unauthenticated, in which case they are viewable by anyone.\n* Authenticated with a Verified Signature.  \n## Note  \nAuthentication with a Verified Signature is deprecated. The[Embedding Charts SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/#std-label-embedding-charts-sdk) offers authentication through several [authentication providers.](https://mongodb.com/docs/charts/configure-auth-providers/#std-label-configure-auth-providers) ## Prerequisites * You must be a dashboard [Author](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-permissions) to enable embedding for a chart.\n* [Create a New Dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-create-new-dashboard)\n* [Create a Chart](https://mongodb.com/docs/charts/build-charts/#std-label-create-new-chart) ## Procedure After your iframe code is ready with any options you've set, you can place it in a web page to display your chart. ← [Embed Charts in Your Web Application](https://mongodb.com/docs/charts/embedding-charts/ \"Previous Section\")[Embed Charts with the Embedding SDK](https://mongodb.com/docs/charts/charts-embedding-sdk/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/launch-charts/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Launch MongoDB Charts On this page * [Prerequisites](#prerequisites)\n* [Procedure](#procedure)\n* [Moving Forward](#moving-forward)\n* [Delete Your MongoDB Charts Instance](#delete-your-mongodb-charts-instance) The following tutorial guides you through launching Charts on MongoDB Cloud. You can access Charts with any[Organization Role](https://www.mongodb.com/docs/atlas/reference/user-roles/#organization-roles). In Atlas, click Charts in the navigation bar. ## Prerequisites MongoDB Charts is accessible through MongoDB Atlas. You will need a[MongoDB Atlas user account](https://www.mongodb.com/docs/atlas/tutorial/manage-users/)to complete this tutorial. To learn more about creating an Atlasuser, see the Atlas [Getting Started](https://www.mongodb.com/docs/atlas/getting-started/)documentation. You will also need an Atlas cluster to visualize data usingCharts. The steps on this page guide you through creating anAtlas cluster. ## Note Each instance of the MongoDB Charts application is tied to a singleAtlas [project](https://www.mongodb.com/docs/atlas/tutorial/manage-projects/), and can only visualize data from Atlas clusters within the same project. ### Required Access This tutorial requires that your [Atlas user](https://www.mongodb.com/docs/atlas/tutorial/manage-users/) have the appropriate permissions to read data from the clusters in your Atlas project. This means that yourAtlas user must have any [Project Role](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) except `Project Read Only`, which does not grant the appropriate permissions. When you first register an Atlas account, you are granted the `Project Owner` role on your initial project. For information on configuring additional users and roles, see[Atlas Access](https://www.mongodb.com/docs/atlas/tutorial/manage-users/) in theAtlas documentation. ## Procedure 1 ### Log into MongoDB Atlas. To access the MongoDB Charts application, you must be logged into[Atlas](https://cloud.mongodb.com). 2 ### Select your desired Atlas project, or create a new project. If you have an Atlas [project](https://docs.atlas.mongodb.com/tutorial/manage-projects/)with clusters containing data you wish to visualize, select the project from the Context dropdown in the left navigation pane. If you do not have a suitable existing Atlas project, see[Create a Project](https://docs.atlas.mongodb.com/tutorial/manage-projects/#create-a-project)in the Atlas documentation for instructions on creating a new project. 3 ### (_Optional_) Invite people to your Atlas project and shared Charts instance. All Atlas [project users](https://docs.atlas.mongodb.com/tutorial/manage-users/#manage-project-users-and-teams)with [Project Roles](https://docs.atlas.mongodb.com/reference/user-roles/#project-roles)other than `Project Read Only`have access to the Charts instance associated with that project. To add additional members to your Atlasproject, see [Manage Project Users and Teams](https://docs.atlas.mongodb.com/tutorial/manage-users/#manage-project-users-and-teams)in the Atlas documentation. 4 ### (_Optional_) Create an Atlas cluster. The MongoDB Charts application makes it easy to connect collections in your cluster as [data sources](https://mongodb.com/docs/charts/data-sources/). Data sources reference specific collections and[charts views](https://mongodb.com/docs/charts/create-manage-charts-view/#std-label-charts-views) that you can access in the[Chart Builder](https://mongodb.com/docs/charts/build-charts/) to visualize the data in those collections or charts views. ## Note You can skip this step if you already have an Atlas cluster in the current [project.](https://docs.atlas.mongodb.com/tutorial/manage-projects/) To create an Atlas cluster:\n\n ## Note For complete instructions on creating an Atlas cluster and details on all available configuration options, see[Create a Cluster](https://docs.atlas.mongodb.com/create-new-cluster/)in the Atlas documentation. 5 ### Launch the MongoDB Charts application. In Atlas, click Charts in the navigation bar. ## Note When you first launch MongoDB Charts in a project, Chartsautomatically creates new[MongoDB users](https://www.mongodb.com/docs/atlas/security-add-mongodb-users/) in yourAtlas project to access your cluster data. The names of these users are in the format:`mongodb-stitch-charts-<PROJECT-NAME>-<ID>_<CLUSTER-NAME>` To navigate back to the Atlas Clusters view, clickData Services at the top of the MongoDB Charts application. ## Moving Forward Now that you have a data source, you are ready to begin visualizing your data. The next steps are to[create a dashboard](https://mongodb.com/docs/charts/dashboards/), and then[build charts](https://mongodb.com/docs/charts/build-charts/) to populate your dashboard. For complete walkthroughs of MongoDB Charts and its features, including downloadable data sets to visualize, see the following[Tutorials.](https://mongodb.com/docs/charts/tutorials/) ## Delete Your MongoDB Charts Instance ## Important Deleting a MongoDB Charts instance deletes all data associated with that instance including dashboards, data sources, and metadata. Once the MongoDB Charts instance is deleted, this data cannot be recovered. If you are an Atlas [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner), you can deactivate and delete a MongoDB Charts instance linked to your Atlas project from your Atlas [Project Settings.](https://www.mongodb.com/docs/atlas/tutorial/manage-project-settings/) If you delete your linked MongoDB Charts instance, you can create a newMongoDB Charts instance for your project at any time. The newly created instance does not retain any data from previously deleted instances. ← [MongoDB Charts](https://mongodb.com/docs/charts/ \"Previous Section\")[Getting Started Tutorial](https://mongodb.com/docs/charts/welcome-experience/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/aggregation-pipeline/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Run Aggregation Pipelines on Your Data On this page * [Example](#example)\n* [Address Aggregation Pipeline Errors](#address-aggregation-pipeline-errors)\n* [Limitations](#limitations) [Aggregation pipelines](https://www.mongodb.com/docs/manual/core/aggregation-pipeline/) transform your documents into an aggregated set of results. In MongoDB Charts, aggregation pipelines are commonly used to visualize new fields created from calculated results of pre-existing fields, but also have many other applications. To create an aggregation pipeline: 1. In the Query bar, input an aggregation pipeline. Your pipeline must be in square brackets.\n2. (Optional) Select Format to arrange the query as follows:  \n   * Split the query across multiple lines  \n   * Indent the query as per JSON conventions\n3. (Conditional) If you selected the Format option, clickClose when you finish.\n4. Click Apply to execute your pipeline. ## Example The following chart shows total sale amounts from an office supply company, categorized by store location. The chart uses the following aggregation pipeline in the Query bar: `| [                                                |\n| ------------------------------------------------ |\n| {                                                |\n| $unwind: \"$items\"                                |\n| },                                               |\n| {                                                |\n| $addFields: {                                    |\n| saleAmount: {                                    |\n| $multiply: [ \"$items.price\", \"$items.quantity\" ] |\n| }                                                |\n| }                                                |\n| }                                                |\n| ]                                                | ` This aggregation pipeline processes the collection data using the following order:\n\n ![Example Aggregation Pipeline](https://mongodb.com/docs/charts/images/charts/query-bar-agg-example.png) Once the data has been processed using the pipeline, the chart displays the Sum of all`saleAmounts` categorized by store location. ## Address Aggregation Pipeline Errors If your aggregation is invalid, Charts displays the icon in the Query bar. Click the Query bar if it is not already displayed to view error details. Charts displays error details for: * Client-side errors, such as malformed JSON, and\n* Server-side errors, such as invalid MQL or unsupported pipeline stages. ![Example Aggregation Pipeline Error](https://mongodb.com/docs/charts/images/charts/agg-pipeline-error.png) Review the error details, then adjust your aggregation pipeline accordingly. ## Limitations * Charts doesn't support the [$lookup](https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/#mongodb-pipeline-pipe.-lookup) operator in aggregation queries. However, you can use this operator in Data Source pipelines. To learn more about how to use pipelines to pre-process data before it reaches the Chart Builder, see [Create and Manage Charts Views.](https://mongodb.com/docs/charts/create-manage-charts-view/#std-label-data-sources-pipeline)\n* Charts supports the [$function](https://www.mongodb.com/docs/manual/reference/operator/aggregation/function/#mongodb-expression-exp.-function) operator only when you define the function body in a single line and wrap it in double quotes. To use this operator in your aggregation queries, you must use the following syntax:  \n```javascript  \n{  \n  $function: {  \n    body: \"function(arg1, arg2, ...) { ... }\",  \n    args: <array expression>,  \n    lang: \"js\"  \n  }  \n}  \n``` ← [Add a Lookup Field](https://mongodb.com/docs/charts/add-lookup-field/ \"Previous Section\")[Save and Reuse Queries](https://mongodb.com/docs/charts/query-library/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/data-sources/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Data Sources On this page * [Connect or Disconnect Data Sources and Deployments](#connect-or-disconnect-data-sources-and-deployments)\n* [Manage Data Sources](#manage-data-sources)\n* [Manage Deployments](#manage-deployments)\n* [Edit a Chart's Data Source](#edit-a-chart-s-data-source)\n* [Try Out Charts with the Sample Data Source](#try-out-charts-short-with-the-sample-data-source) A data source in MongoDB Charts references one of the following: * A [collection](https://www.mongodb.com/docs/manual/core/databases-and-collections/#std-label-collections) or database[view](https://www.mongodb.com/docs/manual/core/views/) in your MongoDB deployment.\n* A [charts view](https://mongodb.com/docs/charts/create-manage-charts-view/#std-label-data-sources-pipeline) that you create using a collection. You can use the fields in the data source to construct a chart. When you build a chart, you must specify the data source that the chart uses. Deployments in MongoDB Charts reference Atlas deployments that contain valid Charts data sources, including: * All [clusters and serverless instances](https://www.mongodb.com/docs/atlascreate-database-deployment/) in your Atlasproject for which you have the[Project Data Access Read Only](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Data-Access-Read-Only) role or higher.\n* All [federated database instances](https://www.mongodb.com/docs/atlas/data-federation/) in your project, including[Online Archives.](https://www.mongodb.com/docs/atlas/online-archive/manage-online-archive/) ## Connect or Disconnect Data Sources and Deployments An Atlas [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner) can connect or disconnect data sources and deployments. To learn more, see[Connect or Disconnect Data Sources and Deployments.](https://mongodb.com/docs/charts/connect-disconnect-data-source/#std-label-connect-disconnect-data-source) ## Note Charts connects to all deployments and data sources in your project by default. ## Manage Data Sources To manage settings for a data source, see[Manage Data Sources](https://mongodb.com/docs/charts/manage-data-sources/#std-label-manage-existing-data-sources). To manage pipelines, see [Create and Manage Charts Views.](https://mongodb.com/docs/charts/create-manage-charts-view/#std-label-data-sources-pipeline) ## Note To apply a pipeline, use a charts view. You can't apply pipelines to an entire collection. ## Manage Deployments To manage settings for the Atlas deployments that contain your data sources, see [Manage Deployments.](https://mongodb.com/docs/charts/manage-deployment/#std-label-manage-deployment) ## Edit a Chart's Data Source To edit the data source for an existing chart: 1 ### Select your dashboard. From the Dashboards page, select the dashboard that contains the chart. 2 ### Click Edit on the chart you want to edit. 3 ### Click the button under Data Source on the top left of the chart builder. The button says Select if you have not selected a data source, or it says the name of the currently selected data source. 4 ### Click the Project tab. All of your connected deployments appear. ## Note A deployment and its data sources won't display on theSelect Data Sourcemodal unless they are connected to Charts. Only a[Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner) can [connect or disconnect](https://mongodb.com/docs/charts/connect-disconnect-data-source/#std-label-connect-disconnect-data-source) deployments and data sources. All deployments and data sources in the project connect toCharts by default. 5\n\n 6 ### Click the name of the database that contains the data source. The database's data sources appear. You can click on a data source's name to view a preview of its data. 7 ### Click Select on the data source. To learn how to set the data source for a new chart, see [Build Charts.](https://mongodb.com/docs/charts/build-charts/) ## Try Out Charts with the Sample Data Source Charts automatically includes theSample Data: Movies data source in all Chartstenants. The [Sample Dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-sample-dashboard) uses this data source to show the charts you can create. You can access the sample data source from all dashboards. You can't: * Add, edit, or delete the data in the Sample Data: Moviesdata source.\n* Remove the sample data source.\n* Externally share or [embed](https://mongodb.com/docs/charts/embedding-charts/#std-label-embedding-charts) charts that use the sample data. ← [Interact with Charts on a Dashboard](https://mongodb.com/docs/charts/interact-with-charts/ \"Previous Section\")[Connect or Disconnect Data Sources and Deployments](https://mongodb.com/docs/charts/connect-disconnect-data-source/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/title-description/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Title and Description You can give a chart a title and/or a description at any time when the chart is open for editing. The title and description appear above the chart wherever the chart is rendered. To create a title for a chart: 1. Click Enter a title above the chart.\n2. Enter your desired title.\n3. Click the check mark below the text box to save your title. To create a description for a chart: 1. Click Enter a description above the chart.\n2. Enter your desired text. Select one or more words to format the highlighted text. Formatting options include:  \n   * Bold  \n   * Italic  \n   * Hyperlink\n3. Click the check mark below the text box to save your description. Descriptions are limited to a single line of text. If the text exceeds the space available on one line, it is truncated. Both title and description are blank by default. If you don't create a title or description for a chart, the chart expands to occupy the space a title or description would otherwise occupy. ← [Aggregation Options](https://mongodb.com/docs/charts/encoding-channels/aggregation-options/ \"Previous Section\")[Create a Single-Series Chart with Multiple Aggregations](https://mongodb.com/docs/charts/single-series-categories/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/manage-deployment/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Manage Deployments On this page * [Access Deployment Settings](#access-deployment-settings)\n* [Connect or Disconnect the Deployment or Data Sources](#connect-or-disconnect-the-deployment-or-data-sources)\n* [Enable Organization-Wide Sharing for a Deployment](#enable-organization-wide-sharing-for-a-deployment)\n* [Deployment Read Preference](#deployment-read-preference) On the Data Sources page, an Atlas [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner) can manage a deployment. ## Access Deployment Settings To manage a deployment in Charts: 1 ### In the left navigation menu, click Data Sources. The Data Sources page displays. 2 ### In the Deployment dropdown, select the deployment that contains your data source. Deployments in MongoDB Charts reference Atlas deployments that contain valid Charts data sources, including: * All [clusters and serverless instances](https://www.mongodb.com/docs/atlascreate-database-deployment/) in your Atlasproject for which you have the[Project Data Access Read Only](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Data-Access-Read-Only) role or higher.\n* All [federated database instances](https://www.mongodb.com/docs/atlas/data-federation/) in your project, including[Online Archives.](https://www.mongodb.com/docs/atlas/online-archive/manage-online-archive/) After you select a deployment, the following information displays:\n\n 3 ### Check the connection status and connect the deployment. If the deployment connection status is Connected, the deployment is already connected to Charts. TheData Access section displays all of the collections within the selected Atlas deployment. If the deployment connection status is Disconnected: 1. Click the connect icon  next to the deployment connection status.\n2. Click Reconnect on the modal that appears. The deployment connects and the Data Access section displays all of the databases for the selected Atlasdeployment. You can manage the following deployment settings. ## Connect or Disconnect the Deployment or Data Sources An Atlas [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner) can connect the deployment or its data sources. To learn more, see[Connect or Disconnect Data Sources and Deployments.](https://mongodb.com/docs/charts/connect-disconnect-data-source/#std-label-connect-disconnect-data-source) ## Note Charts connects to all deployments and data sources in your project by default. To manage other data source settings, see [Manage Data Sources.](https://mongodb.com/docs/charts/manage-data-sources/#std-label-manage-existing-data-sources) ## Enable Organization-Wide Sharing for a Deployment Organization-wide sharing grants users in your organization, including users who are not members of your project, permission to view data in a deployment that is used for dashboards shared with your organization. You can enable organization-wide sharing[for an entire deployment](#std-label-org-sharing-deployment) or[for a specific data source.](https://mongodb.com/docs/charts/manage-data-sources/#std-label-org-sharing-data-source) ## Important If you enable organization-wide sharing for a deployment, it applies to all existing data sources and to any new data source you add to that deployment in the future. To enable organization-wide sharing for a deployment: 1 ### In the left navigation menu, click Data Sources. The Data Sources page displays. 2 ### In the Deployment dropdown, select the deployment that contains your data source. Deployments in MongoDB Charts reference Atlas deployments that contain valid Charts data sources, including: * All [clusters and serverless instances](https://www.mongodb.com/docs/atlascreate-database-deployment/) in your Atlasproject for which you have the[Project Data Access Read Only](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Data-Access-Read-Only) role or higher.\n* All [federated database instances](https://www.mongodb.com/docs/atlas/data-federation/) in your project, including[Online Archives.](https://www.mongodb.com/docs/atlas/online-archive/manage-online-archive/) After you select a deployment, the following information displays:\n\n 3 ### Turn on organization-wide sharing. In the Organization subsection of theData Access section, toggleAll users in the organization can view data in this data source to ON. ## Deployment Read Preference Each [deployment](https://mongodb.com/docs/charts/data-sources/#std-label-deployments) has a read preference, which determines the [replica set member](https://www.mongodb.com/docs/manual/core/replica-set-members/)that the data source reads data from. By default, a newly-added Atlas cluster has a read preference of Secondary, which means that it reads from a[secondary node](https://www.mongodb.com/docs/manual/core/replica-set-secondary/)within the Atlas cluster. You can change the read preference of a cluster using the Read preference dropdown. You can't change the read preference of a federated database instance. Federated database instances have a read preference of Nearest by default, which means that they read from the replica set member whose network latency falls within the acceptable latency window. To learn more, see[/core/read-preference/#mongodb-readmode-nearest.](https://www.mongodb.com/docs/manual/core/read-preference/#mongodb-readmode-nearest) The Read preference dropdown contains the following read preference options for clusters:\n\n ← [Manage Data Sources](https://mongodb.com/docs/charts/manage-data-sources/ \"Previous Section\")[Create and Manage Charts Views](https://mongodb.com/docs/charts/create-manage-charts-view/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/dashboards/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Dashboards On this page * [Dashboards Page](#dashboards-page)\n* [Create a New Dashboard](#create-a-new-dashboard)\n* [Add a Sample Dashboard](#add-a-sample-dashboard)\n* [Refresh Dashboard Data](#refresh-dashboard-data)\n* [Get Chart Data](#get-chart-data)\n* [Export and Import a Dashboard](#export-and-import-a-dashboard)\n* [Fullscreen Dashboard View](#fullscreen-dashboard-view) Dashboards are a collection of charts assembled to create a single unified display of your data. Each chart shows data from a single MongoDB collection or view, so dashboards are essential to attain insight into multiple focal points of your data in a single display. Dashboards can be shared with other users. ## Dashboards Page The Dashboards page shows all dashboards you have access to view. To learn more about dashboard permissions in MongoDB Charts, see[Dashboard Permissions.](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-permissions) ![Charts Dashboard Tab](https://mongodb.com/docs/charts/images/charts/charts-dashboard-landing.png) Each dashboard shows the following information: * Title\n* Description\n* A preview of the first three charts in the dashboard, including the chart title and type\n* When the dashboard was last modified By default, the most recently modified dashboards are shown first in the list. You can change the sort order by using theSort By dropdown menu. ## Create a New Dashboard To create a new dashboard: 1. From the Dashboards page, click theAdd Dashboard button.\n2. In the Add Dashboard dialog, enter a title for your dashboard.\n3. (Optional) Enter a description for your dashboard.\n4. Click Create. After after clicking the Create button you are taken to the page for your newly created dashboard, where you are prompted to add the first chart to your dashboard: ![Charts New Dashboard Example](https://mongodb.com/docs/charts/images/charts/charts-dashboard-new.png) ## Add a Sample Dashboard MongoDB Charts provides several sample dashboards that use various sample data sources. You can add a sample dashboard to explore different examples of charts you can create. ## Tip You can add a new sample dashboard even if you have an existing sample dashboard in your Charts project. This can be useful if you have changed a sample dashboard and want a fresh copy. To create a sample dashboard:\n\n After you select a category of sample data, Chartscreates a new Sample Dashboard of which you are the`Owner`. You can also create a Sample Dashboard by going through the Charts [Welcome Experience.](https://mongodb.com/docs/charts/welcome-experience/#std-label-welcome-experience) ### Sample Dashboard Filters Sample dashboards come with preset example dashboard filters. You can adjust these filters to modify the data that appears on your dashboard. To learn more about filtering dashboard data, see[Filter Dashboards by Field Values.](https://mongodb.com/docs/charts/dashboard-filtering/#std-label-dashboard-filtering) ## Refresh Dashboard Data MongoDB Charts automatically refreshes chart data once it becomes out of date with the backing data source. You can also manually refresh dashboard data at any time. To learn how to configure refresh settings and underlying refresh behavior, see [Refresh Dashboard Data.](https://mongodb.com/docs/charts/dashboard-refresh/) ## Get Chart Data The data underlying a chart can be exported as a table. All viewers of public dashboards and authenticated users of non-public dashboards can view and export data. To view the chart data, click Get Chart Data from the  menu. Each row in the table represents a data point. ## Important ### Data Table Differs from Chart Visualization Some configuration options you see reflected on a chart visualization are not applied to the data table. TheChart Data table displays underlying data retrieved with your full aggregation pipeline, and not all Chart Builder configuration options apply aggregation stages. Review your data to verify its contents. If you want to analyze your underlying data with a third-party tool, you can download your data from the Chart Data modal. To download your data, click Download - CSV orDownload - JSON. ## Note You can also retrieve chart data using the[Embedding SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/) `getData()` method. To learn more about SDK API methods, see the[Embedding SDK Reference](https://www.npmjs.com/package/@mongodb-js/charts-embed-dom). ![Viewing chart data will display a table of the values used to create a chart. It also allows for downloading a CSV or JSON representation of that table.](https://mongodb.com/docs/charts/images/charts/editor-chart-data.png) ## Export and Import a Dashboard You can export a dashboard to a file, which you can then import. Use this feature to: * Store your dashboard outside of MongoDB Charts\n* Import exported charts into the same or a different project ### Export a Dashboard to a File You can export a dashboard to a single file named`<Dashboard-Title>.charts`. The file contains the metadata for the dashboard, including: * Dashboard name and description\n* Dashboard layout including location of the charts in the dashboard\n* Chart definitions\n* Dashboard filter definitions\n* Details of the data sources used on the charts including:  \n   * Cluster name  \n   * Database name  \n   * Collection name\n* Embedding settings for each chart including:  \n   * Whether each embedding type is enabled or disabled  \n   * Filter allow list  \n   * Injected filter code The file **doesn't** include: * Dashboard [permissions](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-permissions)\n* External sharing settings for the data sources used\n* Data source pipelines\n* Chart embedding IDs You must have `Viewer` or higher [permissions](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-permissions) to export a dashboard. You can export a dashboard from the Dashboards page or from the dashboard itself. To export a dashboard: 1. If you are on the Dashboards page, click the ellipsis (`...`) for the dashboard you want to export.  \nIf you are on a dashboard, click the ellipsis (`...`) in the top right corner.\n2. Follow the browser prompts to download the file. ### Import a Dashboard From a File You can import a dashboard from a file on the [Dashboards page](#std-label-dashboards-tab). The file to import: * Can't be larger than 16 MBs\n* Must be a valid `.charts` file that you downloaded from a dashboard From the Dashboards page:\n\n ## Fullscreen Dashboard View MongoDB Charts provides a fullscreen view for dashboards. In this view,MongoDB Charts hides the main navigation bar and expands the dashboard to show the title, description, time of last modification, and charts in the entire space of the screen. To enter the fullscreen view for dashboards: 1. Select a dashboard from the Dashboards page.\n2. Click the View full screen () icon at the top-right of the dashboard. ## Note In the fullscreen view for dashboards, you can still: * [Remove](https://mongodb.com/docs/charts/manage-dashboards/#std-label-dashboard-remove-chart), [resize](https://mongodb.com/docs/charts/manage-dashboards/#std-label-dashboard-resize-chart), [rearrange](https://mongodb.com/docs/charts/manage-dashboards/#std-label-dashboard-rearrange-chart), and [edit](https://mongodb.com/docs/charts/manage-dashboards/#std-label-dashboard-edit-chart) charts by hovering over the desired chart.\n* Configure refresh settings and manually refresh chart data.\n* Enter the [fullscreen charts view.](https://mongodb.com/docs/charts/manage-dashboards/#std-label-fullscreen-charts-view) To exit the fullscreen view for dashboards, do one of the following tasks: * Click the Exit full screen () icon at the top-right of the dashboard.\n* Press the escape key. ← [Arrange the Charts on the Dashboard](https://mongodb.com/docs/charts/tutorial/movie-details/arrange-charts/ \"Previous Section\")[Manage Existing Dashboards](https://mongodb.com/docs/charts/manage-dashboards/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/manage-dashboards/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Manage Existing Dashboards On this page * [Viewer Actions](#viewer-actions)\n* [Duplicate a Dashboard](#duplicate-a-dashboard)\n* [Refresh Dashboard Data](#refresh-dashboard-data)\n* [Enter Fullscreen Charts View](#enter-fullscreen-charts-view)\n* [Author Actions](#author-actions)\n* [Add a Chart](#add-a-chart)\n* [Edit a Chart](#edit-a-chart)\n* [Remove a Chart](#remove-a-chart)\n* [Duplicate a Chart](#duplicate-a-chart)\n* [Move a Chart to a Different Dashboard](#move-a-chart-to-a-different-dashboard)\n* [Resize a Chart](#resize-a-chart)\n* [Reposition Charts](#reposition-charts)\n* [Rename a Dashboard and Edit its Description](#rename-a-dashboard-and-edit-its-description)\n* [Owner Actions](#owner-actions)\n* [Delete a Dashboard](#delete-a-dashboard)\n* [Modify Dashboard Permissions](#modify-dashboard-permissions) This page outlines various methods for modifying existing[dashboards](https://mongodb.com/docs/charts/dashboards/). The sections on this page outline the required [permissions](https://mongodb.com/docs/charts/dashboard-permissions/) to perform the actions. To begin modifying a dashboard, enter the dashboard view by clicking the desired dashboard from the Dashboards page. ## Note You can search for dashboards by title by using the search bar in the top-right corner of the page. ## Viewer Actions The following action can be performed by any user with at least`Viewer` [permissions](https://mongodb.com/docs/charts/dashboard-permissions/) on the target dashboard, meaning any level of dashboard access is sufficient. ### Duplicate a Dashboard You can duplicate any dashboard in your Dashboards page, even if you do not have editing permissions. You can duplicate a dashboard from the Dashboards page or from the dashboard itself. To duplicate a dashboard: 1. If you are on the Dashboards page, click the ellipsis (`...`) for the dashboard you want to duplicate.  \nIf you are on a dashboard, click the ellipsis (`...`) in the top right corner.\n2. Select Duplicate Dashboard from the pop-up menu.\n3. In the Dashboard Details dialog, update theTitle and Description fields.\n4. Click Save to save the duplicated dashboard. ## Note The user who duplicates a dashboard becomes the owner and only user of the newly duplicated dashboard. To grant other users access, update the dashboard's [permissions.](https://mongodb.com/docs/charts/dashboard-permissions/) ### Refresh Dashboard Data MongoDB Charts automatically refreshes chart data once it becomes out of date with the backing data source. You can also manually refresh dashboard data at any time. To learn more, see [Refresh Dashboard Data.](https://mongodb.com/docs/charts/dashboard-refresh/#std-label-refresh-dashboard) ### Enter Fullscreen Charts View MongoDB Charts provides a fullscreen view for charts. In this view, MongoDB Chartshides the main navigation bar and expands the selected chart in the entire space of the screen. To enter the fullscreen view for charts: 1. Select a dashboard from the Dashboards page.\n2. Hover over the chart.\n3. Click the expanding box at the top-right of the chart. ![Fullscreen Box](https://mongodb.com/docs/charts/images/charts/fullscreen-chart-view.png) To view another chart in the fullscreen view for charts, do one of the following tasks: * Click the arrows to the right and left of the chart\n* Click the dots at the bottom of the chart. To automatically cycle through the charts, click the play icon at the top-right of the chart. To stop, click the pause icon. To exit the fullscreen view for charts, do one of the following tasks: * Click the contracting box at the top-right of the dashboard.\n* Press the escape key. ## Author Actions The following actions require either the `Author` or `Owner` [permission](https://mongodb.com/docs/charts/dashboard-permissions/) on the target dashboard. ### Add a Chart\n\n ### Edit a Chart To edit a chart, hover over the desired chart and click theEdit button. To learn how to edit a chart's data source, see[Edit a Chart's Data Source](https://mongodb.com/docs/charts/data-sources/#std-label-edit-data-source). To learn how to set the data source for a new chart, see [Build Charts.](https://mongodb.com/docs/charts/build-charts/) ### Remove a Chart ## Important Removing a chart from a dashboard is a permanent operation. There is no way to recover a chart once it has been deleted, although the underlying data in the collection the chart was created from will continue to exist. To remove a chart from your dashboard, hover over the desired chart and click the ellipsis (...) button at the top-right of the chart. Select Delete Chart, then click theDelete Chart button in the dialog to confirm the chart deletion. ### Duplicate a Chart To quickly build multiple related charts without starting from scratch each time, you can duplicate any chart on a dashboard. To duplicate a chart: 1. Hover over the desired chart on your dashboard and click the ellipsis (...) button at the top-right of the chart.\n2. Select Duplicate Chart.\n3. Make any desired changes, then click the greenSave and Close button to save the new chart. This saves the chart on the same dashboard as the original copy. ### Move a Chart to a Different Dashboard ## Note This action requires the [author](https://mongodb.com/docs/charts/dashboard-permissions/) or[owner](https://mongodb.com/docs/charts/dashboard-permissions/) role on both the origin and destination dashboards. To move a chart to a different dashboard: 1. Navigate to the dashboard which contains the chart you wish to move.\n2. Hover over the desired chart and click the ellipsis (...) button at the top-right of the chart.\n3. Click Move to.\n4. In the Move to dialog, use the dropdown to select the target dashboard for the chart.\n5. Click Move Chart. Charts reloads the current dashboard and the target chart is no longer present. ### Resize a Chart To resize a chart, hover over the chart and drag the bottom-right corner until the appearing blue rectangle reaches the desired size. ![Resize Chart Example](https://mongodb.com/docs/charts/images/charts/resize-chart2.gif) ### Reposition Charts To rearrange charts in your dashboard, hover over the chart and drag the top-left corner until the appearing blue rectangle is in the desired location. You can also see how moving the chart will affect the position of other charts in your dashboard, as illustrated in the following example: ![Rearrange Charts Example](https://mongodb.com/docs/charts/images/charts/rearrange-charts2.gif) ### Rename a Dashboard and Edit its Description You can rename a dashboard and edit its description either from the[Dashboards page](https://mongodb.com/docs/charts/dashboards/#std-label-dashboards-tab), which shows an overview of all your dashboards, or from within an individual dashboard. From the Dashboards page: 1. Each dashboard has a button with an ellipsis icon (...) in the upper right corner. Click the ellipsis button.\n2. Select Edit Title / Description from the pop-up menu.\n3. In the Dashboard Details dialog, update theTitle and Description of your dashboard.\n4. Click Update to save your changes. From within an individual dashboard: 1. In the upper left corner of the desired dashboard view, hover over the dashboard title or description and click thepencil icon.\n2. In the Dashboard Details dialog, update theTitle and Description of your dashboard.\n3. Click Update to save your changes. ## Owner Actions The following actions require `Owner` [permission](https://mongodb.com/docs/charts/dashboard-permissions/) on the target dashboard. ### Delete a Dashboard ## Important Deleting a dashboard is a permanent operation. There is no way to recover a dashboard once it has been deleted, although the underlying data in the collections used in the dashboard will continue to exist. You can delete a dashboard from the Dashboards page or from the dashboard itself. To delete a dashboard: 1. If you are on the Dashboards page, click the ellipsis (`...`) for the dashboard you want to delete.  \nIf you are on a dashboard, click the ellipsis (`...`) in the top right corner.\n2. Click Delete.\n3. Click Delete in the Delete Dashboard dialog to confirm deletion. ### Modify Dashboard Permissions\n\n ← [Dashboards](https://mongodb.com/docs/charts/dashboards/ \"Previous Section\")[Dashboard Permissions and Sharing](https://mongodb.com/docs/charts/dashboard-permissions/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/query-library/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Save and Reuse Queries The Query Library allows you to reuse a query across multiple charts. If you save a query to the library, any user on your charts project can apply the same query on their own charts. Any changes to a query stored in the library impact all charts thar are connected to that query. ## Save Aggregation Pipeline Queries After you apply an aggregation pipeline query to a chart, you can save it to the Query Library. This makes the query available for use on other charts created by you and other users on the same charts project. To save a query: 1 ### In the Query bar for a chart, input a [find()](https://www.mongodb.com/docs/manual/reference/method/db.collection.find/) query or an aggregation pipeline and click Apply. To learn more, see [Run Aggregation Pipelines on Your Data](https://mongodb.com/docs/charts/aggregation-pipeline/#std-label-charts-agg-pipeline) and [Filter Your Data Using the Query Bar.](https://mongodb.com/docs/charts/filter-chart-results/#std-label-query-bar) 2 ### Click the Library dropdown next to the Query bar. The Query Library menu contains options for saving and loading queries. 3 ### Choose Save Query to display the confirmation window. 4 ### Enter a name for your query. The Query title field shows the names of each existing query and the number of charts that use the query. You can enter a new name for your query or select an eisting query name to overwrite the existing query with your new query. If you enter a new name, you must also click Create <your-query-title> to create a named query in the library. If you select an existing query from the list, the field is pre-populated with the selected query name. If you save an existing query, all charts connected to that query will inherit the new query text. 5 ### Click Save to save the query to the query library. ## Load Saved Queries To use a previously saved query from the Query Library on a chart, use the Library dropdown to load the saved query. You can access queries saved by any user in the project. To load saved queries: 1 ### Create a new chart, or click the Edit button for the chart. 2 ### Click the Library dropdown next to the query bar. The Query Library menu contains options for loading and saving queries. 3 ### Choose Load Query from the dropdown to display the Load Query pane. 4 ### Choose the saved query to run against your data. By default, the current data source is selected. It contains the list of queries applied to charts using the current data source only. You can choose Any data source to select from all saved queries in the library. 5 ### Browse the list of saved queries. In the Load Query pane, the queries are listed in alphabetical order and are case insensitive. For each query, you can see the name of the query, the start of the query, and the number of charts that use the query. Also, you can do the following: * Hover over the tooltip icon to see the query owner and when the query was last modified.\n* Click x to close the library pane. To learn more about all other actions that you can perform on the saved queries, see [Manage Saved Queries.](#std-label-charts-query-library-manage) 6 ### Click Load for the query you wish to load in the query bar. After loading a query, you can run the query against the data in the chart. Also, you can modify or disconnect the query from the library. To learn more, see [Modify or Disconnect Saved Queries.](#std-label-charts-query-library-modify-disconnect) ## Modify or Disconnect Saved Queries After you [load a saved query](#std-label-charts-query-library-load), you can modify or disconnect the query from the library. **To modify**, make changes to the query in the query bar and save the query under its original name, only if you created the query or have the [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner) role, or save the query under a new name. If you save the modified query under the same name, all other charts using the same named query will inherit the modified query for reuse.\n\n **To disconnect**, modify the query in the query bar and clickApply after changing the query. The query is disconnected from the library, which makes the modified query _private_ to this chart. You must save the query to the library if you wish to reuse this query on other charts in the future. If you save the query under the same name in the library, all charts connected to it will inherit the new query. Alternatively, click Revert before applying the query to the chart to undo the changes. ## Manage Saved Queries When you [load a saved query](#std-label-charts-query-library-load), the query author or user with the [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner) role can rename or delete the queries in the library. 1 ### Create a new chart, or click the Edit button for the chart. 2 ### Click the Library dropdown next to the query bar. The Query Library menu contains options for loading and saving queries. 3 ### Choose Load Query from the dropdown to display the Load Query pane. In the Load Query pane, the queries are listed in alphabetical order and are case insensitive. You can do the following if you created the query or if you have the [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner)role: #### Rename a Query 1. Click the pencil icon next to the name of the query that you wish to rename.\n2. Enter the new name for the query. Each query name must be unique.\n3. Click the check mark to save the query under the new name.  \nRename or delete the query from the library. #### Delete a Query 1. Click the trash icon for the query you wish to delete from the library.\n2. Choose one of the following options:  \n   * Delete the query from the library, and keep the contents of the query on the connected chart.  \n   If you choose this option, the query will continue to be available to any charts that used the query, but the query will be disconnected from the library and unavailable for any new charts.  \n   * Delete query from the library, and remove the contents of the query on the connected chart.  \n   If you choose this option, the query will be removed from the library and unavailable for any new or existing charts that used the query. ← [Run Aggregation Pipelines on Your Data](https://mongodb.com/docs/charts/aggregation-pipeline/ \"Previous Section\")[Filter Chart Results](https://mongodb.com/docs/charts/filter-chart-results/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/embedded-chart-options/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embedded Chart Options On this page * [Configure Refresh and Data Caching Behavior](#configure-refresh-and-data-caching-behavior)\n* [Specify a Display Theme](#specify-a-display-theme)\n* [Customize Display Options](#customize-display-options)\n* [Refresh and Data Caching Behavior](#refresh-and-data-caching-behavior) You can customize the appearance and behavior your embedded charts with a variety of options. Options are available to charts embedded with the[Embedding SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/#std-label-embedding-charts-sdk) and embedded within[iframes.](https://mongodb.com/docs/charts/embedding-charts-iframe/#std-label-embedding-charts-iframe) ## Note To embed charts from your dashboards, you must configure embedding options on your data sources. For instructions, see[Embed Charts in Your Web Application.](https://mongodb.com/docs/charts/embedding-charts/#std-label-embedding-charts) ## Refresh and Data Caching Behavior The following table describes how MongoDB Charts loads data from the cache when loading or refreshing the chart based on the`autoRefresh` and `maxDataAge` values.\n\n ← [Embed Charts with the Embedding SDK](https://mongodb.com/docs/charts/charts-embedding-sdk/ \"Previous Section\")[Filter Embedded Charts](https://mongodb.com/docs/charts/filter-embedded-charts/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/embed-chart-stitch-auth/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embed a Chart Authenticated with Atlas App Services On this page * [Prerequisites](#prerequisites)\n* [Procedures](#procedures)\n* [Enable Authenticated Embedding for a Chart](#enable-authenticated-embedding-for-a-chart)\n* [Configure Charts to use your Custom Atlas App Services Provider](#configure-charts-short-to-use-your-custom-atlas-app-services-provider)\n* [Create a Web App to Display Your Chart](#create-a-web-app-to-display-your-chart)\n* [Customize the Node.js App](#customize-the-node.js-app) [Atlas App Services](https://www.mongodb.com/docs/atlas/app-services/) is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. App Services offers several authentication options, including [Google OAuth](https://developers.google.com/identity/protocols/oauth2), [Facebook Login](https://developers.facebook.com/docs/facebook-login/), and email/password. You can use the authentication mechanism from an app service to control data access for an embedded chart. This tutorial shows you how to: * Enable authenticated embedding for a chart.\n* Use the Embedding SDK to embed a chart authenticated by a custom[Atlas App Services](https://www.mongodb.com/docs/atlas/app-services/) provider.\n* Use your app service to control the data in your embedded chart. ## Note This tutorial does not cover creating an app service with authentication. See the [Atlas App Services documentation](https://www.mongodb.com/docs/realm/tutorials/) for app creation tutorials. ## Prerequisites * You must be an Atlas [Project Owner](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) to configure embedding authentication providers for your linkedCharts instance.\n* You must have a chart which uses your app's backing database as its [data source](https://mongodb.com/docs/charts/data-sources/#std-label-data-sources). For more information about creating a chart, see [Build Charts.](https://mongodb.com/docs/charts/build-charts/#std-label-build-charts) ## Procedures ### Enable Authenticated Embedding for a Chart Enable authenticated embedding to generate a Charts Base URL and a chart ID. You will need your Charts Base URL and chart ID to display your chart on a web page. 1 #### Select a dashboard. From your dashboard page, select the dashboard containing the chart you wish to embed. 2 #### Select a chart. From the dashboard, click  at the top-right of the chart to access its embedding information. SelectEmbed chart from the dropdown menu. ## Note If a chart is on a dashboard that has embedding enabled, theEmbed Chart option is automatically enabled. Therefore, you can't select the Embed chart option for charts within dashboards that have embedding enabled. 3 #### Enable external sharing on the data source If you have already enabled external sharing on the data source this chart uses, skip this step. If you haven't yet enabled embedding on the data source, you can do so now. Click theConfigure external sharing link. 4 #### Select the Authenticated tab in the dialog window. ![Embed authenticated chart](https://mongodb.com/docs/charts/images/charts/embed-chart-authenticated.png) 5 #### Toggle Enable authenticated access to On. 6 #### (_Optional_) Specify a filter function to inject per user. You can specify a function to inject a MongoDB filter document for each user who views the chart. This is useful for rendering user-specific charts. ## Example The following filter function only renders data where the`ownerId` field of a document matches the value of the Embedding Authentication Provider's token's `sub` field: `| function getFilter(context) {          |\n| -------------------------------------- |\n| return { ownerId: context.token.sub }; |\n| }                                      | ` ## Tip ### See also: \n\n 7 #### (_Optional_) Specify filterable fields for your chart. Specify the fields on which chart viewers can filter data. By default, no fields are specified, meaning the chart cannot be filtered until you explicitly allow at least one field. ## Tip ### See also:  To learn more about filterable fields, see[Specify Filterable Fields.](https://mongodb.com/docs/charts/filter-embedded-charts/#std-label-specify-filter-fields) 8 #### Copy the Chart Base URL and Chart ID Use these values in your application code together with your Embedded Authentication Provider attributes to embed your chart. ### Configure Charts to use your Custom Atlas App Services Provider 1 #### Go to the Authentication Settings view. 1. If Charts is not already displayed, clickCharts in the navigation bar.\n2. Click Embedding in the sidebar.\n3. Click the Authentication Settings tab. 2 #### From the Authentication providers section, click Add. 3 #### In the Name field, enter a descriptive name for the provider. 4 #### From the Provider list, select Atlas App Services. 5 #### From the Atlas Project list, select the Cloud project that contains your app service. 6 #### From the App ID list, select the app service to use for authentication. 7 #### Set toggle switch for using Atlas App Services rules for data access. In addition to authenticating users for embedded chart access, you can perform fine-grained data access control with your app service [service rules](https://www.mongodb.com/docs/realm/services/define-a-service-rule/). Set the toggle switch toOn if you want to enable rule enforcement. When this option is enabled, any App Services rules defined on collections will be observed by Charts when retrieving chart data. You can use this feature to restrict access to the data shown on your chart, including showing different subsets of data to different users, depending on their[role.](https://www.mongodb.com/docs/realm/mongodb/define-roles-and-permissions/) ## Note * This option assumes that the [data source](https://mongodb.com/docs/charts/data-sources/#std-label-data-sources) for this chart uses the same MongoDB database and collection as your app service.\n* Using this option may have a performance impact, so you should leave it off if you do not need to restrict data access based on App Services rules. 8 #### Enter service name. Enter the name of the service that fetches data from MongoDB. To find the name of your data service: 1. Navigate to your app service.\n2. Click Clusters in the sidebar navigation.\n3. The service name is listed under App Service Name. 9 #### Click the Save button. ## Create a Web App to Display Your Chart If you already have an app in which to display your chart, you're ready to add an [embedded chart](https://mongodb.com/docs/charts/embedding-charts-sdk/#std-label-embedding-charts-sdk). If not, proceed with the remaining steps to create a new app. MongoDB offers a pre-built example app that shows how to use the Embedding SDK to display an embedded chart using App Services authentication. Clone the [GitHub repository](https://github.com//mongodb-js/charts-embed-sdk/tree/master/examples/charts/authenticated-realm) and follow the instructions in the `Readme` file to begin using the app. You can run the app as-is, or you can customize it to use the chart you created earlier. ## Note The example app assumes that your app service uses email/password authentication. If your app service uses another authentication mechanism, the example app will require additional customization. ### Customize the Node.js App All the lines you need to edit are marked with a comment containing`~REPLACE~`. 1 #### Open the file `index.js` in a text editor. The file `index.js` is located in the `src` directory. 2 #### Enter your App ID Replace the existing App ID with your App ID, which you can find on the left side of your app service UI. ```javascript const client = Stitch.initializeAppClient(   'authentication-sample-eibkj', // Optional: ~REPLACE~ with your  App ID { \n``` 3 #### Enter your Charts Base URL\n\n ```javascript const sdk = new ChartsEmbedSDK({   baseUrl: \"https://charts-dev.mongodb.com/charts-test2-pebbp\", // Optional: ~REPLACE~ with your Charts URL   getUserToken: () => getRealmUserToken(client), }); \n``` Note the `getRealmUserToken()` function in the code snippet above, which returns the JWT from the existing Atlas App Services authentication session.`getRealmUserToken()` must be imported from the Embedding SDK, as you can see in the `import` statement on line 2 of the example app: ```javascript import ChartsEmbedSDK, { getRealmUserToken } from \"@mongodb-js/charts-embed-dom\"; \n``` You can also include the Embedding SDK with inline Javascript in an HTML page, as shown in the following code snippet: ```javascript <script src=\"https://s3.amazonaws.com/stitch-sdks/js/bundles/4.6.0/stitch.js\"></script> <script src=\"https://unpkg.com/@mongodb-js/charts-embed-dom\"></script> \n``` To use the `getRealmUserToken()` function in this scenario, import it from the SDK: ```javascript ChartsEmbedSDK.getRealmUserToken() \n``` 4 #### Enter your chart ID Replace the existing chart ID with the ID of the chart you want to display. Your chart ID is visible in the embedding options modal window. See[Embedding SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/) for detailed instructions on enabling embedding for a chart. ```javascript const chart = sdk.createChart({   chartId: \"a2e775e6-f267-4c2c-a65d-fbf3fad4a4f2\", // Optional: ~REPLACE~ with your Chart ID }); \n``` After you finish customizing the app, it's ready to run. ← [Embed a Chart Authenticated with Google Sign-In](https://mongodb.com/docs/charts/embed-chart-google-auth/ \"Previous Section\")[Embed an Authenticated Chart using a Custom JWT Provider](https://mongodb.com/docs/charts/embed-chart-jwt-auth/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/subset-mode/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Subset Mode You can enable Subset Mode in MongoDB Charts to restrict the input collection to `1000` randomly selected documents. To toggleSubset Mode, use the toggle in the Previewsection. The Subset Mode setting for a chart doesn't persist when the chart renders on a dashboard. So, if you enable subset mode when you build a chart, the data that renders in the dashboard isn't sampled. ## Note When you enable subset mode and you specify a [filter](https://mongodb.com/docs/charts/filter-chart-results/#std-label-charts-filter-documents), MongoDB Charts takes the sample of `1000`documents _before_ it applies the filter. So, MongoDB Charts might use fewer than `1000` documents to plot the chart. ## Use Case Consider using Subset Mode when you draft a chart and heavily modify chart options. In this situation,Subset Mode lets the chart render quickly during the building process. When you feel satisfied with your chart, save it as soon as possible. ## Note Due to the random nature of sampling, when you haveSubset Mode enabled, your visualizations might change each time the chart loads in the chart builder. ← [Chart Building Reference](https://mongodb.com/docs/charts/build-charts-reference/ \"Previous Section\")[Backing Aggregation Pipeline](https://mongodb.com/docs/charts/aggregation-pipeline-generation/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/manage-embedded-items/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Manage Embedded Items On this page * [View Embedded Items](#view-embedded-items)\n* [Go to the Items view.](#go-to-the-items-view.)\n* [(Optional) Filter the list of embedded items.](#-optional--filter-the-list-of-embedded-items.)\n* [Modify an Embedded Item](#modify-an-embedded-item)\n* [Go to the Items view.](#go-to-the-items-view.-1)\n* [Go to the embedding settings.](#go-to-the-embedding-settings.)\n* [Modify the embedded item.](#modify-the-embedded-item.) You can view, filter, and modify [embedded charts](https://mongodb.com/docs/charts/embedding-charts/#std-label-embedding-charts) and [embedded dashboards](https://mongodb.com/docs/charts/embedding-dashboards/#std-label-embedding-dashboards) in the Items view. TheItems view includes a list of all the embedded items that you created or that someone shared with you. Each embedded item appears along with its Emdedding ID and details about whether the item has authetication enabled at the dashboard or charts level. Options to filter the list appear at the top of the view. You can click the name of a dashboard to go to the associated dashboard page. ## Note If you added a [sample dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-sample-dashboard), it doesn't appear in this list of embedded items. You must be a dashboard [Author](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-permissions) to: * View the dashboard list.\n* View the Emdedding ID.\n* Modify an embedded item. ## View Embedded Items 1 ### Go to the Items view. 1. If Charts is not already displayed, clickCharts in the navigation bar.\n2. Click Embedding in the sidebar.\n3. Click the Items tab. 2 ### (Optional) Filter the list of embedded items. Do one or all of the following steps: * Enter a dashboard or chart name.\n* Toggle Dashboards only. ## Modify an Embedded Item 1 ### Go to the Items view. 1. If Charts is not already displayed, clickCharts in the navigation bar.\n2. Click Embedding in the sidebar.\n3. Click the Items tab. 2 ### Go to the embedding settings. Click Settings next to the embedded item that you want to modify. 3 ### Modify the embedded item. 1. Modify the [embedded chart options](https://mongodb.com/docs/charts/embedded-chart-options/#std-label-embedded-chart-options) or the[embedded dashboard options](https://mongodb.com/docs/charts/embedded-dashboard-options/#std-label-embedded-dashboard-options)as desired.\n2. Click Close. ← [Embed an Unauthenticated Chart](https://mongodb.com/docs/charts/embed-chart-anon-auth/ \"Previous Section\")[Embedded Error Codes](https://mongodb.com/docs/charts/embedded-chart-error-codes/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/calculated-fields/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Calculate New Data Fields On this page * [Considerations](#considerations)\n* [Create a Calculated Field](#create-a-calculated-field)\n* [Edit a Calculated Field](#edit-a-calculated-field)\n* [Remove a Calculated Field](#remove-a-calculated-field) You can combine data from one or more fields in your collection into a single calculated field. For example, you can: * Convert a field in hours to seconds or in degrees Farenheit to Celsius\n* Multiply a price field by a quantity field to create a total\n* Combine multiple line items within an array to calculate a total ## Considerations * You can only create calculated fields from data within the same document.\n* You can't [convert the type](https://mongodb.com/docs/charts/convert-field-data-types/#std-label-convert-field-data-types) of a calculated field through the MongoDB Charts interface. However, you can use[Type Expression Operators](https://www.mongodb.com/docs/manual/meta/aggregation-quick-reference/#type-expression-operators) in a calculated field's definition.\n* Once you create a calculated field, you can [modify](#std-label-edit-calculated-field) its definition but not its name. However, you can [remove](#std-label-remove-calculated-field) and recreate the field if you need to rename it. ## Create a Calculated Field You create a calculated field by combining the data of existing fields through simple expressions or MQL [Operator Expressions.](https://www.mongodb.com/docs/manual/meta/aggregation-quick-reference/#std-label-agg-quick-ref-operator-expressions) ## Note The definition of a calculated field can contain either simple expression language or operator expression language. You can't use both simple and operator expression language in the same definition. To create a calculated field: 1. In the corner of the Fields pane, clickAdd Field.\n2. Select Calculated.\n3. Enter the Field Name of the calculated field you want to define. You can specify a nested field by using dot notation. For example, `metadata.target`.\n4. Enter the Value Expression using [simple expression](#std-label-calc-field-simple) language or[Operator Expressions.](https://www.mongodb.com/docs/manual/meta/aggregation-quick-reference/#std-label-agg-quick-ref-operator-expressions)\n5. Click Save Field. The calculated field appears in italics in the Fields pane. ### Simple Expressions You can use the following simple expression language in a calculated field. | Expression Language    | Example                            |\n| ---------------------- | ---------------------------------- |\n| Field names            | orderTotal'orderTotal'\"orderTotal\" |\n| Literal numbers        | 20.5                               |\n| Mathematical operators | +\\-\\*/                             |\n| Brackets               | ( )                                | Whitespace that is outside of quoted strings is not included in the expression. ![Click \"Add Field\", enter a field name and simple expressions definition, then click \"Save Field\".](https://mongodb.com/docs/charts/images/charts/calculated-field-simple.png) ## Example The following examples are valid simple expressions to define a calculated field. Add the `bathrooms` field to the `bedrooms` field: `| bathrooms + bedrooms |\n| -------------------- | ` Multiply the `total amount` field by 1.1: ``` 'total amount' * 1.1 \n``` Subtract `32` from the `sensor.temp` field, then multiply by`5` and divide by `9`: ```\n\n \n``` ### Operator Expressions You can use [Operator Expressions](https://www.mongodb.com/docs/manual/meta/aggregation-quick-reference/#std-label-agg-quick-ref-operator-expressions) to define more complex calculated fields. ## Example The following examples are valid operator expressions to define a calculated field. Multiply the `price` field by `0.075`: ``` { $multiply: [ \"$price\", 0.075 ] } \n``` Combine multiple line items fields in an array to calculate a total: ``` { $reduce: {   input: '$items', initialValue: 0,   in: { $sum : [\"$$value\",     { $multiply: [\"$$this.price\",       \"$$this.quantity\"] }   ] } } } \n``` ## Tip You can use a calculated field in the definition of another calculated field. For example, if you create a `salesTax` calculated field with the following definition: ``` { $multiply: [ \"$price\", 0.075 ] } \n``` You can then create a `totalCost` calculated field that uses the`salesTax` field in its definition: ``` { $sum: [\"$price\", \"$salesTax\"] } \n``` ### Literal Strings You can set a calculated field's value to a string using the `$literal`operator. ## Example The following field definition assigns a value of `my string`: ``` { $literal: \"my string\" } \n``` ## Edit a Calculated Field You can modify the definition of a calculated field. 1. In the Fields pane, click the Ellipsis (...)next to the name of the calculated field you want to modify.\n2. Select Modify field.\n3. Update the Value Expression.\n4. Click Save Field. If you are using the calculated field in a chart, the chart refreshes to reflect the new calculated field definition. ![Click the ellipsis next to the field name, then click \"Modify field\".](https://mongodb.com/docs/charts/images/charts/calculated-field-modify.png) ## Remove a Calculated Field When you remove a calculated field, MongoDB Charts resamples the data source, updates the Fields pane, and refreshes your chart. If the calculated field was used in encodings or filters, it remains in the chart even after the field is removed from the Fields pane. To remove a calculated field: 1. In the Fields pane, click the Ellipsis (...)next to the name of the calculated field you want to remove.\n2. Select Remove field. ![Click the ellipsis next to the field name, then click \"Remove field\".](https://mongodb.com/docs/charts/images/charts/calculated-field-remove.png) ← [Reshape Your Data](https://mongodb.com/docs/charts/reshape-data/ \"Previous Section\")[Convert Field Data Types](https://mongodb.com/docs/charts/convert-field-data-types/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/rich-schema-support/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Visualize Embedded Objects and Arrays On this page * [Embedded Objects](#embedded-objects)\n* [Array Fields](#array-fields) MongoDB Charts can visualize fields from rich data structures. You can directly access fields in embedded objects and flexibly process array fields according to your use case. ## Embedded Objects Embedded objects in the Fields section of the Chart Builder are indicated by curly brackets (`{}`) next to their name. To expand an object field, click the arrow to the left of the field name. You can drag embedded object fields onto the desired[encoding channels](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) just like any other field to visualize those fields in your chart. ## Example The `video.movieDetails` data source in the following example contains embedded objects named `awards` and `imdb`. We expand the objects by clicking the arrows to the left of their names, then in the bar chart we compare the mean `imdb.rating` in the Y-axis with`awards.wins` in the X-axis. ![Create chart embedded object](https://mongodb.com/docs/charts/images/charts/charts-nested-obj-3.png) ## Note Notice the filter provided above the chart of`{'awards.wins': {$gt: 0}}`, meaning only movies which have won at least one award are included in the visualization. For more information on filtering documents in MongoDB Charts, see the[Filter Documents](https://mongodb.com/docs/charts/filter-chart-results/#std-label-charts-filter-documents) page. ## Array Fields Array fields in the Fields section of the Chart Builder page are indicated by square brackets (`[]`) next to their name. When adding an array field to an [encoding channel](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels), select an array reduction option to process the data in the best way for your visualization. The following array reduction options are available: ### General Array Reduction Options You can apply these array reduction options to any array:\n\n ### String Accumulates You can apply these accumulates to arrays of String values:\n\n ### Numeric Accumulates You can apply these accumulates to arrays of Numeric values: | Accumulate | Description                                  |\n| ---------- | -------------------------------------------- |\n| min        | Returns the minimum value in the array.      |\n| max        | Returns the maximum value in the array.      |\n| mean       | Returns the mean of all values in the array. |\n| sum        | Returns the sum of all values in the array.  | ## Note MongoDB Charts only displays accumulate options which match the data type of the field used in the visualization (i.e., only showing string accumulate options for string data and numeric accumulate options for numeric data). ### Fields within an Array As with array-valued fields, [encoding channels](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) require an array reduction option to be specified when handling fields _within_ an array. In this case, the selected reduction is applied to the array containing the target field. Additionally, in the case of embedded arrays, you must select a reduction option for the top-level array and all sub-arrays. Note that different reduction options may be used for each embedded array. ← [Create a Multi-Series Chart](https://mongodb.com/docs/charts/multi-series-charts/ \"Previous Section\")[Reshape Your Data](https://mongodb.com/docs/charts/reshape-data/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/embedding-charts/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embed Charts in Your Web Application As a dashboard [Author](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-permissions), you can embed your charts and dashboards in external websites or share them through links. You can embed the following charts or dashboards: * Embed a [chart or dashboard that doesn't require authentication](https://mongodb.com/docs/charts/embed-chart-anon-auth/#std-label-anon-embedding-charts) (unauthenticated), which anyone can view.\n* Embed a chart or dashboard that requires users to authenticate through an [Embedding Authentication Provider.](https://mongodb.com/docs/charts/configure-auth-providers/#std-label-configure-auth-providers) You can control embedded charts programmatically with the[Embedding SDK](https://mongodb.com/docs/charts/charts-embedding-sdk/#std-label-charts-embedding-sdk), or use static HTML with an [iframe.](https://mongodb.com/docs/charts/embedding-charts-iframe/#std-label-embedding-charts-iframe) ## Note If a chart is on a dashboard that has embedding enabled, theEmbed Chart option is automatically enabled. Therefore, you can't select the Embed chart option for charts within dashboards that have embedding enabled. To learn how to embed charts in a web application, see the[Embedding Tutorials.](https://mongodb.com/docs/charts/embedding-tutorials/#std-label-embedding-tutorials) To learn more, see [Embedded Chart Options](https://mongodb.com/docs/charts/embedded-chart-options/#std-label-embedded-chart-options) and[Filter Embedded Charts.](https://mongodb.com/docs/charts/filter-embedded-charts/#std-label-filter-embedded-charts)",
  "https://www.mongodb.com/docs/charts/charts-embedding-sdk/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embed Charts with the Embedding SDK You can embed a chart into a web application with the [Embedding SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/#std-label-embedding-charts-sdk), which allows you to make more flexible adjustments to chart settings and rendering. You can use the embedding SDK to do the following tasks: * Add filters dynamically\n* Change the size and style of the chart\n* Refresh on demand\n* Programmatically save charts as an image To embed a chart with the SDK, you need to: 1. Enable embedding for the chart.\n2. Allow [embedded chart filtering](https://mongodb.com/docs/charts/filter-embedded-charts/#std-label-embed-options-filter) on certain fields by [specifying filterable fields](https://mongodb.com/docs/charts/filter-embedded-charts/#std-label-specify-filter-fields). Don't include fields that may reveal sensitive data.\n3. Have the chart ID and base URL strings. To learn more, see [Get Started with the Embedding SDK.](https://mongodb.com/docs/charts/get-started-embedding-sdk/#std-label-get-started-embedding-sdk) ← [Embed Charts with an iframe](https://mongodb.com/docs/charts/embedding-charts-iframe/ \"Previous Section\")[Embedded Chart Options](https://mongodb.com/docs/charts/embedded-chart-options/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/embedding-charts-sdk/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embedding SDK On this page * [Install the Embedding SDK](#install-the-embedding-sdk)\n* [Examples](#examples) You can embed a chart or dashboard into a web application with the Embedding SDK, allowing more flexible adjustments of settings and rendering. To learn more, see [Get Started with the Embedding SDK.](https://mongodb.com/docs/charts/get-started-embedding-sdk/#std-label-get-started-embedding-sdk) ## Install the Embedding SDK If you have a simple web app, you can reference the Embedding SDK from a script tag, and no installation is needed. You can use the UMD to run `@mongodb-js/charts-embed-sdk`directly in the browser. `| <script src=\"https://unpkg.com/@mongodb-js/charts-embed-dom\"></script> |\n| ---------------------------------------------------------------------- | ` If you are building a more complex web app and are using `npm` or`yarn`, you can install the Embedding SDK so that it can be used directly from your script files. To install the embedding SDK with `npm`, use the following command: ``` npm install @mongodb-js/charts-embed-dom \n``` To install with `yarn`: ``` yarn add @mongodb-js/charts-embed-dom \n``` ## Examples An [example app](https://codesandbox.io/s/charts-embedding-sdk-8i898) using the embedding SDK can be found at `codesandbox.io`. The example app demonstrates some of the interactive features available to the embedding SDK, including an interactive filter and a manual refresh button. The example app is configured with a chart ID and base URL which are particular to the app. Be sure to configure your own apps with the correct chart ID or dashboard ID and base URL. The example app uses two SDK methods:\n\n Other examples are available in the [MongoDB Embedding SDK Examples](https://github.com//mongodb-js/charts-embed-sdk/tree/master/examples/) GitHub repository. ← [Filter Embedded Dashboards](https://mongodb.com/docs/charts/filter-embedded-dashboards/ \"Previous Section\")[Get Started with the Embedding SDK](https://mongodb.com/docs/charts/get-started-embedding-sdk/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/convert-field-data-types/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Convert Field Data Types On this page * [Requirements & Limitations](#requirements---limitations)\n* [Convert a Field's Data Type](#convert-a-field-s-data-type)\n* [Convert Data Types in an Array](#convert-data-types-in-an-array)\n* [Revert a Field's Data Type Conversion](#revert-a-field-s-data-type-conversion) You can convert the data type of the fields returned from your data source in the Chart Builder to a different data type. For example, you can convert numbers stored as strings to numbers, convert dates stored as strings or Unix timestamps to dates, or treat ObjectId fields as dates. ## Requirements & Limitations * Your deployment must use MongoDB 4.0 or later.\n* You cannot convert GeoJSON fields.\n* You cannot convert arrays nested more than one level deep. ## Convert a Field's Data Type To convert a field's data type, click on that field and selectConvert type from the Ellipsis (...) menu. ![To change a field's data type, click on that field and select \"Convert type\" from the ellipses menu.](https://mongodb.com/docs/charts/images/charts/convert-field-data-type.png) MongoDB Charts supports converting data into the following types: | Label   | BSON Type                                                                                               |\n| ------- | ------------------------------------------------------------------------------------------------------- |\n| String  | [String](https://www.mongodb.com/docs/manual/reference/operator/aggregation/convert/#convert-to-string) |\n| Date    | [Date](https://www.mongodb.com/docs/manual/reference/operator/aggregation/convert/#convert-to-date)     |\n| Number  | [Double](https://www.mongodb.com/docs/manual/reference/operator/aggregation/convert/#convert-to-double) |\n| Boolean | [Bool](https://www.mongodb.com/docs/manual/reference/operator/aggregation/convert/#convert-to-bool)     | Data types are converted by an[aggregation pipeline](https://www.mongodb.com/docs/manual/core/aggregation-pipeline/). For each type conversion you select, you can find the underlying aggregation stage by[viewing your aggregation pipeline.](https://mongodb.com/docs/charts/view-export-chart-data/#std-label-view-aggregation-pipeline) To see the effects of your conversion on a sample document,[view a sample source document.](https://mongodb.com/docs/charts/view-export-chart-data/#std-label-view-source-documents) Your conversions are saved with your chart definition. ## Convert Data Types in an Array You can convert arrays of primitive data and fields of primitive data from arrays of documents. Each item in the array is converted to the new type. However, if the conversion is invalid or if the original value of the item is `null`, the item converts to `null`. You cannot convert arrays nested more than one level deep. ## Example You have an array of strings: `| [\"1\", \"fish\", \"42\"] |\n| ------------------- | ` Applying the Number data type conversion returns the following array: ```javascript [1, null, 45] \n``` ## Example You have an array of documents with fields `foo` and `bar`: ```javascript [{foo: \"1\", bar: \"2\"}, {foo: \"fish\", bar: \"tacos\"}, {foo: \"45\", bar: \"46\"}] \n``` Applying the Number data type conversion to the `foo`field returns the following array of documents: ```javascript [{foo: 1, bar: \"2\"}, {foo: null, bar: \"tacos\"}, {foo: 45, bar: \"46\"}] \n```\n\n A converted field's icon reflects the new data type and turns green. To remove a conversion and return the field to its original data type, select Auto Detect from the Ellipses (...) Convert Type menu. ![A field converted to a string will show a green \"A\" symbol to indicate its new status.](https://mongodb.com/docs/charts/images/charts/converted-field-icon-example.png) ← [Calculate New Data Fields](https://mongodb.com/docs/charts/calculated-fields/ \"Previous Section\")[Add a Lookup Field](https://mongodb.com/docs/charts/add-lookup-field/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/embed-chart-jwt-auth/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embed an Authenticated Chart using a Custom JWT Provider On this page * [Prerequisites](#prerequisites)\n* [Procedures](#procedures)\n* [Enable Authenticated Embedding for a Chart](#enable-authenticated-embedding-for-a-chart)\n* [Configure Charts to use your Custom JWT Provider](#configure-charts-short-to-use-your-custom-jwt-provider)\n* [Create a Web App to Display your Chart](#create-a-web-app-to-display-your-chart)\n* [Customize the Node.js App](#customize-the-node.js-app) Many websites use authentication systems that generate JWTs to represent a signed-in user. If your website produces JWTs, you can configure Charts to validate the existing tokens to authorize the rendering of embedded charts. Alternatively, if your site does not already use JWTs as a part of the authentication process, you can write code to generate JWTs explicitly for the purpose of authorizing chart renders. This tutorial shows the latter approach. The example shows you how to generate a simple JWT for a logged in user and send it toCharts. Charts uses the details you provided when you configure a provider to validate JWTs it receives with requests to render embedded charts. If the token is invalid or does not conform to the details you provided, Charts doesn't render the authenticated chart view. ## Prerequisites * You must be an Atlas [Project Owner](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) to configure embedding authentication providers for your linkedCharts instance.\n* [Create a New Dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-create-new-dashboard)\n* [Create a Chart](https://mongodb.com/docs/charts/build-charts/#std-label-create-new-chart) ## Procedures ### Enable Authenticated Embedding for a Chart Enable authenticated embedding to generate a Charts Base URL and a chart ID. You will need your Charts Base URL and chart ID to display your chart on a web page. 1 #### Select a dashboard. From your dashboard page, select the dashboard containing the chart you wish to embed. 2 #### Select a chart. From the dashboard, click  at the top-right of the chart to access its embedding information. SelectEmbed chart from the dropdown menu. ## Note If a chart is on a dashboard that has embedding enabled, theEmbed Chart option is automatically enabled. Therefore, you can't select the Embed chart option for charts within dashboards that have embedding enabled. 3 #### Enable external sharing on the data source If you have already enabled external sharing on the data source this chart uses, skip this step. If you haven't yet enabled embedding on the data source, you can do so now. Click theConfigure external sharing link. 4 #### Select the Authenticated tab in the dialog window. ![Embed authenticated chart](https://mongodb.com/docs/charts/images/charts/embed-chart-authenticated.png) 5 #### Toggle Enable authenticated access to On. 6 #### (_Optional_) Specify a filter function to inject per user. You can specify a function to inject a MongoDB filter document for each user who views the chart. This is useful for rendering user-specific charts. ## Example The following filter function only renders data where the`ownerId` field of a document matches the value of the Embedding Authentication Provider's token's `sub` field: `| function getFilter(context) {          |\n| -------------------------------------- |\n| return { ownerId: context.token.sub }; |\n| }                                      | ` ## Tip ### See also:  To learn more about injecting filters per user, see[Inject User-Specific Filters.](https://mongodb.com/docs/charts/filter-embedded-charts/#std-label-inject-filter-per-user) 7 #### (_Optional_) Specify filterable fields for your chart. Specify the fields on which chart viewers can filter data. By default, no fields are specified, meaning the chart cannot be filtered until you explicitly allow at least one field. ## Tip ### See also: \n\n 8 #### Copy the Chart Base URL and Chart ID Use these values in your application code together with your Embedded Authentication Provider attributes to embed your chart. ### Configure Charts to use your Custom JWT Provider ## Note When you configure authentication using a custom JWT provider, you can choose the signing algorithm. This tutorial uses the HS256 signing algorithm. If you select the RS256 signing algorithm, you can also choose one of the following signing keys: * JSON web key ([JWK](https://datatracker.ietf.org/doc/html/rfc7517)) or JSON web key set (JWKS) URL: Charts retrieves the key from the JWK or JWKS file at the specified URL. Charts then uses the key to validate the JSON web token. If there are multiple keys in the file, Charts tries each key until it finds a match.\n* PEM public key: Charts uses the specified public key to verify the JSON web token. 1 #### Go to the Authentication Settings view. 1. If Charts is not already displayed, clickCharts in the navigation bar.\n2. Click Embedding in the sidebar.\n3. Click the Authentication Settings tab. 2 #### From the Authentication providers section, click Add. 3 #### Provide the following values to configure Charts to validate the JWT for the tutorial. | Field             | Value                         |\n| ----------------- | ----------------------------- |\n| Name              | Enter charts-jwt-tutorial.    |\n| Provider          | Select Custom JSON Web Token. |\n| Signing Algorithm | Select HS256.                 |\n| Signing Key       | Enter topsecret.              | 4 #### Click Save. ### Create a Web App to Display your Chart If you already have an app in which to display your chart, you’re all set. If not, proceed with the remaining steps. MongoDB offers a pre-built sample that shows you how to use the Embedding SDK to authenticate an embedded chart using a JWT. Clone the [GitHub repository](https://github.com//mongodb-js/charts-embed-sdk/tree/master/examples/charts/authenticated-custom-jwt)and follow the instructions in the **Readme** file to begin using the app. You can customize it to use the chart you created earlier. ### Customize the Node.js App 1 #### In your application server code, generate and return a JWT. The implementation varies based on your authentication provider. ## Warning Generate JWTs server-side to protect your signing keys from exposure. The `app.js` file in the sample application uses a simple web service and the `jsonwebtoken` package to generate and return aJWT signed using the `HS256` algorithm when a user logs in to the application with these credentials: * User name: `admin`\n* Password: `password` ```js 1 const express = require(\"express\"); 2 const bodyParser = require(\"body-parser\"); 3 const cors = require(\"cors\"); 4 const jwt = require(\"jsonwebtoken\"); 5 const config = require(\"./config.js\"); 6 7 const app = express(); 8 const port = 8000; 9 10 // Configuring body parser middleware 11 app.use(bodyParser.urlencoded({ extended: false })); 12 app.use(bodyParser.json()); 13 app.use(cors()); 14 15 app.post(\"/login\", (req, res) => { 16   const loginDetails = req.body; 17   // mock a check against the database 18   let mockedUsername = \"admin\"; 19   let mockedPassword = \"password\"; 20 21   if ( 22     loginDetails && 23     loginDetails.username === mockedUsername && 24     loginDetails.password === mockedPassword 25   ) { 26     let token = jwt.sign({ username: loginDetails.username }, config.secret, { 27       expiresIn: \"24h\" // expires in 24 hours 28     }); 29     res.json({ bearerToken: token }); 30   } else { 31     res.status(401).send(false); 32   } 33 }); 34 35\n\n \n``` ## Note Your application must handle refreshing or issuing new tokens before they expire. In the sample application, the signing key `topsecret` is defined in a file in your application named `config.js`: ```js module.exports = {   secret: \"topsecret\" }; \n``` 2 #### Embed a chart.\n\n 3 #### Render the chart. Use the `render` method of your chart object to render it in your application. The following example shows an invocation of the `render`method in the `src/index.js` file in the sample application. ``` chart.render(document.getElementById(\"chart\")); \n``` 4 #### Deploy and test your application. Charts renders the chart if it can validate the token it received with the request to render the chart. If the token isn't valid, Charts doesn't render the chart and displays an error code. For more information on the Charts embedding error codes, see[Embedded Error Codes.](https://mongodb.com/docs/charts/embedded-chart-error-codes/#std-label-embedded-errors) ← [Embed a Chart Authenticated with Atlas App Services](https://mongodb.com/docs/charts/embed-chart-stitch-auth/ \"Previous Section\")[Embed an Unauthenticated Chart](https://mongodb.com/docs/charts/embed-chart-anon-auth/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/create-manage-charts-view/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Create and Manage Charts Views On this page * [Use Cases](#use-cases)\n* [Create a Charts View from a Collection](#create-a-charts-view-from-a-collection)\n* [Example Pipelines](#example-pipelines)\n* [Modify a Charts View's Pipeline](#modify-a-charts-view-s-pipeline)\n* [Disconnect a Charts View](#disconnect-a-charts-view)\n* [Delete a Charts View](#delete-a-charts-view) If you are the [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner), you can create and modify a charts view. A charts view is a data source that applies an[aggregation pipeline](https://www.mongodb.com/docs/manual/core/aggregation-pipeline/)to a collection to pre-process data before it is used forCharts. You can create multiple charts views from a single collection. After you create a charts view, you can select the charts view as a data source when you create a chart. ## Use Cases Pre-processing a data source with a pipeline is useful when your collection data is not optimized for data visualization. Pre-processing your data can help accomplish the following tasks: * Join data from multiple collections into a single data source using[$lookup](https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/#mongodb-pipeline-pipe.-lookup). [See example.](#std-label-join-data)\n* Hide fields which may contain sensitive data from Charts users using [$project](https://www.mongodb.com/docs/manual/reference/operator/aggregation/project/#mongodb-pipeline-pipe.-project). [See example.](#std-label-hide-data)\n* Convert data types, such as a string field to a date.[See example.](#std-label-convert-data-tye) ## Create a Charts View from a Collection 1 ### Connect your deployment. To learn more, see [Connect a Deployment to Charts.](https://mongodb.com/docs/charts/connect-disconnect-data-source/#std-label-connect-deployment) 2 ### Select a database and collection. 1. In the deployment's Data Access section, click the name of the database that contains the collection to use for the charts view. The collections list appears.\n2. Click the collection to use for the charts view.Charts also displays any existing charts views that use the collection. 3 ### Click Charts View next to the collection's information. Charts opens the Add Charts View modal. 4 ### Specify a Name for your charts view. 5 ### Add an aggregation pipeline. Your pipeline must be an array. Specify each stage of your pipeline as an object within the array. 6 ### (Optional) Click Test Pipeline. MongoDB Charts validates your pipeline. Charts reports any errors in your pipeline below the editor. If the pipeline is valid, Charts shows a sample document from the results or displays No documents returned. ## Tip For help creating your pipeline, you can utilize the[Aggregation Pipeline Builder](https://www.mongodb.com/docs/atlas/data-explorer/cloud-agg-pipeline/) in the Atlas Data Explorer. You can create your pipeline using the Atlas pipeline builder and paste it into the MongoDB Charts pipeline editor. 7 ### Click Save. After you save the charts view, it displays in theData Access section for the collection it uses. ## Example Pipelines ### Join Data from Two Collections The following example adds a pipeline to a data source pointing to the `sample_mflix.movies` collection from the[Sample Mflix Dataset](https://www.mongodb.com/docs/atlas/sample-data/sample-mflix/) provided byAtlas. The pipeline performs a [$lookup](https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/#mongodb-pipeline-pipe.-lookup) to join data from the `comments` collection based on `movie_id`. The result is a new field in this data source called `comments` containing data from a separate collection.\n\n ` ### Hide Sensitive Data The following example adds a pipeline to a data source pointing to the`sample_supplies.sales` collection from the[Sample Supply Store Dataset](https://www.mongodb.com/docs/atlas/sample-data/sample-supplies/)provided by Atlas. The pipeline hides the `customer.email` field, making that field unavailable to charts using this data source: ```js [   {     $project: { \"customer.email\": 0 }   } ] \n``` To learn more about the `$project` aggregation stage, see [$project.](https://www.mongodb.com/docs/manual/reference/operator/aggregation/project/#mongodb-pipeline-pipe.-project) ### Convert the Type of a Data Field The following example adds a pipeline to a data source containing a string field that we want to convert to a date. The pipeline adds a new field to the data source with the string field `saleDate` converted to a date field called `saleDateAsDate`: ```js [   {     $addFields: {       saleDateAsDate: { $toDate: '$saleDate' }     }   } ] \n``` ## Modify a Charts View's Pipeline 1 ### Connect your deployment. To learn more, see [Connect a Deployment to Charts.](https://mongodb.com/docs/charts/connect-disconnect-data-source/#std-label-connect-deployment) 2 ### Select the database and collection. 1. In the deployment's Data Access section, click the name of the database that contains the collection associated with the charts view.\n2. Click the name of the collection associated with the charts view. Charts displays information for all existing charts view that use the collection. 3 ### Click Manage next to the chart view's information. 4 ### Click Pipeline tab to edit the charts view's pipeline. ## Tip ### See also:  To learn about other settings on this page, see[Manage Data Sources.](https://mongodb.com/docs/charts/manage-data-sources/#std-label-charts-modify-data-source) 5 ### Edit the aggregation pipeline. 6 ### (Optiona) Click Test Pipeline. Charts reports any errors in your pipeline next to the editor. If the pipeline is valid, Charts shows a sample document from the results or displaysNo documents returned. 7 ### Click Save. Charts validates your pipeline when you save your changes. ## Disconnect a Charts View To disconnect a charts view, see[disconnect a data source.](https://mongodb.com/docs/charts/connect-disconnect-data-source/#std-label-disconnect-data-source) ## Delete a Charts View If you are the [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner), you can permanently delete a charts view. To delete a charts view: 1 ### Connect your deployment. To learn more, see [Connect a Deployment to Charts.](https://mongodb.com/docs/charts/connect-disconnect-data-source/#std-label-connect-deployment) 2 ### Select the database and collection. 1. In the deployment's Data Access section, click the name of the database that contains the collection associated with the charts view.\n2. Click the name of the collection associated with the charts view. Charts displays information for all existing charts views based upon the collection. 3 ### Click Manage next to the chart view's information. 4 ### Click the ellipsis () and click Delete. On the modal that appears: 1. Click Check for connected charts to learn whether any charts use the charts view as a data source.\n2. Click Delete. ← [Manage Deployments](https://mongodb.com/docs/charts/manage-deployment/ \"Previous Section\")[Build Charts](https://mongodb.com/docs/charts/build-charts/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/welcome-experience/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Getting Started Tutorial The Getting Started tutorial guides you through possible ways of beginning your use of MongoDB Charts. New Charts users or users who have not previously used dashboards in Charts are prompted to walk through the Getting Started tutorial. Refer to the following sections for information on the possible paths that the Getting Started tutorial offers: * [Connect Your Data Sources](#std-label-welcome-connect-data)\n* [Explore with Sample Data](#std-label-welcome-explore-data)\n* [Skip to Shared Data Sources or Dashboards](#std-label-welcome-skip-to-dashboards) ## Connect Your Data Sources Use the Connect Your Data path to connect your existingAtlas deployments to MongoDB Charts and visualize your data. ### Requirements & Limitations * You must have an existing Atlas deployment.  \nDeployments in MongoDB Charts reference Atlas deployments that contain valid Charts data sources, including:  \n   * All [clusters and serverless instances](https://www.mongodb.com/docs/atlascreate-database-deployment/) in your Atlasproject for which you have the[Project Data Access Read Only](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Data-Access-Read-Only) role or higher.  \n   * All [federated database instances](https://www.mongodb.com/docs/atlas/data-federation/) in your project, including[Online Archives.](https://www.mongodb.com/docs/atlas/online-archive/manage-online-archive/)  \nIf you do not have an existing Atlas deployment, you can[Explore Charts with Sample Data.](#std-label-welcome-explore-data)\n* You must have read access in your project role to connectCharts to your data. To learn more about Atlas project roles, see [Atlas Project Roles](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) ### Procedure Once you have selected Connect Your Data: 1 #### Select a cluster. Connect a deployment from your list of available deployments and click Next. 2 #### Select one or more collections to add as [Data Sources](https://mongodb.com/docs/charts/data-sources/#std-label-data-sources). A data source in MongoDB Charts references one of the following: * A [collection](https://www.mongodb.com/docs/manual/core/databases-and-collections/#std-label-collections) or database[view](https://www.mongodb.com/docs/manual/core/views/) in your MongoDB deployment.\n* A [charts view](https://mongodb.com/docs/charts/create-manage-charts-view/#std-label-data-sources-pipeline) that you create using a collection. You can use the fields in the data source to construct a chart. When you build a chart, you must specify the data source that the chart uses. 3 #### Charts directs you to the Data Sources page. From there, you can[add pipelines](https://mongodb.com/docs/charts/create-manage-charts-view/#std-label-data-sources-pipeline) and adjust[access permissions](https://mongodb.com/docs/charts/manage-data-sources/#std-label-permission-model) for your data sources. 4 #### You are free to explore [Dashboards](https://mongodb.com/docs/charts/dashboards/#std-label-dashboards) and [create charts](https://mongodb.com/docs/charts/build-charts/#std-label-build-charts). ## Explore with Sample Data MongoDB Charts provides a [Sample Dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-sample-dashboard) that uses movie data to show examples of possible charts you can create. You can also use the[sample data source](https://mongodb.com/docs/charts/data-sources/#std-label-charts-sample-data) to create your own charts on other dashboards. ### Procedure 1 #### Select the Explore with Sample Data option in the Getting Started tutorial. 2 #### MongoDB Charts redirects you to the Dashboards page where you will find the Sample Dashboard.\n\n ## Note If you remove the Sample Dashboard, you can add it back through the [Dashboards](https://mongodb.com/docs/charts/dashboards/#std-label-sample-dashboard) page. ## Skip to Shared Data Sources or Dashboards If you have already been granted access to data sources or dashboards prior to completing the Getting Started tutorial, you can bypass the tutorial and immediately begin viewing your shared data sources and dashboards. To exit the Getting Started tutorial and begin exploring your shared data sources and dashboards, clickSkip selection and view at the bottom of the tutorial view. ← [Launch MongoDB Charts](https://mongodb.com/docs/charts/launch-charts/ \"Previous Section\")[Tutorials](https://mongodb.com/docs/charts/tutorials/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/highlight-chart-elements/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Highlight Chart Elements On this page * [Prerequisites](#prerequisites)\n* [Syntax](#syntax)\n* [Chart Types](#chart-types) The Charts Embedding JavaScript SDK enables you to programmatically highlight specific elements and [clicked events](https://mongodb.com/docs/charts/handle-click-events/#std-label-handle-click-events) on embedded charts and charts within [embedded dashboards.](https://mongodb.com/docs/charts/embedding-dashboards/#std-label-embedding-dashboards) ## Prerequisites Before you begin, [install](https://mongodb.com/docs/charts/embedding-charts-sdk/#std-label-embedding-charts-sdk) version 2.1.0 or later of the Charts Embedding JavaScript SDK. ## Syntax The Charts Embedding JavaScript SDK method for enabling highlighting has the following syntax: `| charts.setHighlight(selectionFilter); |\n| ------------------------------------- | ` ## Note If you want to highlight charts within an embedded dashboard, first run the following method to retrieve a specific chart from the Dashboard instance: ```javascript dashboard.getChart('<chartID>'); \n``` The `setHighlight` method takes an MQL filter. You can provide the MQL filter directly to the`setHighlight` method as shown in the example below or through the[click event payload](https://mongodb.com/docs/charts/handle-click-events/#std-label-click-event-payload-selection-filter) `selectionFilter` to highlight specific elements and click events. ## Example ``` chart.setHighlight(   {     city: { $nin: ['New York', 'London', 'Paris'] }   } ) \n``` The `selectionFilter` must match on values used on the chart's category or series channel. The Charts Embedding JavaScript SDK also includes the `highlight`option for retrieving the highlight query: ```javascript const highlight = chart.getHighlight(); \n``` The `highlight` option takes a parameter of a Javascript object that represents an MQL filter. You can set the `highlight` option when you create a chart or after a chart renders. You can include the following query elements:\n\n ## Chart Types The following chart types support programmatic highlighting: * [Choropleth Chart](https://mongodb.com/docs/charts/chart-type-reference/choropleth/#std-label-choropleth-ref)\n* [Column and Bar Charts](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref)\n* [Data Table](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-data-table-ref)\n* [Donut Chart](https://mongodb.com/docs/charts/chart-type-reference/donut-chart/#std-label-donut-chart-ref)\n* [Line and Area Charts](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-line-area-chart-ref)\n* Non-geo [Heatmap](https://mongodb.com/docs/charts/chart-type-reference/heatmap/#std-label-heatmap-chart-ref) ← [Handle Click Events](https://mongodb.com/docs/charts/handle-click-events/ \"Previous Section\")[Embedding Tutorials](https://mongodb.com/docs/charts/embedding-tutorials/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/add-lookup-field/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Add a Lookup Field On this page * [Create a New Lookup Field](#create-a-new-lookup-field)\n* [Example](#example) Lookup fields allow you to create a chart that joins data from multiple collections in the same database. A lookup field brings in documents from a second collection whose values correspond to a field in your chart's main data source. Lookup fields are useful for leveraging parent/child and primary key/foreign key relationships between collections, or any situation in which a field in one collection references a field in another collection. Lookup fields use [$lookup](https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/) to retrieve matching documents from a remote collection. ## Create a New Lookup Field You can create a lookup field from any field in your chart's data source which is not an [embedded object](https://mongodb.com/docs/charts/rich-schema-support/#std-label-embedded-objects-arrays) and which contains matching data with a field in another collection. The remote collection must be: * An existing Charts data source.\n* Part of the same database as the local collection. ## Note You can also use the local collection as a lookup field source. To add a lookup field, mouse over an existing field and click on theellipsis (...) to the right of the field name. SelectLookup field from the dropdown menu. A modal window appears: ![Lookup field modal window](https://mongodb.com/docs/charts/images/charts/lookup-modal.png) Select the desired collection and field from the dropdown menus. The remote field must contain at least one document with data that matches the local field, or the lookup field will be empty. You have the option to either return all matching documents from the foreign collection or only the first matching document. Returning all matching documents is recommended for one-to-many relationships, such as parent/child and primary key relationships. Returning only the first document is recommended for one-to-one and many-to-one relationships, such as reference data codes. If you want to return only the first matching document, check theReturn only first matching document radio button. Charts suggests a name for the new field, but you can enter a name of your choosing if you prefer. Click Save to create the new field. The new field appears with a binoculars icon, indicating that it is a lookup field. ## Important Be sure that any field you use as a lookup field is appropriately[indexed](https://www.mongodb.com/docs/manual/indexes/). Lookup operations on an unindexed field in a large collection can cause significant performance issues or timeouts. To remove a lookup field from your field panel, mouse over the lookup field and click on the ellipsis (...) to the right of the field name. Select Remove field from the dropdown menu. ## Example The following example uses two data sources, one called `product_catalog`and one called `orders`. The `product_catalog` collection contains the following documents: `| { \"_id\" : 76234, \"item\" : \"21 inch monitor\" }           |\n| ------------------------------------------------------- |\n| { \"_id\" : 38921, \"item\" : \"USB C cable\" }               |\n| { \"_id\" : 21167, \"item\" : \"keyboard\" }                  |\n| { \"_id\" : 90252, \"item\" : \"60 GB external hard drive\" } | ` The `orders` collection contains the following documents: ``` { \"_id\" : 1, \"sku\": 38921, \"quantity\": 50 } { \"_id\" : 2, \"sku\": 21167, \"quantity\": 75 } { \"_id\" : 3, \"sku\": 76234, \"quantity\": 15 } { \"_id\" : 4, \"sku\": 21167, \"quantity\": 20 } \n``` Records in the `orders` collection use the `sku` field to reference the `_id` field in the `product_catalog` collection.\n\n The chart uses `product_catalog.item` as its X axis and `orders.quantity`as its Y axis. ![Lookup field example chart](https://mongodb.com/docs/charts/images/charts/lookup-chart.png) ← [Convert Field Data Types](https://mongodb.com/docs/charts/convert-field-data-types/ \"Previous Section\")[Run Aggregation Pipelines on Your Data](https://mongodb.com/docs/charts/aggregation-pipeline/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/embedded-dashboard-options/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embedded Dashboard Options On this page * [Configure Refresh and Data Caching Behavior](#configure-refresh-and-data-caching-behavior)\n* [Specify a Display Theme](#specify-a-display-theme)\n* [Customize Display Options](#customize-display-options)\n* [Refresh and Data Caching Behavior](#refresh-and-data-caching-behavior) You can customize the appearance and behavior of your embedded dashboards with a variety of options. Options are available to dashboards embedded with the [Embedding SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/#std-label-embedding-charts-sdk) and embedded within [iframes.](https://mongodb.com/docs/charts/embedding-dashboards-iframe/#std-label-embedding-dashboards-iframe) ## Note To embed dashboards, you must configure embedding options on your data sources. For instructions, see[Embed Dashboards in Your Web Application.](https://mongodb.com/docs/charts/embedding-dashboards/#std-label-embedding-dashboards) ## Refresh and Data Caching Behavior The following table describes how MongoDB Charts loads data from the cache when loading or refreshing the dashboard based on the`autoRefresh` and `maxDataAge` values.\n\n ← [Embed Dashboards with the Embedding SDK](https://mongodb.com/docs/charts/dashboards-embedding-sdk/ \"Previous Section\")[Filter Embedded Dashboards](https://mongodb.com/docs/charts/filter-embedded-dashboards/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/embed-charts-and-dashboards/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embed Charts and Dashboards As a dashboard [Author](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-permissions), you can embed your charts and dashboards in external websites or share them through links. You can embed the following charts or dashboards: * Embed a [chart or dashboard that doesn't require authentication](https://mongodb.com/docs/charts/embed-chart-anon-auth/#std-label-anon-embedding-charts) (unauthenticated), which anyone can view.\n* Embed a chart or dashboard that requires users to authenticate through an [Embedding Authentication Provider.](https://mongodb.com/docs/charts/configure-auth-providers/#std-label-configure-auth-providers) You can control embedded [charts](https://mongodb.com/docs/charts/embedding-charts/#std-label-embedding-charts) and[dashboards](https://mongodb.com/docs/charts/embedding-dashboards/#std-label-embedding-dashboards) programmatically with the [Embedding SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/#std-label-embedding-charts-sdk), or use static HTML with a [charts iframe](https://mongodb.com/docs/charts/embedding-charts-iframe/#std-label-embedding-charts-iframe) or a[dashboards iframe.](https://mongodb.com/docs/charts/embedding-dashboards-iframe/#std-label-embedding-dashboards-iframe) Charts offers a Getting Started UI to help you learn how to embed charts and dashboards with an iFrame or Javascript SDK. To learn more, see [Get Started with Embedding.](https://mongodb.com/docs/charts/get-started-embedding/#std-label-get-started-embedding) To learn how to embed charts and dashboards in a web application, see the [Embedding Tutorials.](https://mongodb.com/docs/charts/embedding-tutorials/#std-label-embedding-tutorials)",
  "https://www.mongodb.com/docs/charts/build-charts/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Build Charts On this page * [Create a Chart](#create-a-chart)\n* [Learn More](#learn-more) Charts provide visual representations of the data in your[data source](https://mongodb.com/docs/charts/data-sources/). A chart maps to a _single_data source, and can display correlations between several fields in the data. Charts reside inside [dashboards](https://mongodb.com/docs/charts/dashboards/). You must create a [dashboard](https://mongodb.com/docs/charts/dashboards/) before you can begin building charts. For a complete list of available chart types and how to build specific charts, refer to the [Chart Types](https://mongodb.com/docs/charts/chart-types/#std-label-chart-type-reference) page. ## Create a Chart 1 ### Select a dashboard for your chart. From the Dashboards page, select the dashboard where you wish to add a new chart. For instructions on setting up a dashboard, see [Dashboards.](https://mongodb.com/docs/charts/dashboards/) 2 ### Click the Add Chart button. 3 ### Choose your chart's data source. In the Select Data Source modal that appears: 1. Select a tab:  \n   * The Suggested tab shows suggestions based on the data sources you use in this dashboard.  \n   * The Project tab shows all of your connected deployments. Click on a deployment to expand it and show its data sources. You can search for a collection to narrow the results.  \n   * The Sample tab shows the sample data source and a preview of its data.\n2. Click the name of the deployment that contains the data source.\n3. Click the name of the database that contains the data source. The database's data sources appear.  \nYou can click on a data source's name to view a preview of its data. ## Note A data source won't display on the Select Data Source modal unless it is connected toCharts. Only a [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner) can [connect](https://mongodb.com/docs/charts/connect-disconnect-data-source/#std-label-connect-data-source) and[disconnect](https://mongodb.com/docs/charts/connect-disconnect-data-source/#std-label-disconnect-data-source) data sources. All data sources in the project connect to Charts by default. 1. Click Select on the data source. If you close the Select Data Source modal, you can reopen it using the button under Data Source on the top left of the chart builder. The button says Select if you have not selected a data source, or it says the name of the currently selected data source. 4 ### Choose your chart type. In the Chart Type dropdown, select the type for this chart. ## Note ### Info Each chart type provides different visualization options for the fields in your data, reflected by various_encoding channels_. These channels dictate how your data is visualized and enable powerful[aggregations](https://www.mongodb.com/docs/manual/reference/operator/aggregation/) for your data. For details on the different encoding channel types, refer to the [Encoding Channels](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels)page. 5 ### Add fields to your chart. Drag fields from the Fields section to the desired[encoding channels](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) below theChart Type dropdown. The fields listed correspond to the fields in your data source. You can search for a specific field in your data source by using the Filter search bar at the top of the Fields section. ## Tip ### See also:  For details on how MongoDB Charts handles embedded objects and embedded arrays in fields, see the[Embedded Objects and Arrays](https://mongodb.com/docs/charts/rich-schema-support/#std-label-embedded-objects-arrays)page. 6 ### Title your chart. Give your chart a title by hovering over theEnter a title for your chart text clicking thePencil Icon. Click the check mark to save your title. 7 ### Save your chart. Once you are satisfied with your chart, clickSave Changes. This saves your chart to your dashboard and redirects you to the dashboard view. ## Learn More [Understand Encoding Channels](https://mongodb.com/docs/charts/encoding-channels/)\n\n [Create a Multi-Series Chart](https://mongodb.com/docs/charts/multi-series-charts/) Visualize multiple data series in a single chart. [Visualize Embedded Objects and Arrays](https://mongodb.com/docs/charts/rich-schema-support/) Use a wide variety of built-in methods for handling embedded objects and arrays. [Reshape Your Data](https://mongodb.com/docs/charts/reshape-data/) Reshape and pre-process your data for greater flexibility over available fields. [Filter Chart Results](https://mongodb.com/docs/charts/filter-chart-results/) Filter your chart based on criteria you choose. [Bin, Sort, and Limit Your Data](https://mongodb.com/docs/charts/bin-data/) Bin, sort, and limit data in your chart. [Customize Charts](https://mongodb.com/docs/charts/customize-charts/) Customize aspects of your chart such as color, axis labels, and number formatting. [View and Export Chart Data](https://mongodb.com/docs/charts/view-export-chart-data/) View and export the data backing your chart in either CSV or JSON format. [Chart Building Reference](https://mongodb.com/docs/charts/build-charts-reference/) Supplemental reference material for building charts. ← [Create and Manage Charts Views](https://mongodb.com/docs/charts/create-manage-charts-view/ \"Previous Section\")[Understand Encoding Channels](https://mongodb.com/docs/charts/encoding-channels/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/embedding-dashboards-iframe/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embed Dashboards with an iframe On this page * [Prerequisites](#prerequisites)\n* [Procedure](#procedure)\n* [Select a dashboard.](#select-a-dashboard)\n* [Select Embed.](#select-embed)\n* [Enable external sharing on the data source.](#enable-external-sharing-on-the-data-source)\n* [Select the Unauthenticated tab in the dialog window.](#select-the-unauthenticated-tab-in-the-dialog-window)\n* [Toggle Enable unauthenticated access to On.](#toggle-enable-unauthenticated-access-to-on)\n* [(_Optional_) Specify filterable fields for your dashboard.](#optional-specify-filterable-fields-for-your-dashboard)\n* [Select the panel labeled Iframe.](#select-the-panel-labeled-iframe)\n* [Set options.](#set-options)\n* [Copy the iframe embedding code.](#copy-the-iframe-embedding-code)\n* [(Optional) Set additional options.](#optional-set-additional-options) You can embed a dashboard into a web application with an iframe and specify settings such as height, width, refresh interval, and display theme. You can embed only dashboards that don't require authentication (unauthenticated) within an iframe. ## Prerequisites * You must be a dashboard [Author](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-permissions) to enable embedding for a dashboard.\n* [Create a New Dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-create-new-dashboard) ## Procedure 1 ### Select a dashboard. From your dashboard page, select the dashboard to embed. 2 ### Select Embed. From the dashboard, click  at the top-right of the dashboard to access its embedding information. SelectEmbed from the dropdown menu. 3 ### Enable external sharing on the data source. If you have already enabled external sharing on the data source that this dashboard uses, skip this step. If you haven't yet enabled embedding on the data source, you can do so now. Click theConfigure link. 4 ### Select the Unauthenticated tab in the dialog window. 5 ### Toggle Enable unauthenticated access to On. 6 ### (_Optional_) Specify filterable fields for your dashboard. Specify the fields on which dashboard viewers can filter data. By default, no fields are specified, meaning the dashboard cannot be filtered until you explicitly allow at least one field. Alternatively, you can specify all the fields in your dashboard by selecting Allow all fields in the data source used in this dashboard. To learn more about filterable fields, see[Specify Filterable Fields.](https://mongodb.com/docs/charts/filter-embedded-charts/#std-label-specify-filter-fields) 7 ### Select the panel labeled Iframe. Selecting the Iframe panel reveals the iframe embedding code and allows you to set refresh and display theme options. 8 ### Set options. 1. Specify the maximum age of data to load from the cache when loading or refreshing the embedded dashboard.\n2. Specify whether the embedded dashboard automatically refreshes.\n3. Select the Light or Dark display theme for your embedded dashboard.\n4. Specify whether to fix the width of the charts within the dashboard or to scale the width of the charts to fit the embedded dashboard.\n5. Specify whether to fix the height of the charts within the dashboard or to scale the height of the charts to fit the embedded dashboard.\n6. Specify whether to display the title and description on the embedded dashboard. 9 ### Copy the iframe embedding code. The iframe embedding code contains your dashboard's base URL and dasboard ID, as well as any options you have set. 10 ### (Optional) Set additional options. You can edit the iframe code manually to set several other dashboard options, including height, width, and border radius. To learn more, see [Embedded Dashboard Options.](https://mongodb.com/docs/charts/embedded-dashboard-options/#std-label-embedded-dashboard-options) After your iframe code is ready with any options you've set, you can place it in a web page to display your dashboard.\n\n",
  "https://www.mongodb.com/docs/charts/chart-types/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Chart Types On this page * [Column and Bar Charts](#column-and-bar-charts)\n* [Line and Area Charts](#line-and-area-charts)\n* [Combo Charts](#combo-charts)\n* [Grid Charts](#grid-charts)\n* [Heatmaps](#heatmaps)\n* [Scatter Charts](#scatter-charts)\n* [Circular Charts](#circular-charts)\n* [Donut Charts](#donut-charts)\n* [Gauge Charts](#gauge-charts)\n* [Text Charts](#text-charts)\n* [Data Tables](#data-tables)\n* [Number Charts](#number-charts)\n* [Word Clouds](#word-clouds)\n* [Top Item Charts](#top-item-charts)\n* [Geospatial Charts](#geospatial-charts)\n* [Maximum Document Limit](#maximum-document-limit) ## Column and Bar Charts [Column and Bar Charts](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref) provide high-level overviews of data trends by comparing values within a specific category. ![Stacked bar example](https://mongodb.com/docs/charts/images/charts/stacked-bar-chart-reference-small.png) ## Line and Area Charts [Line and Area Charts](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-line-area-chart-ref) display information as a series of data points connected by straight line segments. ![Discrete area example](https://mongodb.com/docs/charts/images/charts/discrete-area-small.png) ## Combo Charts [Combo Charts](https://mongodb.com/docs/charts/chart-type-reference/combo-charts/#std-label-combo-chart-ref) offer a combined column and line view. ![Combo chart example](https://mongodb.com/docs/charts/images/charts/combo-chart.png) ## Grid Charts ### Heatmaps [Heatmaps](https://mongodb.com/docs/charts/chart-type-reference/heatmap/#std-label-heatmap-chart-ref) represent aggregated data in a tabular format as a range of colors. ![Heatmap example](https://mongodb.com/docs/charts/images/charts/heatmap-small.png) ### Scatter Charts [Scatter Charts](https://mongodb.com/docs/charts/chart-type-reference/scatter-chart/#std-label-scatter-chart-ref) plot data with individual data points placed along the X and Y axes. ![Scatter chart example](https://mongodb.com/docs/charts/images/charts/scatter-chart-small.png) ## Circular Charts ### Donut Charts [Donut Charts](https://mongodb.com/docs/charts/chart-type-reference/donut-chart/#std-label-donut-chart-ref) display data in a series of segments of a circle, with larger segments representing larger data values. The entire circle represents the sum of all data values, and each segment indicates the proportion of each category in the data to the total. ![Donut Chart Example](https://mongodb.com/docs/charts/images/charts/donut-simple-example.png) ### Gauge Charts [Gauge Charts](https://mongodb.com/docs/charts/chart-type-reference/gauge-chart/#std-label-gauge-chart-ref) display data as a percentage of a semicircle, with customizable minimum and maximum values. Optionally you may also specify a Target value, which renders as a heavy line within the gauge's range. ![Gauge Chart Example](https://mongodb.com/docs/charts/images/charts/gauge-chart.png) ## Text Charts ### Data Tables [Data Tables](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-data-table-ref) represent data in a tabular view, similar to a [spreadsheet](https://en.wikipedia.org/wiki/Spreadsheet). ![Data table example](https://mongodb.com/docs/charts/images/charts/data-table-small.png) ### Number Charts\n\n ![Number chart example](https://mongodb.com/docs/charts/images/charts/number-chart-small.png) ### Word Clouds [Word Clouds](https://mongodb.com/docs/charts/chart-type-reference/word-cloud/#std-label-word-cloud-ref) visually represent text data, highlighting prevalent keywords and phrases. ![Word cloud example](https://mongodb.com/docs/charts/images/charts/word-cloud-small.png) ### Top Item Charts [Top Item Charts](https://mongodb.com/docs/charts/chart-type-reference/top-item/#std-label-top-item-ref) display information from the document with the greatest or smallest value for a specified field. ![Example Top Item Chart](https://mongodb.com/docs/charts/images/charts/top-item-small.png) ## Geospatial Charts [Geospatial Charts](https://mongodb.com/docs/charts/chart-type-reference/geo-spatial/#std-label-geo-spatial) combine geospatial data with other forms of data to create map-based charts. ![Geospatial heatmap example](https://mongodb.com/docs/charts/images/charts/geo-type-heatmap.png) ## Maximum Document Limit The maximum number of documents a chart displays data from differs based on the chart type. The limit is enforced on the server using a`$limit` stage at the end of the pipeline. Once this maximum limit is reached, there is no way to determine which documents from the total data set comprise the chart data. A warning message is displayed that specifies the query response limit for that particular chart type.",
  "https://www.mongodb.com/docs/charts/embed-chart-google-auth/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embed a Chart Authenticated with Google Sign-In On this page * [Prerequisites](#prerequisites)\n* [Procedures](#procedures)\n* [Enable Authenticated Embedding for your Chart](#enable-authenticated-embedding-for-your-chart)\n* [Create a Google Client ID](#create-a-google-client-id)\n* [Configure Charts to use Google Sign-In](#configure-charts-short-to-use-google-sign-in)\n* [Create a Web App to Display Your Chart](#create-a-web-app-to-display-your-chart)\n* [Customize the Node.js App](#customize-the-node.js-app) This tutorial shows you how to configure a sample application to render an embedded, Google-authenticated chart on a web page. Users must sign in with their Google account to view the chart. If a user doesn't sign in with Google, Charts doesn't render the authenticated chart view. ## Prerequisites * You must be an Atlas [Project Owner](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) to configure embedding authentication providers for your linkedCharts instance.\n* [Create a New Dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-create-new-dashboard)\n* [Create a Chart](https://mongodb.com/docs/charts/build-charts/#std-label-create-new-chart) ## Procedures ### Enable Authenticated Embedding for your Chart Enable authenticated embedding to generate a Charts Base URL and a chart ID. You will need your Charts Base URL and chart ID to display your chart on a web page. 1 #### Select a dashboard. From your dashboard page, select the dashboard containing the chart you wish to embed. 2 #### Select a chart. From the dashboard, click  at the top-right of the chart to access its embedding information. SelectEmbed chart from the dropdown menu. ## Note If a chart is on a dashboard that has embedding enabled, theEmbed Chart option is automatically enabled. Therefore, you can't select the Embed chart option for charts within dashboards that have embedding enabled. 3 #### Enable external sharing on the data source If you have already enabled external sharing on the data source this chart uses, skip this step. If you haven't yet enabled embedding on the data source, you can do so now. Click theConfigure external sharing link. 4 #### Select the Authenticated tab in the dialog window. ![Embed authenticated chart](https://mongodb.com/docs/charts/images/charts/embed-chart-authenticated.png) 5 #### Toggle Enable authenticated access to On. 6 #### (_Optional_) Specify a filter function to inject per user. You can specify a function to inject a MongoDB filter document for each user who views the chart. This is useful for rendering user-specific charts. ## Example The following filter function only renders data where the`ownerId` field of a document matches the value of the Embedding Authentication Provider's token's `sub` field: `| function getFilter(context) {          |\n| -------------------------------------- |\n| return { ownerId: context.token.sub }; |\n| }                                      | ` ## Tip ### See also:  To learn more about injecting filters per user, see[Inject User-Specific Filters.](https://mongodb.com/docs/charts/filter-embedded-charts/#std-label-inject-filter-per-user) 7 #### (_Optional_) Specify filterable fields for your chart. Specify the fields on which chart viewers can filter data. By default, no fields are specified, meaning the chart cannot be filtered until you explicitly allow at least one field. ## Tip ### See also:  To learn more about filterable fields, see[Specify Filterable Fields.](https://mongodb.com/docs/charts/filter-embedded-charts/#std-label-specify-filter-fields) 8 #### Copy the Chart Base URL and Chart ID Use these values in your application code together with your Embedded Authentication Provider attributes to embed your chart. ### Create a Google Client ID\n\n To create a Google API Console project, see [Integrating Google Sign-In into your web app.](https://developers.google.com/identity/sign-in/web/sign-in) ### Configure Charts to use Google Sign-In 1 #### Go to the Authentication Settings view. 1. If Charts is not already displayed, clickCharts in the navigation bar.\n2. Click Embedding in the sidebar.\n3. Click the Authentication Settings tab. 2 #### From the Authentication providers section, click Add. 3 #### In the Name field, enter a descriptive name for the provider. 4 #### From the Provider list, select Google. 5 #### In the Google Client Id field, enter the Google Client ID you created. 6 #### Click Save. ## Create a Web App to Display Your Chart MongoDB offers a pre-built example app that shows how to use the Embedding SDK to display an embedded chart using Google authentication. To run the example app, clone the[MongoDB Charts Embedding Example - Google Authentication](https://github.com//mongodb-js/charts-embed-sdk/tree/master/examples/charts/authenticated-google)repository from GitHub and follow the instructions in the `Readme`file to begin using the app. You can run the app as-is with a sample chart, or you can customize it to use an existing chart. ### Customize the Node.js App All the lines you need to edit are marked with a comment containing`~REPLACE~`. 1 #### Open the file `index.html` in a text editor. The file `index.html` is located in the root directory of the`authenticated-google` project. 2 #### Enter your Google Client ID Replace the existing Google Client ID with your Google Client ID. ``` <!-- Optional: ~REPLACE~ content with your Google Client ID --> <meta   name=\"google-signin-client_id\"   content=\"012345678910-ifpoccch8js9srh9obfdn683h1iss2ag.apps.googleusercontent.com\" /> \n``` Your Google Client ID is visible after creating a Google API Console project. See [Create a Google Client ID](#std-label-create-google-id) for instructions on creating a Google Client ID. 3 #### Enter your Charts Base URL Replace the existing `baseUrl` with the Base URL of the chart you want to display. ```javascript const sdk = new ChartsEmbedSDK({   baseUrl: \"https://charts-dev.mongodb.com/charts-exampleproject-fjotk\", // Optional: ~REPLACE~ with your Charts URL   getUserToken: () => id_token }); \n``` Your Charts Base URL is visible in the embedding options modal window. See [Embedding SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/) for detailed instructions on enabling embedding for a chart. 4 #### Enter your chart ID Replace the existing `chartId` with the ID of the chart you want to display. ```javascript const chart = sdk.createChart({   chartId: \"example-acaf-4af0-8320-5099bfebd1bd\", // Optional: ~REPLACE~ with your Chart ID }); \n``` Your chart ID is visible in the embedding options modal window. See[Embedding SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/) for detailed instructions on enabling embedding for a chart. After you finish customizing the app, it's ready to run. ← [Embedding Tutorials](https://mongodb.com/docs/charts/embedding-tutorials/ \"Previous Section\")[Embed a Chart Authenticated with Atlas App Services](https://mongodb.com/docs/charts/embed-chart-stitch-auth/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/admin-settings/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Data Transfer The Data Transfer link appears in the sidebar of theCharts UI. ## Note Only users with the [Project Owner](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) role can see this section. ## Monthly Data Transfer The Data Tranfer by Month panel of theData Transfer page shows the data usage of your MongoDB Chartsinstance over the current month. The panel displays the following metrics: | Metric              | Description                                                                                                                                                                                                 |\n| ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Total Data Transfer | Total data usage in GB that your Charts instance has consumed over the current month.                                                                                                                       |\n| Free Tier Remaining | Amount of data in GB that your Charts instance can still use this month for free. If you exceed this amount, yourCharts instance starts[incurring charges.](https://mongodb.com/docs/charts/pricing/#std-label-charts-billing) |\n| Days Remaining      | Days remaining in the current month, after which the usage cycle resets.                                                                                                                                    | MongoDB provides a free `1 GB` of data transfers per month. Nearly all Charts use cases should fall within this `1 GB` free tier. For more information on MongoDB Charts pricing and sample pricing scenarios, see [Charts on Atlas Pricing.](https://mongodb.com/docs/charts/pricing/#std-label-charts-billing)",
  "https://www.mongodb.com/docs/charts/embedding-tutorials/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embedding Tutorials On this page * [Authenticated Embedding](#authenticated-embedding)\n* [Unauthenticated Embedding](#unauthenticated-embedding) The following tutorials walk you through several scenarios for embedding charts in your application. ## Authenticated Embedding The following tutorials provide detailed instructions for embedding authenticated charts in a web application with the MongoDB Charts Embedding SDK. Authenticated embedded charts are viewable only by users who first provide login credentials through an SSO provider. [Embed a Chart Authenticated with Google Sign-In](https://mongodb.com/docs/charts/embed-chart-google-auth/#std-label-google-sdk-tutorial) Configure Charts to use Google Sign-In to authorize the rendering of embedded charts in an application. [Embed a Chart Authenticated with Atlas App Services](https://mongodb.com/docs/charts/embed-chart-stitch-auth/#std-label-stitch-sdk-tutorial) Configure Charts to use [Atlas App Services](https://www.mongodb.com/docs/atlas/app-services/) to authorize the rendering of embedded charts in an application. [Embed an Authenticated Chart using a Custom JWT Provider](https://mongodb.com/docs/charts/embed-chart-jwt-auth/#std-label-jwt-sdk-tutorial) Configure Charts to validate JWT to authorize the rendering of embedded charts in an application. ## Unauthenticated Embedding [Embed an Unauthenticated Chart](https://mongodb.com/docs/charts/embed-chart-anon-auth/#std-label-anon-embedding-charts) Configure Charts to allow unrestricted access to an embedded chart. ← [Highlight Chart Elements](https://mongodb.com/docs/charts/highlight-chart-elements/ \"Previous Section\")[Embed a Chart Authenticated with Google Sign-In](https://mongodb.com/docs/charts/embed-chart-google-auth/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/view-export-chart-data/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # View and Export Chart Data On this page * [View Source Documents](#view-source-documents)\n* [View Aggregation Pipeline](#view-aggregation-pipeline)\n* [Get Chart Data](#get-chart-data) While editing a chart in the Chart Builder, you can view underlying data from the Ellipses (...) dropdown menu. Access to underlying data is intended to help you build meaningful charts as well as export that data for use with third-party tools. ![The ellipse menu is in the top-right corner of the charts editor.](https://mongodb.com/docs/charts/images/charts/editor-ellipse-menu.png) ## View Source Documents Once you have selected a [data source](https://mongodb.com/docs/charts/data-sources/) for your chart, you can view up to 20 sample documents from that data source by clicking View Source Documents from the menu. ## Note If you want to explore your data source beyond 20 sample documents, you can use [Compass](https://www.mongodb.com/docs/compass/current/) or the[Atlas Data Explorer.](https://www.mongodb.com/docs/atlas/data-explorer/) The sample documents are intended for reference to help you build a chart. The documents do not reflect any groupings or projections applied to an existing chart (i.e. any Encode panel options in the Chart Builder). The documents are produced with a query on your data source that considers: * [Pipelines applied to the data source](https://mongodb.com/docs/charts/create-manage-charts-view/#std-label-data-sources-pipeline)\n* [Queries](https://mongodb.com/docs/charts/filter-chart-results/#std-label-query-bar) or[pipelines specified in the Chart Builder](https://mongodb.com/docs/charts/aggregation-pipeline/#std-label-charts-agg-pipeline)\n* Filters applied in the [Filter Tab](https://mongodb.com/docs/charts/filter-chart-results/#std-label-filter-tab) The Source Documents modal displays the number of documents from your data source that match your query conditions, although only 20 of the documents are viewable as samples. ![The View Source Documents modal displays the document count just above the document samples.](https://mongodb.com/docs/charts/images/charts/source-document-count.png) ## View Aggregation Pipeline After you have configured a valid chart, you can view the source query for the chart. MongoDB Charts uses a special type of query to create a chart called an[aggregation pipeline](https://www.mongodb.com/docs/manual/core/aggregation-pipeline/). To view the query, click View Aggregation Pipeline from the menu. This aggregation pipeline includes the stages that both the data source and the Chart Builder apply. ## Important Some Chart Builder [configuration options](https://mongodb.com/docs/charts/customize-charts/)don't apply aggregation stages. These options are applied to a chart's visualization and do not affect the underlying data. To use the pipeline in other MongoDB tools, such as[Compass](https://www.mongodb.com/docs/compass/current/) or the [mongo shell](https://www.mongodb.com/docs/manual/mongo/), click next to the pipeline in theAggregation Pipeline modal. To learn how Charts constructs aggregation pipelines, see [Backing Aggregation Pipeline.](https://mongodb.com/docs/charts/aggregation-pipeline-generation/#std-label-aggregation-pipeline-generation) ## Get Chart Data After you have configured a valid chart, you can view and export the underlying data as a table. To view the chart data, clickGet Chart Data from the  menu. Each row in the table represents a data point. ## Important ### Data Table Differs from Chart Visualization Some configuration options you see reflected on a chart visualization are not applied to the data table. TheChart Data table displays underlying data retrieved with your full aggregation pipeline, and not all Chart Builder configuration options apply aggregation stages. Review your data to verify its contents. If you want to analyze your underlying data with a third-party tool, you can download your data from the Chart Data modal. To download your data, click Download - CSV orDownload - JSON. ## Note\n\n ![Viewing chart data will display a table of the values used to create a chart. It also allows for downloading a CSV or JSON representation of that table.](https://mongodb.com/docs/charts/images/charts/editor-chart-data.png) ← [Fields](https://mongodb.com/docs/charts/customize-charts/field-level-options/ \"Previous Section\")[Chart Building Reference](https://mongodb.com/docs/charts/build-charts-reference/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/dashboard-refresh/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Refresh Dashboard Data On this page * [Configure Refresh Settings](#configure-refresh-settings)\n* [Manually Refresh Data](#manually-refresh-data)\n* [Refresh Behavior](#refresh-behavior) MongoDB Charts automatically refreshes chart data once it becomes out of date with the backing data source. You can also manually refresh dashboard data at any time. ## Configure Refresh Settings Charts on a dashboard automatically refresh once their data becomes out of date. You can specify how stale your charts' data can be before it is refreshed. This is known as your staleness tolerance. The default behavior is to refresh when data is one hour stale. To configure refresh settings for a dashboard: 1. Select a dashboard from the Dashboards page.\n2. Click the Refresh icon at the top of the dashboard.\n3. Click Refresh Settings from the dropdown.\n4. Select your data staleness tolerance from the dropdown.Charts supports the following staleness tolerances:  \n   * An increment of time between 1 minute and 30 days, or  \n   * Infinity. If you select infinity, your chart doesn't automatically refresh.\n5. Click Save. ## Manually Refresh Data You can manually refresh an entire dashboard or individual charts to render your charts with the latest data. In a manual refresh, MongoDB Chartsreloads data even if the current data is within your specified staleness tolerance. MongoDB Charts users of all [permission levels](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-permissions)can refresh dashboard data. ### Manually Refresh an Entire Dashboard Manually refresh an entire dashboard to requery all of the data sources backing your charts and render your charts with the latest data. To manually refresh dashboard data: 1. Select a dashboard from the Dashboards page.\n2. Click the Refresh icon.\n3. Select Force Refresh from the dropdown. ### Manually Refresh a Single Chart Manually refresh a single chart to only requery the data source for that chart and render that chart with the latest data. To manually refresh a single chart: 1. Select a dashboard from the Dashboards page.\n2. Mouse over the upper right corner of the desired chart and click the ellipsis button ().\n3. Click Force Refresh. ## Refresh Behavior\n\n ### Caching Behavior When MongoDB Charts loads charts on a dashboard, it does not consistently query the data source for each chart. Instead, MongoDB Charts queries the data sources when the dashboard first loads, and that data is cached on both the client and server. ## Note The data stored in the cache is encrypted with a key specific to your MongoDB Charts tenant. * When a dashboard refreshes automatically:  \n   * If a chart's data is within the staleness tolerance period,Charts doesn't refresh the chart's data.  \n   * If a chart's data is outside of the staleness tolerance period,Charts returns the latest data from the server cache. If the server cache contains stale data, Charts queries the data source for the latest data, refreshes the chart, and updates the data cached on both the client and server.  \n   ## Note  \n   If your chart is embedded using[Atlas App Services Authentication](https://mongodb.com/docs/charts/embed-chart-stitch-auth/#std-label-stitch-sdk-tutorial)andFetch data using Atlas App Services is enabled in your[Authentication Provider Settings](https://mongodb.com/docs/charts/configure-auth-providers/#std-label-configure-auth-providers), your chart does not load data from the server cache. Your `maxDataAge` embedding parameter still dictates how often the chart refreshes, but the data source is always queried on each render.\n* When you manually refresh an entire dashboard, Charts updates all chart data by querying the data source for the latest data even if the chart data is within the specified staleness tolerance period. ### Refresh Failures When an automatic or manual refresh fails: * MongoDB Charts displays the most recently rendered chart, including all of the chart's interactive elements.\n* If MongoDB Charts has never successfully rendered the chart, the following message is displayed: `Unable to load data`.\n* MongoDB Charts displays the following error message at the bottom of the chart: `Last refresh failed`.\n* If you're viewing the chart on an Authenticated Dashboard, click the failed link in the error message to view additional error details.  \n## Note  \nThis link is not available when you view charts on a dashboard from a public link or embedded using an iframe or the SDK.\n* The error message includes a Refresh link if the chart is rendered on an authenticated dashboard or embedded using an iframe or the SDK. Click the link to manually refresh the chart. ← [Dashboard Permissions and Sharing](https://mongodb.com/docs/charts/dashboard-permissions/ \"Previous Section\")[Filter Dashboards by Field Values](https://mongodb.com/docs/charts/dashboard-filtering/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/third-party-licenses/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Third-Party Licenses On this page * [Choropleth Licenses](#choropleth-licenses) MongoDB Charts uses third-party resources that may be distributed under licenses different than the MongoDB software. ## Choropleth Licenses The following lists the third-party TopoJSON shape schemes used inCharts for choropleths.\n\n ← [MongoDB Charts Release Notes](https://mongodb.com/docs/charts/release-notes/ \"Previous Section\")",
  "https://www.mongodb.com/docs/charts/customize-charts/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Customize Charts MongoDB Charts provides various options to customize the format and display of your visualizations. You can use these options to display your data in the proper format, show data labels to relay precise measurements, and many other formatting techniques. The documentation for specific chart types covers additional customization options pretaining to those charts. See the [Chart Types](https://mongodb.com/docs/charts/chart-types/#std-label-chart-type-reference) page to learn more about customizing a particular chart type. MongoDB Charts provides the following types of customization options: General [General Customization Options](https://mongodb.com/docs/charts/customize-charts/general-customization/#std-label-general-customization) modify high-level aspects of the chart such as its colors and data labels. These options affect the overall look and format of your data. Axes [Value Axis Options](https://mongodb.com/docs/charts/customize-charts/value-axis-options/#std-label-value-axis-options) modify the chart's axes, such as their scale and their minimum and maximum values. These options only affect the chart's axes, and not howCharts formats data points in the visualization. Fields [Field-Level Options](https://mongodb.com/docs/charts/customize-charts/field-level-options/#std-label-field-level-options) modify howCharts renders data fields, such as specific formatting for numbers and dates. These options apply to individual data fields[encoded](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) into your chart, rather than the chart as a whole. The field-level customization options available depend on the data type and[channel type](https://mongodb.com/docs/charts/encoding-channels/#std-label-charts-channel-type-table) of the field you are customizing. Conditional Formatting [Conditional Formatting Options](https://mongodb.com/docs/charts/customize-charts/conditional-formatting/#std-label-conditional-formatting) modify the styling of chart values that meet conditions you define. These options affect the look of your chart dynamically: if a value changes to meet or stop meeting your conditions, its styling updates to reflect that. To customize a chart, click the Customize tab above the[encoding channels](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) in the[Chart Builder:](https://mongodb.com/docs/charts/build-charts/) ![Charts Customization Tab](https://mongodb.com/docs/charts/images/charts/customization-tab.png) Your chart automatically updates as you modify customization options. ← [Bin, Sort, and Limit Your Data](https://mongodb.com/docs/charts/bin-data/ \"Previous Section\")[General](https://mongodb.com/docs/charts/customize-charts/general-customization/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/manage-data-sources/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Manage Data Sources On this page * [Access Data Source Settings](#access-data-source-settings)\n* [Modify Data Source Permissions](#modify-data-source-permissions)\n* [Modify Data Source Pipeline](#modify-data-source-pipeline)\n* [Disconnect a Data Source](#disconnect-a-data-source) If you have the [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner) role, you can modify data source settings from the data source's settings page. ## Access Data Source Settings To access the data source's settings page: 1 ### In the left navigation menu, click Data Sources. The Data Sources page displays. 2 ### In the Deployment dropdown, select the deployment that contains your data source. Deployments in MongoDB Charts reference Atlas deployments that contain valid Charts data sources, including: * All [clusters and serverless instances](https://www.mongodb.com/docs/atlascreate-database-deployment/) in your Atlasproject for which you have the[Project Data Access Read Only](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Data-Access-Read-Only) role or higher.\n* All [federated database instances](https://www.mongodb.com/docs/atlas/data-federation/) in your project, including[Online Archives.](https://www.mongodb.com/docs/atlas/online-archive/manage-online-archive/) After you select a deployment, the following information displays:\n\n 3 ### In the Data Access section, under Deployment, click the name of the database that contains the data source. A list of the database's data sources appears. 4 ### Click Manage next to the data source's information. The data source's details page displays. 5 ### Check the connection status and connect the data source. If the data source connection status is Connected, you already connected this data source to MongoDB Charts. TheData Access section displays. If the data source connection status is Disconnected: 1. Click the connect icon  next to the data source connection status.\n2. Click Reconnect on the modal that displays. The data source connects and the Data Accesssection displays. ## Modify Data Source Permissions If you have the [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner) role, you can control who can see charts that use the data source. ### Enable Organization-Wide Sharing for a Data Source Organization-wide sharing grants users in your organization, including users who are not members of your project, permission to view data in a deployment that is used for dashboards shared with your organization. You can enable organization-wide sharing[for an entire deployment](https://mongodb.com/docs/charts/manage-deployment/#std-label-org-sharing-deployment) or[for a specific data source.](#std-label-org-sharing-data-source) To enable organization-wide sharing for a specific data source: 1 #### Access the data source's settings page. To learn more, see [Access Data Source Settings.](#std-label-access-data-source-settings-page) 2 #### Turn on organization-wide sharing. In the Organization subsection of theData Access section, toggleAll users in the organization can view data in this data source to ON. ### Enable External Sharing for a Data Source External sharing grants others the ability to either: * [Embed charts](https://mongodb.com/docs/charts/embedding-charts/#std-label-embedding-charts) to use the data source in external web pages.\n* View charts when given a link to that chart. To share a chart externally via embed or link, you must enable external sharing both on the data source and the individual chart. Charts disables external sharing by default for all data sources. To enable external sharing for a data source: 1 #### Access the data source's settings page. To learn more, see [Access Data Source Settings.](#std-label-access-data-source-settings-page) 2 #### Turn on external sharing. In the External Users subsection of the Data Access section, toggleExternal users can view data in this data source toON. 3 #### Select your authentication settings. Select either: 1. Allow authenticated external data access.  \nAny chart that uses this data source requires authentication through anSSO provider for external viewing. Authentication providers add an extra layer of security to your data.  \nTo learn how to configure an embedding authentication provider, see [Configure Embedding Authentication Providers.](https://mongodb.com/docs/charts/configure-auth-providers/)  \nUsers can view charts that use this data source on dashboards when they are logged into MongoDB Charts. They can't view the charts on dashboards shared via a public link.\n2. Allow unauthenticated external data access.  \nAny chart that uses this data source does **not** require authentication for external viewing. Though less difficult to implement, allowing unauthenticated external data access is less secure. Use this option only for charts that display non-sensitive data.  \n   * Embedded charts can render using both unauthenticated and authenticated requests.  \n   * Any charts using this data source can be viewed on[dashboards shared via a link.](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-access-link) After you enable external sharing for a data source, you can enable external sharing for individual charts that use that data source. ## Note If you turn off external sharing for a data source, all charts which use that data source stop rendering immediately. ### Disable External Sharing for a Data Source To disable external sharing for a data source: 1 #### Access the data source's settings page. To learn more, see [Access Data Source Settings.](#std-label-access-data-source-settings-page) 2 #### Turn off external sharing. In the External Users subsection of the Data Access section, toggleExternal users can view data in this data source toOFF. ### Modify Role Permissions for Data Sources\n\n ## Note Charts automatically assigns project roles to users based on their Atlas [user role.](https://www.mongodb.com/docs/atlas/reference/user-roles/) To modify permissions for a project role: 1 #### Access the data source's settings page. To learn more, see [Access Data Source Settings.](#std-label-access-data-source-settings-page) 2 #### Select or clear boxes in the project role's row. For each project role, you can select more than one option: * Can view charts with data in this data source.\n* Can create charts with data in this data source. Hover over a project role to learn which [Atlas user roles](https://www.mongodb.com/docs/atlas/reference/user-roles/) correspond to that project role. To prevent users with a project role from creating and viewing charts for the data source, clear both boxes in the project role's row. To allow all users to create and view charts for the data source, select all of the boxes in all of the rows. ### Modify Data Source Read Preference To modify a data source's read preference, you must modify the read preference for its deployment. To learn more, see[Manage Deployments.](https://mongodb.com/docs/charts/manage-deployment/#std-label-manage-deployment) ## Modify Data Source Pipeline You can modify a chart view's pipeline by[accessing the data source's settings page](#std-label-access-data-source-settings-page) and clicking thePipeline tab. To learn more, see[Create and Manage Charts Views.](https://mongodb.com/docs/charts/create-manage-charts-view/#std-label-data-sources-pipeline) The Pipeline is dimmed for collections. To create a pipeline based on a collection, [create a charts view.](https://mongodb.com/docs/charts/create-manage-charts-view/#std-label-charts-views) ## Disconnect a Data Source To disconnect a data source, see [Connect or Disconnect Data Sources and Deployments](https://mongodb.com/docs/charts/connect-disconnect-data-source/#std-label-connect-disconnect-data-source). To delete a charts view, see [Create and Manage Charts Views](https://mongodb.com/docs/charts/create-manage-charts-view/#std-label-charts-views). You can't delete a collection from your data sources. ← [Connect or Disconnect Data Sources and Deployments](https://mongodb.com/docs/charts/connect-disconnect-data-source/ \"Previous Section\")[Manage Deployments](https://mongodb.com/docs/charts/manage-deployment/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/multi-series-charts/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Create a Multi-Series Chart On this page * [Map Multiple Fields to a Single Axis](#map-multiple-fields-to-a-single-axis)\n* [Series Field](#series-field)\n* [count by value Aggregation Option](#count-by-value-aggregation-option) MongoDB Charts supports building _multi-series_ charts, which split your chart data into groups, or _series_, to compare additional fields within your schema. There are two ways to create multi-series charts: * [Map Multiple Fields to a Single Axis](#std-label-multiple-field-mappings). Use this method to compare or aggregate upon multiple non-categorical fields in the schema.\n* [Using the Series field in the chart builder](#std-label-charts-series-encoding). Use this method when grouping data based on a discrete list of items. ## Map Multiple Fields to a Single Axis MongoDB Charts allows you to map multiple [Aggregation](https://mongodb.com/docs/charts/encoding-channels/#std-label-building-charts-aggregation) or Value fields to a single chart property (such as the X Axis or Y Axis). This allows you to compare additional fields by creating new series based on the encoding channels added. After dragging a field to an aggregationor value [encoding channel](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels), an additional optional encoding channel of the same type appears below the one which was just added, allowing you to add additional series to your visualization. This process repeats with each channel you add, so you can map as many fields as desired to your chart. ## Example The following multi-series column chart shows average movie ratings by genre from two different sources: [IMDB](https://www.imdb.com/)and [Rotten Tomatoes](https://www.rottentomatoes.com/): ![Movie Ratings Multiseries Chart](https://mongodb.com/docs/charts/images/charts/multi-series-agg.png) There are two aggregation encoding channels on the chart's Y Axis, one for each of the site's rating fields. By selecting the mean aggregation option, the chart aggregates these two fields using the[$avg](https://www.mongodb.com/docs/manual/reference/operator/aggregation/avg/) operator to provide a comparison of the average of two fields in the same column. ## Tip Use multiple field mappings to create a multi-series chart when the values being compared in the visualization come from two or more separate fields in the schema. In the example above, there is one series for Rotten Tomato ratings and one series for IMDB ratings. Since these are separate fields within the schema, adding multiple aggregation encoding channels to map the data is the best choice to compare the fields. ## Tip ### See also:  If you omit the Category field, you can create a single-series chart based on your selected aggregated fields. To learn more, see [Create a Single-Series Chart with Multiple Aggregations.](https://mongodb.com/docs/charts/single-series-categories/#std-label-single-series-multiple-fields) ### Use a Secondary Y Axis If you map multiple Aggregation or Value fields to the Y axis, you can plot one set of values on a [secondary Y axis.](https://mongodb.com/docs/charts/customize-charts/value-axis-options/#std-label-secondary-y-axis) ## Series Field You can also create multi-series charts by using the Seriesfield in the chart builder. The Series field differs fromaggregation [encoding channels](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels)because it instead utilizes a Category [encoding channel](https://mongodb.com/docs/charts/encoding-channels/#std-label-charts-channel-type-table) instead of aValue or Aggregation channel. When creating a series using the Category encoding channel, each unique value from the data field becomes a series in the visualization. ## Example The following multi-series column chart shows order data from an office supply store, showing the most common items sold by store location: ![Supply Store Series Encoding Channel Example](https://mongodb.com/docs/charts/images/charts/series-encoding-channel-example.png) By using the `item.name` in the Series encoding channel, a series within each location group is added for each item name. ## Tip\n\n ## `count by value` Aggregation Option When you drag a field onto an [aggregation channel](https://mongodb.com/docs/charts/encoding-channels/#std-label-building-charts-aggregation), you can select the count by value option to create a multi-series chart based on the values contained in the field. A series is automatically created for each unique value from the field, with the chart value representing the number of occurrences. Your chart can display multiple count by value fields with additional aggregations, as long as there is no field mapped to the category axis. ## Note If any field in the X or Y axis channel has thecount by value aggregation selected, the Serieschannel is disabled, and any field previously mapped to that channel is removed. ## Example The following multi-series bar chart uses the `sample_airbnb`database. It groups listings by the number of beds and the number of bedrooms they have, showing the total number of listings for each value. ![Count by value multi-series chart example](https://mongodb.com/docs/charts/images/charts/count-by-value-sample-chart2.png) You can also create a multi-series chart with a count by value aggregation channel and a category axis channel. ## Example The following multi-series stacked column chart uses the `sample_airbnb`database. It shows all the different suburbs of Turkey with the number of each distinct type of property located there. ![Count by value multi-series chart example](https://mongodb.com/docs/charts/images/charts/count-by-value-sample-chart.png) The `address.suburb` field populates the X axis, while the stacked columns represent all the different property types and the total number of each. ← [Create a Single-Series Chart with Multiple Aggregations](https://mongodb.com/docs/charts/single-series-categories/ \"Previous Section\")[Visualize Embedded Objects and Arrays](https://mongodb.com/docs/charts/rich-schema-support/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/embedded-chart-error-codes/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embedded Error Codes If an embedded chart or dashboard fails to render, Chartsdisplays an error code in place of the rendered chart or dashboard. Refer to the following table for more information on each error code. ## Note To see a more detailed description of your error, you can open your browser's development console.\n\n ← [Manage Embedded Items](https://mongodb.com/docs/charts/manage-embedded-items/ \"Previous Section\")[Data Transfer](https://mongodb.com/docs/charts/admin-settings/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/interact-with-charts/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Interact with Charts on a Dashboard On this page * [Interactive Filtering](#interactive-filtering)\n* [Filter a Dashboard by a Chart Element](#filter-a-dashboard-by-a-chart-element)\n* [Remove an Interactive Filter](#remove-an-interactive-filter)\n* [Click to Emphasize Series](#click-to-emphasize-series)\n* [Emphasize a Single Series](#emphasize-a-single-series)\n* [Emphasize Multiple Data Series](#emphasize-multiple-data-series)\n* [Emphasize All Data Series](#emphasize-all-data-series)\n* [Zoom and Pan a Scatter Chart](#zoom-and-pan-a-scatter-chart)\n* [Zoom](#zoom)\n* [Pan](#pan)\n* [View the Percentage of the Whole](#view-the-percentage-of-the-whole)\n* [Show Data for an Item](#show-data-for-an-item)\n* [Interact with Data in the Table View](#interact-with-data-in-the-table-view)\n* [Interact with Data in the JSON View](#interact-with-data-in-the-json-view)\n* [Copy and Save a Chart as an Image](#copy-and-save-a-chart-as-an-image)\n* [Copy](#copy)\n* [Save](#save) ## Interactive Filtering On a dashboard, you can interact with a chart that hasFilter or highlight enabled to filter data in other charts. With Filter or highlight enabled, clicking a chart element with an associated [dashboard filter](https://mongodb.com/docs/charts/dashboard-filtering/#std-label-dashboard-filtering)temporarily reconfigures the scope of that dashboard filter to a single chart series, category or field value. Interactive filtering is useful for getting quick insights into subcategories of your data on dashboards with multiple charts. Interactive filtering is temporary; you can revert to your original dashboard filter at any time. To enable Filter or highlight: 1. Hover over the chart on the dashboard to reveal four buttons in the upper right corner of the chart.\n2. Click the second button for Interactive Filters.\n3. Select Filter or highlight from the dropdown. ## Note By default, charts set Interactive Filters toFilter or highlight. Setting a chart's Interactive Filters toFilter reflects dashboard filters and temporary interactive filters. That chart cannot be highlighted to set interactive filters on other charts. Setting a chart's Interactive Filters toIgnore ignores any dashboard or interactive filters. ## Example On the MongoDB Charts [Sample Dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-sample-dashboard), movie statistics are displayed across a range of chart types. If you create a dashboard filter for `rated`, the content rating of a movie (e.g. G, PG-13, R), you can click a specific movie rating on any one of your charts to temporarily reconfigure the scope of your dashboard filter to that specific movie rating. If you click on the PG-13 rating section of theMovie Ratings donut chart, the rest of the charts on your dashboard update to display only data for PG-13 movies. When you [clear the selection](#std-label-remove-interactive-filter) of the PG-13 rating, your dashboard reverts to displaying charts according to the `rated` dashboard filter. The chart upon which you set an interactive filter is highlighted,_not_ filtered. It [emphasizes](#std-label-emphasize-series) the element for which your other charts are filtered. You can[clear the selection](#std-label-remove-interactive-filter) from that highlighted chart. A highlighted chart displays a status icon in the bottom left corner. Filtered charts display the  icon. You can apply an interactive filter to all chart types _except_:\n\n ### Filter a Dashboard by a Chart Element To interactively filter a dashboard based on a chart element, you must first create a dashboard filter for the field that you want to filter by. ## Example To filter the [Sample Dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-sample-dashboard) to only English movies, you must have a dashboard filter on the `language`field. To filter a dashboard by a chart element, you can click on: * a legend entry\n* a chart category, such as an X or Y series label\n* a chart mark, such as a bar segment or line chart node When you hover over a chart element with an associated dashboard filter, your cursor displays the  icon. If a chart element isn't filterable, your cursor displays the icon. You might be able to add a dashboard filter for that value's field to make that element filterable. ## Note If the dashboard filter card associated with a clicked element is disabled, Charts enables it temporarily until you[clear the selection](#std-label-remove-interactive-filter) of that element. When you filter a dashboard by a chart element, Charts disables all other dashboard filters until you clear the selection. ### Remove an Interactive Filter You can remove an interactive dashboard filter by: * Clicking the whitespace on the highlighted chart upon which you set the interactive filter, or\n* Changing the associated dashboard filter. ## Click to Emphasize Series Chart viewers can interact with a chart to highlight one or more series in a multi-series chart. This behavior applies to any chart type that displays a discrete color legend, except for geospatial charts. The following chart types support emphasizing specific series: * [Grouped and Stacked Bar/Column charts](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref)\n* [Discrete and Continuous Line/Area charts](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-line-area-chart-ref)\n* [Scatter charts](https://mongodb.com/docs/charts/chart-type-reference/scatter-chart/#std-label-scatter-chart-ref)\n* [Donut charts](https://mongodb.com/docs/charts/chart-type-reference/donut-chart/#std-label-donut-chart-ref) ### Emphasize a Single Series When you click a label in the chart legend at the top right,Charts emphasizes the selected data series by reducing the opacity of all the other data series. ![Emphasize single data series](https://mongodb.com/docs/charts/images/charts/emphasize-single-series.png) ### Emphasize Multiple Data Series To emphasize multiple data series at once, **shift-click** as many labels in the legend as you would like. Charts adjusts the opacity of the selected data series from de-emphasized to emphasized. ![Emphasize multiple data series](https://mongodb.com/docs/charts/images/charts/multiple-series-emphasized.png) ### Emphasize All Data Series To restore the opacity of all data series to the default emphasized state, click the chart background. ![Emphasize all data series](https://mongodb.com/docs/charts/images/charts/all-series-emphasized.png) ## Zoom and Pan a Scatter Chart Chart viewers can zoom and pan a non-geospatial [scatter chart.](https://mongodb.com/docs/charts/chart-type-reference/scatter-chart/#std-label-scatter-chart-ref) ### Zoom To zoom in or out of the chart, scroll up or down. Chartsautomatically adjusts the axis bounds to change the viewport, while keeping the plotted points the same size. The resulting view after zooming and panning is only visible to you and does not persist page reloads. To revert back to the original axis bounds, reload the chart page. ### Pan To pan the chart, click and drag over the chart surface. ## View the Percentage of the Whole Chart viewers can hover on each data point to view the value as a percentage of the whole. The part to whole relationship appears in the tooltip for the data point. This behavior applies to any chart type that displays a part of the whole relationship, specifically:\n\n For stacked charts, the whole value is the total value of the current category. For donut charts, the whole value is the total value of the entire chart. ## Show Data for an Item Chart viewers with Author or Owner [data source permissions](https://mongodb.com/docs/charts/manage-data-sources/#std-label-permission-model) can view the original data that contributed to a chart element. Chart viewers can show data for the following chart elements: * Bar or mark on a chart plot area\n* Chart legend entry\n* Category axis label\n* Table row\n* Choropleth shape ## Note Some charts ([Geospatial Scatter Chart](https://mongodb.com/docs/charts/chart-type-reference/geospatial-scatter/#std-label-geospatial-scatter-type), [Gauge Chart](https://mongodb.com/docs/charts/chart-type-reference/gauge-chart/#std-label-gauge-chart-ref), and [Top Item Chart](https://mongodb.com/docs/charts/chart-type-reference/top-item/#std-label-top-item-ref)) do not support this functionality. To view the original data that contributed to a chart element, right-click on the chart element and selectShow data for this item from the context menu. You can switch between the Table view and JSON view. ### Interact with Data in the Table View Chart viewers with Author or Owner [data source permissions](https://mongodb.com/docs/charts/manage-data-sources/#std-label-permission-model) can resize and swap columns in the table view. Changes do not persist. Each column has a maximum width. ## Note The dialog for the Table view displays a maximum of 1,000 rows. ### Interact with Data in the JSON View Chart viewers with Author or Owner [data source permissions](https://mongodb.com/docs/charts/manage-data-sources/#std-label-permission-model) can expand or collapse sections of the JSONdocument. ## Note The dialog for the JSON view displays a maximum of 100 documents only. ## Copy and Save a Chart as an Image Chart viewers can copy and save a chart as an image. The image file includes the chart contents, including the title of the chart. ### Copy To copy a chart to your clipboard as an image, right-click on the chart and select Copy chart as image from the context menu. You can copy any chart type except data tables. ## Note The copy feature is not available on Firefox. ### Save To save a chart as a PNG file, right-click on the chart and selectSave chart as image from the context menu. ← [Filter Dashboards by Field Values](https://mongodb.com/docs/charts/dashboard-filtering/ \"Previous Section\")[Data Sources](https://mongodb.com/docs/charts/data-sources/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/embedding-dashboards/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embed Dashboards in Your Web Application As a dashboard [Author](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-permissions), you can embed your charts and dashboards in external websites or share them through links. You can embed the following charts or dashboards: * Embed a [chart or dashboard that doesn't require authentication](https://mongodb.com/docs/charts/embed-chart-anon-auth/#std-label-anon-embedding-charts) (unauthenticated), which anyone can view.\n* Embed a chart or dashboard that requires users to authenticate through an [Embedding Authentication Provider.](https://mongodb.com/docs/charts/configure-auth-providers/#std-label-configure-auth-providers) You can control embedded dashboards programmatically with the [Embedding SDK](https://mongodb.com/docs/charts/dashboards-embedding-sdk/#std-label-dashboards-embedding-sdk), or use static HTML with an [iframe.](https://mongodb.com/docs/charts/embedding-dashboards-iframe/#std-label-embedding-dashboards-iframe) To learn how to embed dashboards in a web application, see the[Embedding Tutorials.](https://mongodb.com/docs/charts/embedding-tutorials/#std-label-embedding-tutorials) To learn more, see [Embedded Dashboard Options.](https://mongodb.com/docs/charts/embedded-dashboard-options/#std-label-embedded-dashboard-options)",
  "https://www.mongodb.com/docs/charts/dashboard-filtering/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Filter Dashboards by Field Values On this page * [Dashboard Filters](#dashboard-filters)\n* [Example Scenario](#example-scenario)\n* [Filter Persistence Per Dashboard Viewer](#filter-persistence-per-dashboard-viewer)\n* [The Dashboard Filters Pane](#the-dashboard-filters-pane)\n* [Expand or Collapse Dashboard Filters](#expand-or-collapse-dashboard-filters)\n* [Manage Dashboard Filters](#manage-dashboard-filters)\n* [Add Dashboard Filters](#add-dashboard-filters)\n* [Edit Dashboard Filters](#edit-dashboard-filters)\n* [Delete Dashboard Filters](#delete-dashboard-filters)\n* [Disable Dashboard Filters for a Chart](#disable-dashboard-filters-for-a-chart)\n* [Use Dashboard Filters](#use-dashboard-filters)\n* [Filter Dashboards](#filter-dashboards)\n* [Revert Dashboard Filters to Default Values](#revert-dashboard-filters-to-default-values) ## Dashboard Filters Dashboard filters refine data across some or all of the charts in a dashboard. They allow you to view a common subset of data across the dashboard's charts. Dashboard `Authors` or `Owners` can: * Select the fields that all dashboard users can use to filter data.\n* Set initial default values for each filter.\n* Disable filtering for a specific chart. Disabling filtering exempts the chart from dashboard filters. All dashboard users can filter based on values they specify and save their own default filter values. ## Note Users who open a dashboard using a public link can't save their own default filter values. Charts reverts to the initial default filter values after refreshing the page or starting a new session. ![An image of a dashboard. The :guilabel:`Dashboard Filters`\npane is highlighted.](https://mongodb.com/docs/charts/images/charts/dashboard-filter-cards.png) If one or more dashboard filters affect the data a chart displays, an icon displays in the bottom left corner of that chart. Hover over the  icon for a list of the filtered fields impacting that chart. ## Note Dashboard `Authors` or `Owners` define filters using specific data sources and can [disable filtering on specific charts](#std-label-disable-filtering-on-chart). A single filter might not refine all charts if: * The dashboard contains charts mapped to data sources that the filter doesn't use.\n* A dashboard `Author` or `Owner` [disables filtering](#std-label-disable-filtering-on-chart) on some charts. ### Example Scenario A dashboard `Author` creates a dashboard with charts that contain sales data for all of a company's customers. The author creates a filter allowing dashboard viewers to select which region(s) to display data from. Members of a sales team use this filter to display customer data only for the region(s) that they cover. ## Tip You can use a prebuilt[sample dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-add-sample-dashboard)to experiment with dashboard filters. ### Filter Persistence Per Dashboard Viewer Charts persists the following states for each dashboard viewer across reloads and user sessions: * which filters are enabled or disabled\n* field values chosen to filter dashboards\n* whether the Dashboard Filters is expanded or collapsed. The changes that a dashboard viewer makes to filters don't affect otherCharts users. A viewer's saved filters are not affected when a dashboard `Author` or `Owner` modifies a filter's default values unless you [reset a filter.](#std-label-revert-dashboard-filters) ## Note Charts doesn't persist filter states or values for users who open a dashboard using a public link. Charts reverts to the initial default filter values after refreshing the page or starting a new session. ### The Dashboard Filters Pane The Dashboard Filters icon indicates the number of active filters. Click the icon to expand the Dashboard Filterspane.\n\n The Dashboard Filters pane displays a filter card for each field you can use to filter chart data. You can configure filter cards to use related fields from multiple data sources. When you update a field value, Charts updates dashboard charts to display data that matches the field values you provide from all configured data sources. In the following example, a dashboard `Author` creates filters on the `genres` and `year` fields from two sample movie datasets. The`Author` sets default values for these fields to only display Science Fiction and History movies released in or after 1968\\. Dashboard`Viewers` can provide their own values for the filterable fields to refine chart data based on their interests. ![An image of a dashboard. The :guilabel:`Edit Dashboard Filters`\npane is highlighted.](https://mongodb.com/docs/charts/images/charts/edit-dashboard-filters.png) To learn about filtering options for each field data type, see[Create Filters for Your Data.](https://mongodb.com/docs/charts/filter-chart-results/#std-label-filter-tab) ### Expand or Collapse Dashboard Filters You can expand or collapse dashboard filter cards by clickingShow or Hide on that card. Disabled filters are automatically collapsed. Enabled, collapsed filters are still applied to your charts. ## Manage Dashboard Filters Dashboard `Authors` and `Owners` can: * Add, edit, and delete dashboard filters.\n* Disable dashboard filters on specific charts. ### Add Dashboard Filters You can specify fields that any dashboard users can filter data with. When you create a dashboard filter, you select related fields from the data sources that a dashboard chart uses. You can add dashboard filters based on any number of data sources that a dashboard chart uses. Filter cards that use multiple data sources query each chart using the name of the field from the applicable data set. ## Example Chart `A` uses data set `A`. Chart `B` uses data set `B`. Field `A` in data set `A` and field `B` in data set `B`contain related information. You add both fields to a single filter card. When a filter affects chart `A`, the query for that chart uses field `A` only. When a filter affects chart `B`, the query for that chart uses field `B` only. To add a dashboard filter:\n\n ### Edit Dashboard Filters After you create a dashboard filter, you can: * Rename filter cards.\n* Enable or disable filter cards.\n* Add or remove fields.\n* Stack fields from other data sources.\n* Change the default field values. To edit a dashboard filter: 1. Expand the Dashboard Filters pane on the desired dashboard, then click Edit.\n2. Make the changes you want to each filter card.\n3. Click Apply Filters. ### Delete Dashboard Filters 1. Expand the Dashboard Filters pane on the desired dashboard, then click Edit.\n2. Hover of the filter card you want to delete, then click.\n3. Click Apply Filters. ### Disable Dashboard Filters for a Chart You can disable filtering for a specific chart if you create at least one dashboard filter on the chart's data source. If you disable filtering, the chart is exempted from all dashboard filters and highlighting. The default selection for all charts isFilter or highlight. To disable dashboard filtering for a chart: 1. Hover over the chart on the dashboard to reveal four buttons in the upper right corner of the chart.\n2. Click the second button (for Interactive Filters) and select Ignore from the dropdown. ## Note You can't change this setting until you've created at least one dashboard filter on the chart's data source. Once you ignore filtering, the Interactive Filtersbutton icon on the chart changes for all users. Users with the`Viewer` role can also see a tooltip if they click theInteractive Filters button, which says \"The dashboard owner has not enabled filtering for this chart.\" To reenable dashboard filtering for a chart: 1. Click the Interactive Filters button.\n2. Select Filter from the dropdown. ## Use Dashboard Filters Any user with at least the `Viewer` role on a dashboard _and_ the data source backing a field can view the filter card and provide their own values for the filter. ### Filter Dashboards You can filter the dashboard data based on the filterable fields that an `Author` or `Owner` configured. Charts filters data based on default field values if the dashboard `Author` or`Owner` configured them. Dashboard `Authors` or `Owners` can configure filter cards to use related fields from multiple data sources. You can provide your own field values to customize the data the charts display. To filter dashboard data based on filterable fields: 1. Expand the Dashboard Filters pane on the desired dashboard.\n2. If a filter card is disabled, click the toggle to enable it.\n3. Modify the values of the provided fields to update the dashboard's charts based on the filter values you provided.  \nThe filter card options are based on the data type of the field. To learn about filtering options for each field data type, see[Create Filters for Your Data.](https://mongodb.com/docs/charts/filter-chart-results/#std-label-filter-tab)  \n## Note  \nIf the filter card field is a `String` or `ObjectId`,Charts only samples field values from the first data source that was added to the filter.  \nUpdating the filter value refines chart data based on all data sources linked to the filter card. The charts refresh immediately after you modify a field value. ### Revert Dashboard Filters to Default Values To revert a filter card to its default values, click . ← [Refresh Dashboard Data](https://mongodb.com/docs/charts/dashboard-refresh/ \"Previous Section\")[Interact with Charts on a Dashboard](https://mongodb.com/docs/charts/interact-with-charts/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/encoding-channels/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Understand Encoding Channels On this page * [Encoding Channel Types](#encoding-channel-types)\n* [Aggregation](#aggregation)\n* [Geopoint Channel Type](#geopoint-channel-type)\n* [Add Missing Fields in the Chart Builder](#add-missing-fields-in-the-chart-builder) Encoding channels are the building blocks of your visualizations. These channels are the means by which Charts translates data from your [collection](https://www.mongodb.com/docs/manual/core/databases-and-collections/) to the visualization. The encoding process dictates how that data appears in the chart based on the [channel type](#std-label-charts-channel-type-table) selected. ## Encoding Channel Types Each encoding channel type provides different capabilities for processing and visualizing your data. Each channel type accepts distinct data types (e.g., `string` versus `numeric`data). The following table describes each encoding channel type inMongoDB Charts:\n\n Charts shows required encoding channels in green, and optional encoding channels in blue. ## Aggregation Dragging a field onto an aggregation [encoding channel](#std-label-encoding-channels) allows you to use an[aggregation pipeline operator](https://www.mongodb.com/docs/manual/reference/operator/aggregation/)on that field. For a list of the available aggregation pipeline operators inCharts, see [Aggregation Options.](https://mongodb.com/docs/charts/encoding-channels/aggregation-options/#std-label-aggregation-options) ## Example Donut charts provide two encoding channels: * A category channel called Label dictating which field to use when dividing the sections of the chart.\n* An aggregation channel called Arc dictating the aggregation operation to perform on the Labelcategory. The following donut chart examines NASA's Landslide data source to show the frequency of various landslide triggers by performing a[$count](https://www.mongodb.com/docs/manual/reference/operator/aggregation/count/) aggregation on the `trigger` field: ![Donut chart example](https://mongodb.com/docs/charts/images/charts/donut-chart-example-2.png) We see from the chart that the most common landslide trigger is`Downpour` followed by `Rain`. ## Geopoint Channel Type Geopoint channel types are used in the Coordinates channel on Geospatial Scatter and Geospatial Heatmapchart types. Geospatial charts visualize data that references specific geographic locations. MongoDB Charts automatically determines which fields in your dataset, if any, are [GeoJSON Points](https://www.mongodb.com/docs/manual/reference/geojson/).Charts signifies these fields with a icon. You can map these fields directly to a geopoint channel type by dragging them onto an appropriate geopoint channel type in the chart builder. Charts automatically determines the latitude and longitude values from the field and adds a point to the map for each document. ## Note You can also assign numeric coordinates or arrays to a geopoint channel type to specify latitude and longitude not stored as [GeoJSON Points](https://www.mongodb.com/docs/manual/reference/geojson/#point). For details on this process, see the following section. ### Assign Non-GeoJSON Fields to a Geopoint Channel Type This section describes how to use fields not stored as[GeoJSON Points](https://www.mongodb.com/docs/manual/reference/geojson/#point) in a geopoint channel type. * You can drag numeric fields onto a geopoint channel type to specify latitude and longitude. When you drag a numeric field onto a geopoint channel type, the channel updates to use the selected field as either Latitude or Longitude.Charts prompts you for a second numeric field to fill in the other value.\n* Alternatively, you can drag a numeric array onto a geopoint channel type to specify location coordinates from a field. When you use this approach, you can specify which indexes of the array to use for latitude and longitude components. For additional information and examples on Geospatial Scatter and Heatmap charts which utilize geopoint channel types, refer to the relevant chart type pages. ## Add Missing Fields in the Chart Builder MongoDB Charts populates the Fields pane of the chart builder by randomly sampling documents from the selected data source. As a result, Charts might not display all fields from documents in the data source if the field is not present on all documents. To add a specific field in the chart builder: 1. In the corner of the Fields pane, clickAdd Field.\n2. Make sure that the default Missed field type is selected.\n3. Enter the Field Name of the field you want to add.  \n## Note  \nYou can specify a nested field by using dot notation. For example, you can specify `address.neighborhood`.\n4. Click Save Field. ![To add a missed field, click \"Add Field\".](https://mongodb.com/docs/charts/images/charts/missed-field-add.png)\n\n ← [Build Charts](https://mongodb.com/docs/charts/build-charts/ \"Previous Section\")[Aggregation Options](https://mongodb.com/docs/charts/encoding-channels/aggregation-options/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/embed-chart-anon-auth/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embed an Unauthenticated Chart On this page * [Prerequisites](#prerequisites)\n* [Procedures](#procedures)\n* [Enable Unauthenticated Embedding for a Chart](#enable-unauthenticated-embedding-for-a-chart)\n* [Create a Web App to Display Your Chart](#create-a-web-app-to-display-your-chart)\n* [Customize the Node.js App](#customize-the-node.js-app) You can embed a chart in a web application and not require authentication to view chart data. To restrict access to your embedded chart, see the[authenticated embedded chart tutorials.](https://mongodb.com/docs/charts/embedding-tutorials/#std-label-authenticated-embedding-tutorials) ## Prerequisites * You must be a dashboard [Author](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-permissions) to enable unauthenticated embedding for a chart.\n* [Create a New Dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-create-new-dashboard)\n* [Create a Chart](https://mongodb.com/docs/charts/build-charts/#std-label-create-new-chart) ## Procedures ### Enable Unauthenticated Embedding for a Chart Enable unauthenticated embedding to generate a chart ID and ChartsBase URL. You will need your chart ID and Charts Base URL to display your chart on a web page. 1 #### Select a dashboard. From your dashboard page, select the dashboard containing the chart you wish to make embeddable. 2 #### Select a chart. From the dashboard, click  at the top-right of the chart to access its embedding information. SelectEmbed chart from the dropdown menu. ## Note If a chart is on a dashboard that has embedding enabled, theEmbed Chart option is automatically enabled. Therefore, you can't select the Embed chart option for charts within dashboards that have embedding enabled. 3 #### Enable external sharing on the data source. If you have already enabled external sharing on the data source this chart uses, skip this step. If you haven't yet enabled embedding on the data source, you can do so now. Click theConfigure external sharing link. 4 #### Select the Unauthenticated tab in the dialog window. ![Embed unauthenticated chart](https://mongodb.com/docs/charts/images/charts/embed-chart-anon.png) 5 #### Toggle Enable unauthenticated access to On. 6 #### (_Optional_) Specify filterable fields for your chart. Specify the fields on which chart viewers can filter data. By default, no fields are specified, meaning the chart cannot be filtered until you explicitly allow at least one field. Alternatively, you can specify all the fields in your chart by selecting Allow all fields in the data source used in this chart. To learn more about filterable fields, see[Specify Filterable Fields.](https://mongodb.com/docs/charts/filter-embedded-charts/#std-label-specify-filter-fields) 7 #### Select the Javascript SDK panel. 8 #### Copy the Charts Base URL and Chart ID. You'll need the Charts Base URl and Chart ID values in your web application code. ### Create a Web App to Display Your Chart If you already have an app in which to display your chart, you're ready to add an unauthenticated embedded chart. If not, proceed with the remaining steps to create a new app. MongoDB offers a pre-built example app in the[GitHub repository](https://github.com//mongodb-js/charts-embed-sdk/tree/master/examples/charts/unauthenticated) that shows how to use the Embedding SDK to display an unauthenticated embedded chart. Clone the [GitHub repository](https://github.com//mongodb-js/charts-embed-sdk/)to get all the example apps. Instructions for running the unauthenticated example are in the [Readme](https://github.com//mongodb-js/charts-embed-sdk/tree/master/examples/charts/unauthenticated) file in the `unauthenticated` directory. You can run the app as-is, or you can customize it to use a chart of your own. ### Customize the Node.js App All the lines you need to edit are marked with a comment containing`~REPLACE~`. 1\n\n The file `index.js` is located in the `src` directory. 2 #### Enter your Charts Base URL Replace the existing Charts Base URL with the Base URL of the chart you want to display. Your Charts Base URL is visible in the embedding options modal window. See[Embedding SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/) for detailed instructions on enabling embedding for a chart. `| const sdk = new ChartsEmbedSDK({                                                                                                            |\n| ------------------------------------------------------------------------------------------------------------------------------------------- |\n| baseUrl: \"https://charts.mongodb.com/charts-embedding-examples-wgffp\" // Optional: ~REPLACE~ with the Base URL from your Embed Chart dialog |\n| });                                                                                                                                         | ` You can also include the Embedding SDK with inline Javascript in an HTML page, as shown in the following code snippet: ```javascript <script src=\"https://s3.amazonaws.com/stitch-sdks/js/bundles/4.6.0/stitch.js\"></script> <script src=\"https://unpkg.com/@mongodb-js/charts-embed-dom\"></script> \n``` 3 #### Enter your chart ID Replace the existing chart ID with the ID of the chart you want to display. Your chart ID is visible in the embedding options modal window. See [Embedding SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/) for detailed instructions on enabling embedding for a chart. ```javascript const chart = sdk.createChart({   chartId: \"735cfa75-15b8-483a-bc2e-7c6659511c7c\", // Optional: ~REPLACE~ with the Chart ID from your Embed Chart dialog   height: \"700px\"   // Additional options go here }); \n``` After you finish customizing the app, it's ready to run. ← [Embed an Authenticated Chart using a Custom JWT Provider](https://mongodb.com/docs/charts/embed-chart-jwt-auth/ \"Previous Section\")[Manage Embedded Items](https://mongodb.com/docs/charts/manage-embedded-items/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/pricing/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Charts on Atlas Pricing On this page * [Overview](#overview)\n* [Sample Pricing Scenarios](#sample-pricing-scenarios) ## Overview Charts on Atlas is metered based on the volume of data transferred from the Charts web server to web browser clients. MongoDB provides each Charts instance with a free `1 GB` of data transfers per month. You can view your Charts instance's monthly data usage in the [Data Transfer](https://mongodb.com/docs/charts/admin-settings/#std-label-admin-usage) page. The free usage tier provides approximately 500,000 chart renders over a month. However, this number may vary based on the types of charts being rendered. A number chart or a bar chart with few bars typically consumes less data, while a scatter chart with many data points or a large table could consume more. Once the `1 GB` of free data usage has been consumed, MongoDB bills Charts data transfers at a fixed rate of **$1.00 per GB**. In addition, any applicable Atlas data transfer fees apply, as per the Data Transfer Fees section of the[Atlas Pricing](https://www.mongodb.com/cloud/atlas/pricing) page.Charts is hosted on AWS `us-east-1` region, and uses this region to calculate the fees. ## Sample Pricing Scenarios The following examples show the expected monthly charge for different usage scenarios. Consider: 1. A Charts instance with 5 users, each of whom refreshes a 10-chart [dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-dashboards) once an hour during business hours. This results in about 8,000 renders over the month, and easily falls within the `1 GB` free tier.\n2. A dashboard on a large-screen display with 20 charts set to refresh every 5 minutes, all 24 hours of the day. This results in about 300,000 renders over the month. Assuming these charts are not abnormally large, this scenario also falls entirely within the`1 GB` free tier.\n3. A _large_ chart embedded on a web page that receives 10,000 views per day, resulting in 300,000 renders over the month. This chart takes roughly five times as much data to render compared to a typical chart, and consumes `3 GB` of data over the month.  \nThe first `1 GB` is free, and the remaining `2 GB` is billed at $1.00 per GB, resulting in a total cost of $2.00 for the month. ← [Data Transfer](https://mongodb.com/docs/charts/admin-settings/ \"Previous Section\")[MongoDB Charts Release Notes](https://mongodb.com/docs/charts/release-notes/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # MongoDB Charts On this page * [Features](#features)\n* [Concepts](#concepts)\n* [Chart Types](#chart-types)\n* [Tutorials](#tutorials) MongoDB Charts is a tool to create visual representations of your MongoDB data. Data visualization is a key component to providing a clear understanding of your data, highlighting correlations between variables and making it easy to discern patterns and trends within your dataset. MongoDB Charts makes communicating your data a straightforward process by providing built-in tools to easily share and collaborate on visualizations. ![Sample Charts dashboard](https://mongodb.com/docs/charts/images/charts/sample-dashboard.png) click to enlarge ## Features Aggregation Functionality MongoDB Charts provides built-in[aggregation](https://www.mongodb.com/docs/manual/aggregation/) functionality. Aggregation allows you to process your collection data by a variety of metrics and perform calculations such as mean and standard deviation to provide further insight into your data. Seamless Integration with MongoDB Atlas Charts provides seamless integration with[MongoDB Atlas](https://www.mongodb.com/docs/atlas/). You can link MongoDB Charts toAtlas projects and quickly get started visualizing your Atlascluster data. Document Data Handling Charts handles document-based data, including[embedded objects and arrays](https://mongodb.com/docs/charts/rich-schema-support/#std-label-embedded-objects-arrays). Utilizing a nested data structure provides the flexibility to structure your data as it best fits for your application while still retaining powerful visualization capabilities. ## Concepts The following elements of MongoDB Charts provide the flow of data from its source to a visual representation:\n\n Dashboards are the cornerstone of MongoDB Charts as they are where you create and view your data visualizations. For details on how to create, manage, and share dashboards, see [Dashboards.](https://mongodb.com/docs/charts/dashboards/) ## Note Since a chart can only display data from a single collection, dashboards which combine multiple charts are not only useful, but necessary for visualizing data from multiple collections in a single view. This can lead to new insights into your data which may not be immediately apparent. ## Chart Types MongoDB Charts provides a wide variety of chart types to visualize your data including bar charts, scatter plots, geospatial charts, and more. For a complete list of available chart types, see[Chart Types.](https://mongodb.com/docs/charts/chart-types/#std-label-chart-type-reference) ## Tutorials After you [launch MongoDB Charts](https://mongodb.com/docs/charts/launch-charts/#std-label-launch-charts), the following tutorials will help you get started building visualizations with your data and explore key features offered by MongoDB Charts: [Movie Details Tutorial](https://mongodb.com/docs/charts/tutorial/movie-details/movie-details-tutorial-overview/#std-label-movie-details-tutorial-overview) Visualize a data set containing details on movies, such as cast, critic reviews, and release. [Order Data Tutorial](https://mongodb.com/docs/charts/tutorial/order-data/order-data-tutorial-overview/#std-label-order-data-tutorial-overview) Visualize a data set containing sales data from a mock office supply store. The tutorial illustrates how to visualize inventory, customer analytics, and total sales. [Launch MongoDB Charts](https://mongodb.com/docs/charts/launch-charts/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/handle-click-events/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Handle Click Events On this page * [Prerequisites](#prerequisites)\n* [Click Event Syntax](#click-event-syntax)\n* [Payload](#payload)\n* [event Element](#event-element)\n* [data Element](#data-element)\n* [selectionFilter Element](#selectionfilter-element)\n* [target Element](#target-element)\n* [Examples](#examples)\n* [Basic Handling of Click Events](#basic-handling-of-click-events)\n* [Interactive Filtering for Click Events](#interactive-filtering-for-click-events) ## Note Click Events in the [Charts Embedding SDK](https://github.com/mongodb-js/charts-embed-sdk)is available in version 2.1.0 and later. The Charts Embedding JavaScript SDK includes a click event handler that allows you to subscribe to click events. When you click on a particular element on your chart, the click event handler captures details of the element that you clicked. Use this feature to build interactive experiences similar to the following in your application: * Click on an element on a chart and open a pane with more details on the clicked element.\n* Create a filter for another chart. ## Prerequisites Before you begin, [install](https://mongodb.com/docs/charts/embedding-charts-sdk/#std-label-embedding-charts-sdk) version 2.1.0 or later of the Charts Embedding JavaScript SDK. ## Click Event Syntax The event handler takes an event type, `click`, and a callback function that contains information about the click event and the clicked element as a single [payload](#std-label-click-event-payload)object. The click event handler syntax looks similar to the following: `| chart.addEventListener(\"click\", callback); |\n| ------------------------------------------ | ` The event handler also allows you to define the mark roles for which you want to receive event information, thus eliminating the need to check the payload. The click event handler syntax for defining the mark roles to filter by looks similar to the following: ```shell const options = { includes: [{ roles: ['mark', 'axis-label'] }] }; chart.addEventListener(\"click\", callback, options); \n``` The click event handler must be added after the chart has finished rendering, as shown in the following example: ## Example ```shell chart.render(document.getElementById(\"chart\")).then(      () => chart.addEventListener('click',        (payload) => alert(JSON.stringify(payload)),        options)    ); \n``` ## Note If you specify the `options` parameter, the click event handler captures events only if the clicked mark's role matches one of the values specified in the parameter. If you omit this parameter, the click event handler captures all click events on the chart. ## Payload You can use the click event payload to construct a custom filter that you can apply on other charts in your application. The syntax of the payload object for the callback function looks similar to the following: ```shell chart.addEventListener(\"click\", (payload) => {     // handle events } \n``` The following example payload object shows the elements inside the payload: ## Example ```shell {   \"chartId\": \"xxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",   \"chartTitle\": \"This is my chart's title\",   \"chartDescription\": \"This is my chart's description\",   \"event\": { // information about the mouse event. For example:     \"type\": \"click\", // event type     \"altKey\": false, // modifier keys     \"ctrlKey\": false,     \"shiftKey\": false,     \"metaKey\": false,     \"offsetX\": 152, // element coordinates     \"offsetY\": 176,     \"clientX\": 172, // coordinates from application viewpoint     \"clientY\": 241,     \"pageX\": 172, // coordinates relative to the page     \"pageY\": 241,     \"screenX\": 172, // coordinates relative to screen     \"screenY\": 312   },   \"data\": { // information about the clicked chart element. For example:     \"y\": {\n\n       \"value\": \"Adventure\"     },     \"x\": {       \"label\": \"count ( _id )\",       \"value\": 659     },     \"color\": {       \"label\": \"year\",       \"value\": \"2000 - 2010\",       \"lowerBound\": 2000,       \"upperBound\": 2010     }   },   selectionFilter: {     // category data expressed as MQL filter query that     // interactive filters would output to filter other charts.     // For example:     genres: 'Adventure',     year: {       $gte: 2000,       $lt: 2010,     },   },   \"target\": { // information about the clicked target. For example:     \"type\": \"rect\", // type of mark, such as rect, line, etc.     \"role\": \"mark\", // role of mark, such as mark, legend, etc.     \"fill\": \"#8CB6F2\" // fill color of the mark   },   \"apiVersion\": 1 // API version of event payload } \n``` To learn more about the elements inside the payload object, see: * [event Element](#std-label-click-event-payload-event)\n* [data Element](#std-label-click-event-payload-data)\n* [selectionFilter Element](#std-label-click-event-payload-selection-filter)\n* [target Element](#std-label-click-event-payload-target) ### `event` Element The `event` element of the [payload](#std-label-click-event-payload)contains information about the mouse event including: * The type of mouse event, which must be `click`\n* The modifier keys used to trigger a click event such as `altKey`,`ctrlKey`, `shiftKey`, `metaKey`\n* The `X` and `Y` coordinates:  \n   * Relative to the canvas element of the chart  \n   * From the application viewpoint  \n   * Relative to the page  \n   * Relative to the screen ### `data` Element The `data` element of the [payload](#std-label-click-event-payload)contains information about the clicked chart element. For each encoded data field (`x`, `y`, `series`, `intensity`, `color`,`shape`, `size`, `label`, `arc`, `value`, `target`,`number`, `display`, `text`, `location`), the `data` element contains: * The channel `label`\n* The `value` of the clicked element\n* The lower bound for numeric or date binning only For [data tables](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-data-table-ref), the Charts Embedding JavaScript SDK click event handler captures click events for fields that represent the channel data for the clicked element: * `groups` field, which contains all Groups channels including label and value\n* `cell` field, which contains the column header label and value of the clicked cell For [geospatial charts](https://mongodb.com/docs/charts/chart-type-reference/geo-spatial/#std-label-geo-spatial), the Charts Embedding JavaScript SDK click event handler captures click events for the following elements: * For [choropleth charts](https://mongodb.com/docs/charts/chart-type-reference/choropleth/#std-label-choropleth-ref), the click event handler captures the fields that represent the channel data for the clicked element:  \n   * `lat` field, which contains latitude  \n   * `lng` field, which contains longitude  \n   * `location` field, which contains the field label and value of the clicked geospatial area\n* For [geospatial scatter charts](https://mongodb.com/docs/charts/chart-type-reference/geospatial-scatter/#std-label-scatter-ref), the click event handler captures the fields that represent the channel data for the clicked element:  \n   * `geopoint` field, which contains the field name, value in GeoJSON format, and the coordinates of the clicked point ### `selectionFilter` Element\n\n The filter object represents a single clicked item: * A string or unbinned number or date, which becomes an equality match query `({field: value})` or a query using `$eq`, `$ne`, `$in`, or `$nin` operators.\n* A binned number or date, which becomes a query using `gt`,`$gte`, `$lt`, or `lte` operators. Periodic dates are ignored. ## Example ```shell { field: 'value' } { field1: 'value1', field2: 'value2' } { field: { $in: [ 'a', 'b', 'c' ] } } { field: { $nin: [ 'x', 'y', 'z' ] } } { field: { $gt: 10 } } { field: { $gt: 13, $lte: 30 } } { field: { $gt: Date(\"2020-01-01\"), $lt: Date(\"2020-03-31\") } } \n``` The `selectionFilter` document can have several key and value filters. For example, if a mark of a multi-series chart is clicked, the filter document contains both the category and series filter pairs. Each filter must reference the actual data source fields used and not their labels. You can enable highlighting for clicked events using the`setHighlight` method. ## Example ```shell const eventHandler = (payload) => {   chart.setHighlight(payload.selectionFilter); }; chart.render(container).then(() => {   chart.addEventListener('click', eventHandler); }); \n``` To learn more, see [Highlight Chart Elements.](https://mongodb.com/docs/charts/highlight-chart-elements/#std-label-highlight-chart-elements) On an embedded chart that includes event handlers with a filter for element roles, the chart shows: * The  when you hover over an element that triggers a filtered click event\n* The  when you hover over an element that doesn't trigger a click event If the event handler doesn't include filter for element roles, the appears when you hover over any chart element. ### `target` Element The `target` element of the [payload](#std-label-click-event-payload)contains information about the clicked target including: * The type of mark, such as `rect`, `line`, `arc`, `symbol`,`group`, or `area`\n* The role of mark, such as `mark`, `legend`, `axis-label`,`axis-title`, `tick-label`, `legend-entry`, `legend-title`, or `frame`\n* The fill color of the mark For [data tables](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-data-table-ref), the Charts Embedding JavaScript SDK click event handler payload captures the following: * Mark type, which is `text`\n* Mark role, such as `group-cell`, `value-cell`,`dynamic-value-cell`, `row-total-cell`,`column-total-cell`, `header-column-total-cell`, and`grand-total-cell` For [geospatial charts](https://mongodb.com/docs/charts/chart-type-reference/geo-spatial/#std-label-geo-spatial), the Charts Embedding JavaScript SDK click event handler payload captures the following: * The type of mark, such as `polygon`, `map`, or `symbol`\n* The role of mark, such as `mark` or `map`\n* The fill color of the mark The Charts Embedding JavaScript SDK click event handler does not capture click events on column headers. ## Examples The Charts Embedding JavaScript SDK includes examples that demonstrate common uses for click events in an application. The first example shows basic click events and payload handling. The second example shows interactive filtering of clicked chart elements. To learn more about installing the Embedding SDK and running the example app with your own data or sample data, see [MongoDB Charts Embedding Example for Click Events on GitHub](https://github.com/mongodb-js/charts-embed-sdk/tree/master/examples/charts/click-events-basic). Each example app is configured with a chart ID and base URL which are particular to the app. Be sure to configure your own apps with the correct chart ID and base URL. ### Basic Handling of Click Events\n\n Each time you click on an element in the chart, the click event listener refreshes the `payload` to reflect data from the `x` and`y` axis. When you click on an element that represents a specific genre and decade in the `Movie Genres` chart, the `Clicked Element`and `Full Event Payload` displays details on that movie genre and decade including: * Fields that represent data for the clicked element.\n* Mark type, role, and fill color. Refer to the example app to view the full event payload. ### Interactive Filtering for Click Events In the [example app](https://codesandbox.io/s/github/mongodb-js/charts-embed-sdk/tree/master/examples/charts/click-events-filtering)for interactive filtering, when you click on an element on the `Movie Genres` chart, the embedding SDK generates a filter based on the element on which you clicked and then applies the filter to a second chart. In this example application, the chart shows: * The  when you hover over an interactive element\n* The  when you hover over an element which doesn't trigger a click event The click event listener triggers events only for the mark roles specified through the `options` parameter. The payload defines a filter based on the `y` axis, which represents the movie genres, and the lower and upper bound range, which represents the decade. Each time you click on an element that represents a specific genre and decade on the `Movie Genres` chart, the `Movie Details` data table is filtered by the clicked element and changes to display the movies available in that genre and decade. Refer to the example app to view the full a sample event handler callback function. ← [Configure Embedding Authentication Providers](https://mongodb.com/docs/charts/configure-auth-providers/ \"Previous Section\")[Highlight Chart Elements](https://mongodb.com/docs/charts/highlight-chart-elements/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/bin-data/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Bin, Sort, and Limit Your Data On this page * [Bin Data](#bin-data)\n* [Sort Data](#sort-data)\n* [Limit Data](#limit-data) You can bin, sort, and limit data in your charts to highlight key aspects in your data. ## Bin Data MongoDB Charts supports binning date, numeric, and string fields in your data. Binning breaks continuous data into discrete groups called_bins_, with each bin containing a contiguous subset of the original values. For example, you might group users into bins by the decade they were born, or group timestamped calendar events by the month of their start date. ## Example ### Continuous vs Discrete Data Continuous data can occupy any value over a continuous range. Some examples of continuous data include height, temperature, or the time a person was born. Alternatively, discrete data is data which can only take certain values, categorized into a classification. Examples of discrete data include eye color and the number of students in a class. ## Sort Data Use the Sort By dropdown in the Chart Builder to sort chart data by either: * Category\n* Value\n* Series field (for [multi-series charts)](https://mongodb.com/docs/charts/multi-series-charts/#std-label-multi-series-charts) If you sort a multi-series chart generically by Valuewithout sorting by a specific series, MongoDB Charts sorts your data based on the sum of all values in your series. To toggle between ascending or descending sort order, click the `a-z`button to the right of the Sort By dropdown. By default, Charts sorts data based on Valuein descending order. ### Sort Multi-Series Charts by Series Value If you create a [multi-series chart](https://mongodb.com/docs/charts/multi-series-charts/#std-label-multi-series-charts) using a different field per series, you can sort the chart by a specific series field. ## Example The following charts use the[Sample Data: Movies](https://mongodb.com/docs/charts/data-sources/#std-label-charts-sample-data)data source to compare the mean number of `fresh` and `rotten`Rotten Tomato ratings for movies in each genre. This chart is sorted by the mean `fresh` value in descending order: ![Chart sorted by fresh rating in descending order](https://mongodb.com/docs/charts/images/charts/sort-by-series-fresh-desc.png) This chart is sorted by the mean `rotten` value in ascending order: ![Chart sorted by rotten rating in ascending order](https://mongodb.com/docs/charts/images/charts/sort-by-series-rotten-asc.png) ## Limit Data You can apply a limit to the Category encoding channel to only include a specified number of categories in your visualization. The categories included are the _first_ matching categories based on the [sort order](#std-label-charts-sort-data) specified. Limiting data can be useful when visualizing data with so many categories it becomes difficult to create a meaningful chart. When you limit your data, you may additionally enableShow \"All Others\" to create a new category called \"All others\" that combines the values of categories omitted by your limit. ## Example The following chart shows the average[IMDb](https://www.imdb.com/) rating of movies from a particular country: ![Movie ratings by country](https://mongodb.com/docs/charts/images/charts/charts-movie-ratings-by-country.png) The dataset contains movies from many different countries, but it would be most interesting to see which countries produce the highest-rated movies. We can accomplish this by applying a limit to only show countries with the 10 highest average ratings for movies. Switch the Limit Results toggle to `On` and leave theShow input at the default value of 10. Check Show \"All Others\" to create an 11th column representing the average rating of movies from countries that aren't in the top 10. The chart is now much easier to understand, and we have a clear view of the countries with the highest-rated movies: ![Movie ratings by country limited](https://mongodb.com/docs/charts/images/charts/charts-movie-ratings-by-country-limited.png) ← [Filter Chart Results](https://mongodb.com/docs/charts/filter-chart-results/ \"Previous Section\")[Customize Charts](https://mongodb.com/docs/charts/customize-charts/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/aggregation-pipeline-generation/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Backing Aggregation Pipeline To get the data needed to render a chart, Charts creates a MongoDB Aggregation Pipeline which is executed on the MongoDB database server. The pipeline consists of multiple stages, each of which is generated based on different settings specified by the chart's author. This document explains how the various Chart Builder settings are used to construct the Aggregation Pipeline. You can view the pipeline used to create a chart by choosing the View Aggregation Pipelineoption in the Chart Builder's ellipsis dropdown on the top right. The pipeline constructed by MongoDB Charts consists of the following segments in the following order: 1. [Charts views](https://mongodb.com/docs/charts/create-manage-charts-view/#std-label-data-sources-pipeline)\n2. [Dashboard filters](https://mongodb.com/docs/charts/dashboard-filtering/#std-label-filter-dashboards)\n3. [Chart query](https://mongodb.com/docs/charts/filter-chart-results/#std-label-query-bar)\n4. [Embedding filters](https://mongodb.com/docs/charts/embedded-chart-options/#std-label-embedded-chart-options)\n5. [Lookup fields](https://mongodb.com/docs/charts/add-lookup-field/#std-label-add-lookup-field)\n6. [Calculated fields](https://mongodb.com/docs/charts/calculated-fields/#std-label-calculated-fields)\n7. [Chart filters](https://mongodb.com/docs/charts/filter-chart-results/#std-label-charts-filter-documents)\n8. [Encoded fields](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels)\n9. [Sorting](https://mongodb.com/docs/charts/bin-data/#std-label-charts-sort-data)\n10. Maximum document limit ## Note You do not need to configure all of the above settings when creating a chart. Unspecified settings are skipped when generating the aggregation pipeline. ## Example The following chart shows the total sale amounts from an office supply company, categorized by purchase method. Each document in the data collection represents a single sale. Using this chart as an example, we will explore how the specifications for each of the above settings change the aggregation pipeline generated by MongoDB Charts. ![Aggregation pipline example without any filters.](https://mongodb.com/docs/charts/images/charts/agg-pipeline.png) ### Encoding Without any Data Source pipeline, Query bar queries, calculated fields, and filters added in the Filterpane, MongoDB Charts generates the following aggregation pipeline:\n\n ` The pipeline at this point consists of groups from theEncode panel, stages for the default sort order, and the maximum document limit, which is set to 5000 by MongoDB Charts. ### Adding Queries The query below restricts the documents shown to only those with a `saleDate` equal to or more recent than `January 1, 2017` with at least 5 elements in the `items` array. `items` is an array where each element is an item purchased during a sale. Query: ```javascript {   $and: [   {     saleDate: { $gte: new Date(\"2017-01-01\") }   },   {     'items.4': { $exists: true }   } ] } \n``` Applying the above query in the Query bar generates the following chart and aggregation pipeline: ![Aggregation pipline example with query.](https://mongodb.com/docs/charts/images/charts/agg-pipeline-query.png) Aggregation Pipeline: ```javascript 1 { 2   \"$match\": {              // Query 3     \"$and\": [ 4       { 5         \"saleDate\": { 6           \"$gte\": { 7             \"$date\": \"2017-01-01T00:00:00Z\" 8           } 9         } 10       }, 11       { 12         \"items.4\": { 13           \"$exists\": true 14         } 15       } 16     ] 17   } 18 }, 19 { 20   \"$addFields\": { 21     \"__alias_0\": { 22       \"$sum\": \"$items.price\" 23     } 24   } 25 }, 26 { 27   \"$group\": { 28     \"_id\": { 29       \"__alias_1\": \"$purchaseMethod\" 30     }, 31     \"__alias_0\": { 32       \"$sum\": \"$__alias_0\" 33     } 34   } 35 }, 36 { 37   \"$project\": { 38     \"_id\": 0, 39     \"__alias_1\": \"$_id.__alias_1\", 40     \"__alias_0\": 1 41   } 42 }, 43 { 44   \"$project\": { 45     \"x\": \"$__alias_1\", 46     \"y\": \"$__alias_0\", 47     \"_id\": 0 48   } 49 }, 50 { 51   \"$addFields\": { 52     \"__agg_sum\": { 53       \"$sum\": [ 54         \"$y\" 55       ] 56     } 57   } 58 }, 59 { 60   \"$sort\": { 61     \"__agg_sum\": -1 62   } 63 }, 64 { 65   \"$project\": { 66     \"__agg_sum\": 0 67   } 68 }, 69 { 70   \"$limit\": 5000 71 } \n``` The aggregation pipeline now starts with the query applied, and is followed by the groups selected in the Encode panel and the max document limit. ### Adding Calculated Fields We can also change the chart to show the total revenue generated categorized by purchase method. To accomplish this task, we will create a calculated field that calculates the total revenue by multiplying price by quantity. Adding this new calculated field, in addition to the query above, produces the following chart and pipeline: Calculated Field Expression: ![Aggregation pipline example with calculated field.](https://mongodb.com/docs/charts/images/charts/agg-pipeline-calc-field.png) Aggregation Pipeline: ```javascript 1 { 2   \"$match\": { 3     \"$and\": [ 4       { 5         \"saleDate\": { 6           \"$gte\": { 7             \"$date\": \"2017-01-01T00:00:00Z\" 8           } 9         } 10       }, 11       { 12\n\n 13           \"$exists\": true 14         } 15       } 16     ] 17   } 18 }, 19 { 20   \"$addFields\": {              // Calculated Field 21     \"revenue\": { 22       \"$reduce\": { 23         \"input\": \"$items\", 24         \"initialValue\": 0, 25         \"in\": { 26           \"$sum\": [ 27             \"$$value\", 28             { 29               \"$multiply\": [ 30                 \"$$this.price\", 31                 \"$$this.quantity\" 32               ] 33             } 34           ] 35         } 36       } 37     } 38   } 39 }, 40 { 41   \"$group\": { 42     \"_id\": { 43       \"__alias_0\": \"$purchaseMethod\" 44     }, 45     \"__alias_1\": { 46       \"$sum\": \"$revenue\" 47     } 48   } 49 }, 50 { 51   \"$project\": { 52     \"_id\": 0, 53     \"__alias_0\": \"$_id.__alias_0\", 54     \"__alias_1\": 1 55   } 56 }, 57 { 58   \"$project\": { 59     \"x\": \"$__alias_0\", 60     \"y\": \"$__alias_1\", 61     \"_id\": 0 62   } 63 }, 64 { 65   \"$addFields\": { 66     \"__agg_sum\": { 67       \"$sum\": [ 68         \"$y\" 69       ] 70     } 71   } 72 }, 73 { 74   \"$sort\": { 75     \"__agg_sum\": -1 76   } 77 }, 78 { 79   \"$project\": { 80     \"__agg_sum\": 0 81   } 82 }, 83 { 84   \"$limit\": 5000 85 } \n``` The updated pipeline now includes the calculated field right below the query applied in the Query bar while the order of the rest of the components remains unchanged. ### Adding Filters This chart can be further refined by adding a filter in theFilter pane to only select in-store sales made in the New York location. Adding this filter produces the following chart and aggregation pipeline: ![Aggregation pipline example with filter.](https://mongodb.com/docs/charts/images/charts/agg-pipeline-with-filter.png) Aggregation Pipeline: ```javascript 1 { 2   \"$match\": { 3     \"$and\": [ 4       { 5         \"saleDate\": { 6           \"$gte\": { 7             \"$date\": \"2017-01-01T00:00:00Z\" 8           } 9         } 10       }, 11       { 12         \"items.4\": { 13           \"$exists\": true 14         } 15       } 16     ] 17   } 18 }, 19 { 20   \"$addFields\": { 21     \"revenue\": { 22       \"$reduce\": { 23         \"input\": \"$items\", 24         \"initialValue\": 0, 25         \"in\": { 26           \"$sum\": [ 27             \"$$value\", 28             { 29\n\n 30                 \"$$this.price\", 31                 \"$$this.quantity\" 32               ] 33             } 34           ] 35         } 36       } 37     } 38   } 39 }, 40 { 41   \"$match\": {             // Filter 42     \"storeLocation\": { 43       \"$in\": [ 44         \"New York\" 45       ] 46     } 47   } 48 }, 49 { 50   \"$group\": { 51     \"_id\": { 52       \"__alias_0\": \"$purchaseMethod\" 53     }, 54     \"__alias_1\": { 55       \"$sum\": \"$revenue\" 56     } 57   } 58 }, 59 { 60   \"$project\": { 61     \"_id\": 0, 62     \"__alias_0\": \"$_id.__alias_0\", 63     \"__alias_1\": 1 64   } 65 }, 66 { 67   \"$project\": { 68     \"x\": \"$__alias_0\", 69     \"y\": \"$__alias_1\", 70     \"_id\": 0 71   } 72 }, 73 { 74   \"$addFields\": { 75     \"__agg_sum\": { 76       \"$sum\": [ 77         \"$y\" 78       ] 79     } 80   } 81 }, 82 { 83   \"$sort\": { 84     \"__agg_sum\": -1 85   } 86 }, 87 { 88   \"$project\": { 89     \"__agg_sum\": 0 90   } 91 }, 92 { 93   \"$limit\": 5000 94 } \n``` The pipeline now includes the `storeLocation` filter right below the calculated field while the order of the rest of the components remains unchanged. ← [Subset Mode](https://mongodb.com/docs/charts/subset-mode/ \"Previous Section\")[Chart Types](https://mongodb.com/docs/charts/chart-types/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/connect-disconnect-data-source/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Connect or Disconnect Data Sources and Deployments On this page * [Connect a Deployment to Charts](#connect-a-deployment-to-charts-short)\n* [Connect a Data Source to Charts](#connect-a-data-source-to-charts-short)\n* [Disconnect a Deployment from Charts](#disconnect-a-deployment-from-charts-short)\n* [Disconnect a Data Source from MongoDB Charts](#disconnect-a-data-source-from-charts) On the Data Sources page, an Atlas [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner) can: * [Connect a deployment](#std-label-connect-deployment) or[connect a data source](#std-label-connect-data-source) to MongoDB Charts.\n* [Disconnect a deployment](#std-label-disconnect-deployment) or[disconnect a data source](#std-label-disconnect-data-source) fromMongoDB Charts. To learn more about data sources and deployments, see [Data Sources.](https://mongodb.com/docs/charts/data-sources/#std-label-data-sources) Charts connects to all deployments and data sources by default. ## Connect a Deployment to Charts You can connect a deployment to Charts to access the data for the collections within the deployment in Charts. To connect a deployment to Charts: 1 ### In the left navigation menu, click Data Sources. The Data Sources page displays. 2 ### In the Deployment dropdown, select the deployment that contains your data source. Deployments in MongoDB Charts reference Atlas deployments that contain valid Charts data sources, including: * All [clusters and serverless instances](https://www.mongodb.com/docs/atlascreate-database-deployment/) in your Atlasproject for which you have the[Project Data Access Read Only](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Data-Access-Read-Only) role or higher.\n* All [federated database instances](https://www.mongodb.com/docs/atlas/data-federation/) in your project, including[Online Archives.](https://www.mongodb.com/docs/atlas/online-archive/manage-online-archive/) After you select a deployment, the following information displays:\n\n 3 ### Check the connection status and connect the deployment. If the deployment connection status is Connected, the deployment is already connected to Charts. TheData Access section displays all of the collections within the selected Atlas deployment. If the deployment connection status is Disconnected: 1. Click the connect icon  next to the deployment connection status.\n2. Click Reconnect on the modal that appears. The deployment connects and the Data Access section displays all of the databases for the selected Atlasdeployment. ## Connect a Data Source to Charts Connect a data source to Charts to use its data in your charts. When you connect a data source, Charts grants the default[permissions](https://mongodb.com/docs/charts/manage-data-sources/#std-label-permission-model) to Charts users. To customize the permissions for a data source, see[Modify Data Source Permissions.](https://mongodb.com/docs/charts/manage-data-sources/#std-label-mod-data-source-permissions) To connect a data source to Charts: 1 ### Connect your deployment. To learn more, see [Connect a Deployment to Charts.](#std-label-connect-deployment) 2 ### In the Data Access section, select the database that contains the data source. Select the database that contains the data source you want to connect. The database's data sources display, including[charts views.](https://mongodb.com/docs/charts/create-manage-charts-view/#std-label-charts-views) Charts displays the following information about the data source: | Column         | Description                                                                                                                           |\n| -------------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n| Data Source    | Human-readable label that identifies the data source and its chart views.                                                             |\n| External Users | Label that indicates whether:You enabled external user access.The external user connection method isAuthenticated or Unauthenticated. |\n| Status         | Label that indicates whether you connected the data source to MongoDB Charts.                                                         | 3 ### Click Manage next to the data source's information. The data source's details page displays the following information: | Field                         | Description                                                                   |\n| ----------------------------- | ----------------------------------------------------------------------------- |\n| Data Source Name              | Human-readable label that identifies the data source inAtlas.                 |\n| Data Source Connection Status | Label that indicates whether you connected the data source to MongoDB Charts. | To learn more about the other information that displays on the data source's details page, see[Manage Data Sources.](https://mongodb.com/docs/charts/manage-data-sources/#std-label-manage-existing-data-sources) 4 ### Check the connection status and connect the data source. If the data source connection status is Connected, you already connected this data source to MongoDB Charts. TheData Access section displays. If the data source connection status is Disconnected:\n\n The data source connects and the Data Accesssection displays. To learn more about the other information that displays in the data source's Data Access section, see[Manage Data Sources.](https://mongodb.com/docs/charts/manage-data-sources/#std-label-manage-existing-data-sources) ## Disconnect a Deployment from Charts Disconnect a deployment to disconnect all data sources within the deployment from Charts. If you disconnect a deployment, you can [reconnect](#std-label-connect-deployment) it later to resume rendering charts that use the deployment's data sources. To disconnect a deployment: 1 ### In the left navigation menu, click Data Sources. The Data Sources page displays. 2 ### In the Deployment dropdown, select the deployment that contains your data source. Deployments in MongoDB Charts reference Atlas deployments that contain valid Charts data sources, including: * All [clusters and serverless instances](https://www.mongodb.com/docs/atlascreate-database-deployment/) in your Atlasproject for which you have the[Project Data Access Read Only](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Data-Access-Read-Only) role or higher.\n* All [federated database instances](https://www.mongodb.com/docs/atlas/data-federation/) in your project, including[Online Archives.](https://www.mongodb.com/docs/atlas/online-archive/manage-online-archive/) After you select a deployment, the following information displays:\n\n 3 ### Check the connection status and disconnect the deployment. If the deployment connection status is Disconnected, the deployment is already disconnected from Charts. If the deployment connection status is Connected: 1. Click the disconnect icon  next to the deployment connection status. The Disconnect Deployment modal appears.\n2. Click Check for connected charts to learn whether any charts use the deployment's collections as a data source.\n3. Click Disconnect. The deployment disconnects from Charts. ## Disconnect a Data Source from MongoDB Charts Disconnect a data source from Charts to remove its data from your charts. If you disconnect a data source: * Any charts you built that use the data source no longer render and display an error.\n* Any charts that use [$lookup](https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/#mongodb-pipeline-pipe.-lookup) to access data in the data source no longer render and display an error.\n* You can't use the data source to build new charts. You can also [disconnect a deployment.](#std-label-disconnect-deployment) If you disconnect a data source, you can [reconnect](#std-label-connect-data-source) it later to resume rendering charts that use its data. ## Note Charts automatically includes theSample Data: Movies data source in all Chartstenants. The [Sample Dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-sample-dashboard) uses this data source to show the charts you can create. You can access the sample data source from all dashboards. You can't: * Add, edit, or delete the data in the Sample Data: Moviesdata source.\n* Remove the sample data source.\n* Externally share or [embed](https://mongodb.com/docs/charts/embedding-charts/#std-label-embedding-charts) charts that use the sample data. To disconnect a data source from Charts: 1 ### In the left navigation menu, click Data Sources. The Data Sources page displays. 2 ### In the Deployment dropdown, select the deployment that contains your data source. Deployments in MongoDB Charts reference Atlas deployments that contain valid Charts data sources, including: * All [clusters and serverless instances](https://www.mongodb.com/docs/atlascreate-database-deployment/) in your Atlasproject for which you have the[Project Data Access Read Only](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Data-Access-Read-Only) role or higher.\n* All [federated database instances](https://www.mongodb.com/docs/atlas/data-federation/) in your project, including[Online Archives.](https://www.mongodb.com/docs/atlas/online-archive/manage-online-archive/) After you select a deployment, the following information displays:\n\n 3 ### In the Data Access section, select the database that contains the data source. Select the database that contains the data source you want to disconnect. The database's data sources display. 4 ### Click Manage next to the data source's information. The data source's details page displays. 5 ### Check the connection status and disconnect the data source. If the data source connection status is Disconnected, the data source is already disconnected from MongoDB Charts. If the data source connection status is Connected: 1. Click the disconnect icon  next to the data source connection status. The Disconnect Data Source modal appears.\n2. Click Check for connected charts to learn whether any charts use the data source.\n3. Click Disconnect. The data source disconnects from Charts. ← [Data Sources](https://mongodb.com/docs/charts/data-sources/ \"Previous Section\")[Manage Data Sources](https://mongodb.com/docs/charts/manage-data-sources/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/filter-embedded-dashboards/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Filter Embedded Dashboards On this page * [Specify Filterable Fields](#specify-filterable-fields)\n* [Filters for Embedded Documents](#filters-for-embedded-documents)\n* [Filter Data on Dashboards Embedded in an iframe](#filter-data-on-dashboards-embedded-in-an-iframe)\n* [Filter Syntax](#filter-syntax)\n* [Filter Data on Dashboards Embedded with the SDK](#filter-data-on-dashboards-embedded-with-the-sdk)\n* [Inject User-Specific Filters](#inject-user-specific-filters) You can customize your embedded dashboards by appending various query parameters to their iframe URLs or using the `filter` option with the Charts Embedding SDK. ## Specify Filterable Fields A dashboard [Author](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-roles) specifies the fields that can be included in filters set by the embedding application code or added by dashboard viewers. A dashboard author can limit access to data by allowing only certain fields to be filtered. By default, no fields are allowed, meaning the dashboard cannot be filtered until you explicitly allow at least one field. To define filterable fields: 1. For the desired [dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-dashboards), click the button and select Embed from the dropdown.\n2. In the Allowed filter fields section, click the button.  \n## Note  \nThis option only appears if you already have **Unauthenticated**or **Authenticated** embedding access enabled.  \nYou can specify on which fields dashboard viewers can filter data by:  \n   * Using the dropdown to select the fields  \n   * Manually typing values to add fields not listed in the dropdown  \n   * Selecting Allow all fields in the data source used in this dashboard\n3. When you have selected all desired fields, click Savebelow the dropdown. Dashboard [viewers](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-roles) and applications which render the dashboard can now use filters based on the specified fields to display subsets of the original dashboard data. If a viewer attempts to use a filter for a field not included in the [Allowed filter fields](#std-label-specify-filter-fields-dashboards) list, MongoDB Charts returns an[error.](https://mongodb.com/docs/charts/embedded-chart-error-codes/#std-label-embedded-errors) ### Filters for Embedded Documents When you add a field to the Allowed filter fields list whose value is an embedded document, you must also specify each individual sub-field you want to allow. ## Example Consider the following document: `| {                   |\n| ------------------- |\n| \"name\": \"Alice\",    |\n| \"favorites\" :       |\n| {                   |\n| \"color\": \"green\",   |\n| \"animal\": \"turtle\", |\n| \"season\": \"autumn\"  |\n| }                   |\n| }                   | ` If you only add the `favorites` field to the list of allowed fields, it does _not_ grant viewers permission to filter upon any of the sub-fields of `favorites`. Instead, you may add one or more of the sub-fields to the list individually by specifying `favorites.color`,`favorites.animal`, or `favorites.season`. ## Filter Data on Dashboards Embedded in an iframe Use the `filter` query parameter to only display data that matches a specified MQL filter in your dashboard embedded in an iframe.\n\n ### Filter Syntax You can specify an MQL document as your `filter` query parameter provided that the fields used in your filter are in the [list of allowed filterable fields.](#std-label-specify-filter-fields-dashboards) Your filter must match the format used in a[$match](https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/) query and be either a: * Top level query  \n## Example  \n```  \n{ \"quantity\": { $gte: 20 } }  \n```\n* Or within boolean expressions ([$and](https://www.mongodb.com/docs/manual/reference/operator/query/and/),[$nor](https://www.mongodb.com/docs/manual/reference/operator/query/nor/),[$or)](https://www.mongodb.com/docs/manual/reference/operator/query/or/)  \n## Example  \n```  \n{ $or: [ { quantity: { $lt: 20 } }, { price: 10 } ] }  \n``` ## Note You must URL-encode special characters of the filter parameter. #### Example The following iframe `src` URL renders a dashboard which only displays documents with an `imdb.rating` greater than or equal to `8`: ``` https://charts.mongodb.com/charts-atlasproject1-piocy/embed/dashboards? id=93584ddb-1115-4a12-afd9-5129e47bbb0d& filter={\"imdb.rating\":%20{$gte:%208}} \n``` The URL uses an encoded `filter` parameter of`{\"imdb.rating\":%20{$gte:%208}}`. Decoded, this filter is: ``` {\"imdb.rating\": {$gte: 8}} \n``` ## Filter Data on Dashboards Embedded with the SDK You can add a [filter](#std-label-embed-options-filter-dashboards) to an embedded dashboard with the `filter` option. Filtering allows the dashboard author to only display data in the embedded dashboard which matches a specified MQL filter. In the Embed modal, you must specify any fields included in the filter. The Embed modal contains a dropdown menu of fields on which to allow filtering. The following uses the `filter` option to represent only documents in which the `total` field is greater than `100`: ```javascript createDashboard({   baseUrl: '<your-base-url>',   dashboardId: '<your-dashboard-id>',   width: 500,   height: 500,   filter: { \"total\": { \"$gt\": 100 } } }) \n``` ### Inject User-Specific Filters When you embed a dashboard that requires Authenticatedaccess, you can use the Injected function setting to inject a MongoDB filter document specific to each user who views the dashboard. The function has access to your Embedding Authentication Provider's token via `context.token`, and can filter the dashboard data based on the token. This filter ensures that viewers of an embedded dashboard only see their own data, which is useful when embedding dashboard with potentially sensitive information. ## Note If you use an Atlas App Services authentication provider, `context.token`contains the App Services[user object](https://www.mongodb.com/docs/atlas/app-services/authentication/user-objects/) to filter. For example, if you enable[Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/)for App Services users, the user object is available in`context.token.custom_data`. To inject a filter specific to each user, in theAuthenticated tab of the Embed dialog, set theInjected function\\`setting to :guilabel:\\`On. Specify a function and click Save. ## Example The following filter function only renders data where the`ownerId` field of a document matches the value of the Embedding Authentication Provider's token's `sub` field: ```javascript function getFilter(context) {   return { ownerId: context.token.sub }; } \n```\n\n",
  "https://www.mongodb.com/docs/charts/tutorials/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Tutorials ← [Getting Started Tutorial](https://mongodb.com/docs/charts/welcome-experience/ \"Previous Section\")[Visualizing Order Data](https://mongodb.com/docs/charts/tutorial/order-data/order-data-tutorial-overview/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/single-series-categories/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Create a Single-Series Chart with Multiple Aggregations You can create a single-series chart that contains multiple aggregated values. These aggregated values can be from either the same field or different fields in your [data source](https://mongodb.com/docs/charts/data-sources/#std-label-data-sources). Use this functionality to visualize multiple aggregated values without grouping your data into categories. ## Supported Chart Types You can include multiple aggregations in your single-series chart on the following chart types: * Grouped and Stacked [Bar Charts](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref)\n* Grouped and Stacked [Column Charts](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref)\n* Discrete [Line Charts](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-line-area-chart-ref)\n* Discrete [Area Charts](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-line-area-chart-ref) ## Procedure To create a single-series chart that contains multiple aggregated values: 1 ### In the Chart Builder, drag a field to the Aggregation encoding channel. 2 ### Select the desired aggregation for your field. 3 ### Drag an additional field to the empty Aggregation encoding channel that appears below the first. ## Note You can reuse the same field in multiple Aggregationencoding channels to perform different aggregations on the same field. 4 ### Select the desired aggregation for the next field. 5 ### Drag any additional fields you want to include in your chart into an empty Aggregation encoding channel and select their aggregation method. ## Behavior * When you encode multiple aggregation fields, the Seriesencoding channel is disabled.\n* When you create a single-series chart with only aggregated values, each aggregated value is treated as its own category. If you encode aCategory field in addition to your aggregation fields, the aggregated values become series (instead of categories). To learn more, see [Map Multiple Fields to a Single Axis.](https://mongodb.com/docs/charts/multi-series-charts/#std-label-multiple-field-mappings) ## Example The following chart uses the Sample Data: Moviesdata source to show the mean IMDB and Rotten Tomatoes ratings across all movies. ![Movie Ratings Multiseries Chart](https://mongodb.com/docs/charts/images/charts/single-series-multi-agg.png) The chart contains two aggregation encoding channels: * Mean `imdb.rating`\n* Mean `tomatoes.rating` Since no field is applied to the category encoding channel, the chart shows the mean ratings across all movies, irrespective of any categorical grouping. ← [Title and Description](https://mongodb.com/docs/charts/title-description/ \"Previous Section\")[Create a Multi-Series Chart](https://mongodb.com/docs/charts/multi-series-charts/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/dashboard-permissions/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Dashboard Permissions and Sharing On this page * [View Dashboard Permissions](#view-dashboard-permissions)\n* [Modify Dashboard Permissions](#modify-dashboard-permissions) Dashboard permissions dictate which MongoDB Charts users have access to the dashboard and the actions they can perform on the dashboard. The following dashboard permissions are available:\n\n To view a chart on a dashboard, the user must have both: * A [project role](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles)that grants access to the data source. To learn more about granting access, see [Modify Role Permissions for Data Sources.](https://mongodb.com/docs/charts/manage-data-sources/#std-label-permission-model)\n* Any role on the dashboard, or access to an Atlas organization's dashboard through[organization-wide sharing.](#std-label-dashboard-access-org) ## Note ### Default Dashboard Permissions You can have no permissions on a dashboard. That dashboard won't appear on your [dashboards page](https://mongodb.com/docs/charts/dashboards/#std-label-dashboards-tab). Newly-created dashboards aren't shared by default. Only the dashboard `Owner`can view the dashboard until they grant access to more users. ## View Dashboard Permissions To view permissions for a specific dashboard, hover over the icon next to the dashboard's Share button. A tooltip appears describing what permission you have on the dashboard, who the owner of the dashboard is, and who else has access to the dashboard. The following table lists the possible icons and their associated permissions:\n\n ## Note If [Anyone with this link can view](#std-label-dashboard-access-link)sharing is enabled and you have `Author` or `Owner` permission, the icon doesn't change. ## Modify Dashboard Permissions ## Important To modify a dashboard's [permissions](#std-label-dashboard-roles), you must have the `Owner` role on that dashboard. To modify dashboard permissions, either click the click the[permission icon](#std-label-dashboard-permission-icons) at the top-right of the dashboard from the Dashboards page: ![Dashboard permission icon](https://mongodb.com/docs/charts/images/charts/dashboard-permission-icon.png) Or click the Share button at the top-right of the dashboard within the specific dashboard view: ![Dashboard access button](https://mongodb.com/docs/charts/images/charts/dashboard-share-button.png) With the Share Dashboard dialog open, read the following sections to learn how to grant permissions to a dashboard to: * [A specific user](#std-label-dashboard-specific-access)\n* [All users in your project](#std-label-dashboard-access-project)\n* [All users in your organization](#std-label-dashboard-access-org)\n* [Any user with your link](#std-label-dashboard-access-link) ### Specific User Permissions To give specific users permissions on the dashboard: 1. Select the Project tab.\n2. Search for the desired user using the search bar. You can search for users by their username or email address.\n3. Click the desired user to add them to the permissions list.\n4. Use the dropdown to the right of the user's name to assign the appropriate [permission.](#std-label-dashboard-roles)  \n## Important  \nMongoDB Charts displays a warning banner when the desired user can't access one or more data sources used on the dashboard. The user can't see any charts that use that data source.  \nA [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner) can assign the user a [project role](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles)with the access you want the user to have. To learn more about granting access, see [Modify Role Permissions for Data Sources.](https://mongodb.com/docs/charts/manage-data-sources/#std-label-permission-model)\n5. Repeat these steps for each user you would like to provide dashboard permissions for.\n6. Click Close. MongoDB Charts saves your changes automatically. To remove permissions for a user, click the trash can icon to the right of the user's name. ### Access for All Users in a Project To allow access to the dashboard for all users in your Atlasproject: 1. Select the Project tab.\n2. Toggle the switch to the right of the Everyone user to `On`.\n3. Select the [permission](#std-label-dashboard-roles) to apply to allMongoDB Charts users.  \nA user's own permissions override others that could come from theEveryone setting.  \n## Example  \nIf Everyone has the Author permission and**Alice** has the Viewer permission, **Alice**'s effective permission is Viewer.  \n## Important  \nMongoDB Charts displays a warning banner whenEveryone in <Project Name> can't access one or more data sources used on the dashboard. A user might not see a chart that uses a data source to which the user wasn't granted access.  \nA [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner) can assign the user a [project role](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles)with the access you want the user to have. To learn more about granting access, see [Modify Role Permissions for Data Sources.](https://mongodb.com/docs/charts/manage-data-sources/#std-label-permission-model)\n4. Click Close. MongoDB Charts saves your changes automatically. ### Access for All Users in an Organization To allow access to the dashboard for all users in your Atlasorganization:\n\n ## Note If your organization uses a SSO provider, MongoDB Cloud prompts users in your organization sign to in through your provider to view the dashboard. Users who authenticate through your organization's SSO provider don't need an Atlas account. You can view all dashboards shared with your organization on theOrganization page. To open the Organizationpage, click Organization under the Dashboardsheading on the left navigation menu. ### Access for Users with a Link to the Dashboard If you want to view a dashboard using a public link, enable[Unauthenticated External Data Access](https://mongodb.com/docs/charts/manage-data-sources/#std-label-data-source-embedding)on each data source in the charts in the dashboard. To allow access to the dashboard for users on your MongoDB Chartsdeployment who have a direct link: 1. Select the Public tab.\n2. Toggle the switch on the right-side of thePublic user to `On`.  \nMongoDB Charts generates a public link with which anyone can view the dashboard. A user's permissions don't affect their ability to view a chart using a public link.  \n## Important  \nMongoDB Charts displays a warning banner when a[Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner) hasn't enabled[Unauthenticated External Data Access](https://mongodb.com/docs/charts/manage-data-sources/#std-label-data-source-embedding). Users with the link won't be able to see the charts with the specified data source.  \nA [Project Owner](https://docs.atlas.mongodb.com/reference/user-roles/#mongodb-authrole-Project-Owner) can change the settings to allow viewers of all [project roles](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) to access the data. To learn more about granting access, see [Modify Role Permissions for Data Sources.](https://mongodb.com/docs/charts/manage-data-sources/#std-label-permission-model)\n3. Click Close. MongoDB Charts saves your changes automatically. ## Warning ### Link Sharing with Sensitive Data Don't share links to dashboards that display sensitive data. You can't verify who has access to the link. ← [Manage Existing Dashboards](https://mongodb.com/docs/charts/manage-dashboards/ \"Previous Section\")[Refresh Dashboard Data](https://mongodb.com/docs/charts/dashboard-refresh/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/filter-embedded-charts/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Filter Embedded Charts On this page * [Specify Filterable Fields](#specify-filterable-fields)\n* [Filters for Embedded Documents](#filters-for-embedded-documents)\n* [Filter Data on Charts Embedded in an iframe](#filter-data-on-charts-embedded-in-an-iframe)\n* [Filter Syntax](#filter-syntax)\n* [Filter Data on Charts Embedded with the SDK](#filter-data-on-charts-embedded-with-the-sdk)\n* [Inject User-Specific Filters](#inject-user-specific-filters) You can customize your embedded charts by appending various query parameters to their iframe URLs or using the `filter` option with the Charts Embedding SDK. ## Note To embed charts from your dashboards, you must configure embedding options on your data sources. For instructions, see: * [Embed Charts in Your Web Application](https://mongodb.com/docs/charts/embedding-charts/#std-label-embedding-charts) You can filter embedded charts and charts on[embedded dashboards.](https://mongodb.com/docs/charts/embedding-dashboards/#std-label-embedding-dashboards) ## Specify Filterable Fields A chart [Author](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-roles) specifies the fields that can be included in filters set by the embedding application code or added by chart viewers. A chart author can limit access to data by allowing only certain fields to be filtered. By default, no fields are allowed, meaning the chart cannot be filtered until you explicitly allow at least one field. To define filterable fields: 1. Navigate to the [dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-dashboards) that contains the chart where you wish to define filterable fields.\n2. For the desired chart, click the  button and select Embed Chart from the dropdown.\n3. In the Allowed filter fields section, use the dropdown to select which fields chart viewers can use filter data in the chart. You can also manually type values to add fields not listed in the dropdown.  \n## Note  \nThis option only appears if you already have **Unauthenticated**or **Authenticated** embedding access enabled.  \nYou can specify on which fields chart viewers can filter data by:  \n   * Using the dropdown to select the fields  \n   * Manually typing values to add fields not listed in the dropdown  \n   * Selecting Allow all fields in the data source used in this chart\n4. When you have selected all desired fields, click Savebelow the dropdown. Chart [viewers](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-roles) and applications which render the chart can now use filters based on the specified fields to display subsets of the original chart data. If a viewer attempts to use a filter for a field not included in the [Allowed filter fields](#std-label-specify-filter-fields) list, MongoDB Charts returns an [error.](https://mongodb.com/docs/charts/embedded-chart-error-codes/#std-label-embedded-errors) ### Filters for Embedded Documents When you add a field to the Allowed filter fields list whose value is an embedded document, you must also specify each individual sub-field you want to allow. ## Example Consider the following document: `| {                   |\n| ------------------- |\n| \"name\": \"Alice\",    |\n| \"favorites\" :       |\n| {                   |\n| \"color\": \"green\",   |\n| \"animal\": \"turtle\", |\n| \"season\": \"autumn\"  |\n| }                   |\n| }                   | `\n\n ## Filter Data on Charts Embedded in an iframe Use the `filter` query parameter to only display data that matches a specified MQL filter in your chart embedded in an iframe. You can use the `filter` query parameter on bothUnauthenticatedand Verified Signature charts. The filtering behavior differs with each authentication setting: * With unauthenticated charts, the chart[Author](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-roles) specifies the fields that can be included in filters set by the embedding application code or added by chart viewers. To learn how to specify filterable fields, see[Specify Filterable Fields.](#std-label-specify-filter-fields)\n* With charts which require a Verified Signature, all document fields can be filtered upon, however you must generate the filter in the server-side code and include the filter as part of your signed payload. ### Filter Syntax Select the appropriate tab to see an example of how to filter data in an Unauthenticated chart and aVerified Signature chart: ## Filter Data on Charts Embedded with the SDK You can add a [filter](#std-label-embed-options-filter) to an embedded chart with the `filter` option. Filtering allows the chart author to only display data in the embedded chart which matches a specified MQL filter. In the Embed Chart modal, you must specify any fields included in the filter. The Embed Chart modal contains a dropdown menu of fields on which to allow filtering. The following uses the `filter` option to represent only documents in which the `total` field is greater than `100`: ```javascript createChart({   baseUrl: '<your-base-url>',   chartId: '<your-chart-id>',   width: 500,   height: 500,   filter: { \"total\": { \"$gt\": 100 } } }) \n``` ### Inject User-Specific Filters When you embed a chart that requires Authenticated access, you can use the Injected function setting to inject a MongoDB filter document specific to each user who views the chart. The function has access to your Embedding Authentication Provider's token via `context.token`, and can filter the chart data based on the token. This filter ensures that viewers of an embedded chart see only their own data, which is useful when embedding charts with potentially sensitive information. ## Note If you use an Atlas App Services authentication provider, `context.token`contains the App Services[user object](https://www.mongodb.com/docs/atlas/app-services/authentication/user-objects/) to filter. For example, if you enable[Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/)for App Services users, the user object is available in`context.token.custom_data`. To inject a filter specific to each user, in theAuthenticated tab of the Embed Chartdialog, set the Injected functionsetting to On. Specify a function and clickSave. ## Example The following filter function only renders data where the`ownerId` field of a document matches the value of the Embedding Authentication Provider's token's `sub` field: ```javascript function getFilter(context) {   return { ownerId: context.token.sub }; } \n``` ← [Embedded Chart Options](https://mongodb.com/docs/charts/embedded-chart-options/ \"Previous Section\")[Embed Dashboards in Your Web Application](https://mongodb.com/docs/charts/embedding-dashboards/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/get-started-embedding/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Get Started with Embedding Charts offers a Getting Started UI to help you learn how to embed [charts](https://mongodb.com/docs/charts/embedding-charts/#std-label-embedding-charts) and[dashboards](https://mongodb.com/docs/charts/embedding-dashboards/#std-label-embedding-dashboards) with an iFrame or Javascript SDK. ## Use the Getting Started UI 1 ### Go to the Embedding page. Click Embedding in the sidebar. 2 ### Open the Getting Started view. Click the Getting Started tab. 3 ### Configure the How to embed section. 1. Click the Item that you want to embed.\n2. Click the Method that you want to use. 4 ### Review the instructions. Follow the instructions in the How to embedsection to set up embedding in the Charts UI and your application. 5 ### Review the embedding features. Scroll to the Embedding features section to review the available features and learn more. 6 ### Review the available resources. Scroll to the Resources section to try different examples and explore different embedding scenarios. ← [Embed Charts and Dashboards](https://mongodb.com/docs/charts/embed-charts-and-dashboards/ \"Previous Section\")[Embed Charts in Your Web Application](https://mongodb.com/docs/charts/embedding-charts/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/configure-auth-providers/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Configure Embedding Authentication Providers On this page * [Considerations](#considerations)\n* [Atlas App Services Providers](#atlas-app-services-providers)\n* [Google Providers](#google-providers)\n* [JWT Providers](#jwt-providers)\n* [Procedures](#procedures)\n* [View Authentication Providers](#view-authentication-providers)\n* [Add an Authentication Provider](#add-an-authentication-provider)\n* [Modify an Authentication Provider](#modify-an-authentication-provider)\n* [Delete an Authentication Provider](#delete-an-authentication-provider)\n* [Generate an Embedding Key](#generate-an-embedding-key) MongoDB Charts uses tokens passed with the Embedding SDK to authenticate users who want to view embedded charts or dashboards that require authentication. Charts doesn't render the chart or dashboard in any of the following scenarios: * The details in the token don't match criteria you specify.\n* The token is invalid.\n* A token isn't present. ## Considerations * You must be an Atlas [Project Owner](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) to configure embedding authentication providers for your linkedCharts instance.\n* Charts supports these authentication providers:  \n   * [Atlas App Services](https://www.mongodb.com/docs/realm/authentication/)  \n   * Google  \n   * Custom JWT ### Atlas App Services Providers Charts considers tokens from App Services providers valid if they: * Are syntactically valid JWTs.\n* Are issued by the relevant authority.\n* Match the App Services App ID you configure the provider to accept. ### Google Providers Charts considers tokens from Google providers valid if they: * Are syntactically valid JWTs.\n* Are issued by the relevant authority.\n* Match the Google Client ID you configure the provider to accept. ### JWT Providers Charts considers tokens from JWT providers valid if they: * Contain an expiration time claim with a time and date in the future.  \n## Note  \nYour application must handle refreshing tokens before they expire.\n* Contain an issued at time claim with a time and date in the past.\n* Have a token lifetime of less than or equal to one hour. The token lifetime is the difference between the issued at time claim and the expiration time claim.  \n## Example  \nCharts rejects a token containing the following claims because the token lifetime of one year is too long:  \n`| {                    |  \n| -------------------- |  \n| \"iat\": \"1587497399\", |  \n| \"exp\": \"1617305399\"  |  \n| }                    |  \n`  \nCharts can accept a token containing the following claims because the token lifetime of one hour is acceptable:  \n```  \n{  \n  \"iat\": \"1585769399\",  \n  \"exp\": \"1585772999\"  \n}  \n```\n* Are signed using either the `HS256` or `RS256` signing algorithm.\n* Are signed with a key that can be verified by the secret you provide when you configure the custom JWT authentication provider.\n* Contain an audience claim that matches the one you specified when you configure the provider, if applicable. ## Procedures ### View Authentication Providers To view the embedding authentication providers you have configured: 1 #### Go to the Authentication Settings view. 1. If Charts is not already displayed, clickCharts in the navigation bar.\n2. Click Embedding in the sidebar.\n3. Click the Authentication Settings tab. 2 #### View the configured authentication providers in the Authentication providers section. ### Add an Authentication Provider To add an embedding authentication provider: 1 #### Go to the Authentication Settings view. 1. If Charts is not already displayed, clickCharts in the navigation bar.\n2. Click Embedding in the sidebar.\n3. Click the Authentication Settings tab. 2\n\n 3 #### In the Name field, enter a descriptive name for the provider. 4 #### From the Provider list, select the type of provider you want to add. 5 #### Configure Charts to verify tokens from the provider. The values you must enter differ based on the provider you selected:\n\n 6 #### Click Save. ### Modify an Authentication Provider To modify an embedding authentication provider: 1 #### Go to the Authentication Settings view. 1. If Charts is not already displayed, clickCharts in the navigation bar.\n2. Click Embedding in the sidebar.\n3. Click the Authentication Settings tab. 2 #### From the Embedding providers section, click Edit next to the provider you want to modify. 3 #### Modify the values that Charts uses to verify tokens from the provider. See [Add an Authentication Provider](#std-label-add-auth-provider-steps) for the values you can modify for the provider type you configured. 4 #### Click Save. ### Delete an Authentication Provider To delete an embedding authentication provider: 1 #### Go to the Authentication Settings view. 1. If Charts is not already displayed, clickCharts in the navigation bar.\n2. Click Embedding in the sidebar.\n3. Click the Authentication Settings tab. 2 #### From the Embedding providers section, click Delete next to the provider you want to delete. 3 #### Click Delete to confirm. ## Important After you delete a provider, all embedded charts that the deleted provider authenticated no longer render. ### Generate an Embedding Key ## Note Only users with the [Project Owner](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) role can see this section. ## Important Embedding keys are deprecated and will be removed in a future release. Use [Embedding Authentication Providers](#std-label-configure-auth-providers) and the [Embedding SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/) instead. Embedding keys are necessary for generating and verifying digital signatures of charts embedded using the Verified Signature\\`mode. To generate a new embedding key, click the Generate New Keybutton on the right side of the page. ## Warning If you generate a new key, any previous keys become invalid. Ensure that all the existing embedded charts that use an old key are updated to use the new key. ← [Get Started with the Embedding SDK](https://mongodb.com/docs/charts/get-started-embedding-sdk/ \"Previous Section\")[Handle Click Events](https://mongodb.com/docs/charts/handle-click-events/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/build-charts-reference/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Chart Building Reference [Subset Mode](https://mongodb.com/docs/charts/subset-mode/#std-label-charts-subset-mode) Learn how MongoDB Charts samples data to improve rendering performance. [Backing Aggregation Pipeline](https://mongodb.com/docs/charts/aggregation-pipeline-generation/#std-label-aggregation-pipeline-generation) Learn how MongoDB Charts creates an aggregation pipeline based on your chart configuration to render data. ← [View and Export Chart Data](https://mongodb.com/docs/charts/view-export-chart-data/ \"Previous Section\")[Subset Mode](https://mongodb.com/docs/charts/subset-mode/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/dashboards-embedding-sdk/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Embed Dashboards with the Embedding SDK You can embed a dashboard into a web application with the[Embedding SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/#std-label-embedding-charts-sdk), which allows you to make more flexible adjustments to dashboard settings and rendering. You can use the embedding SDK to do the following tasks: * Change the size and style of the dashboard\n* Refresh on demand To embed a dashboard with the SDK, you need to: 1. Enable embedding for the dashboard.\n2. Have the dashboard ID and base URL strings. To learn more, see [Get Started with the Embedding SDK.](https://mongodb.com/docs/charts/get-started-embedding-sdk/#std-label-get-started-embedding-sdk) ← [Embed Dashboards with an iframe](https://mongodb.com/docs/charts/embedding-dashboards-iframe/ \"Previous Section\")[Embedded Dashboard Options](https://mongodb.com/docs/charts/embedded-dashboard-options/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/tutorial/movie-details/prereqs-and-import-data/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Load the Sample Data On this page * [Prerequisites](#prerequisites)\n* [Load the Sample Data into Your Atlas Cluster](#load-the-sample-data-into-your-service-cluster)\n* [Next Steps](#next-steps) _Estimated Time to Complete: 10 minutes_ ## Prerequisites To complete this tutorial you will need a[MongoDB Atlas](https://www.mongodb.com/cloud/atlas) cluster. Refer to the [Create a Cluster](https://www.mongodb.com/docs/atlas/create-new-cluster/) documentation for instructions on creating an Atlas cluster. ## Load the Sample Data into Your Atlas Cluster Atlas provides sample data you can load into your Atlascluster. To load sample data into your cluster: 1 ### Log in to Atlas. Log in to your Atlas account at [https://cloud.mongodb.com.](https://cloud.mongodb.com) 2 ### Navigate to your Atlas Database Deployments view. Click Database in the sidebar. 3 ### Load the sample dataset. 1. Click the Ellipses (...) button for your cluster.\n2. Click Load Sample Dataset. Atlas begins loading your sample data. This operation takes approximately 5 minutes to complete. The following is a sample document from the dataset:\n\n ` ## Next Steps Now that you have a data source in Charts, you can [Create a New Dashboard](https://mongodb.com/docs/charts/tutorial/movie-details/create-dashboard/#std-label-movie-data-new-dash) which will hold the visualizations. ← [Visualizing Movie Details](https://mongodb.com/docs/charts/tutorial/movie-details/movie-details-tutorial-overview/ \"Previous Section\")[Create a New Dashboard](https://mongodb.com/docs/charts/tutorial/movie-details/create-dashboard/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/filter-chart-results/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Filter Chart Results On this page * [Create Filters for Your Data](#create-filters-for-your-data)\n* [Display Strings and ObjectIds Not in the List](#display-strings-and-objectids-not-in-the-list)\n* [Specify a Time Zone](#specify-a-time-zone)\n* [Enable or Disable a Filter](#enable-or-disable-a-filter)\n* [Expand or Collapse a Filter](#expand-or-collapse-a-filter)\n* [Filter Your Data Using the Query Bar](#filter-your-data-using-the-query-bar)\n* [Address Query Errors](#address-query-errors)\n* [Considerations](#considerations) Filters display a subset of results that match a given criteria.MongoDB Charts provides two ways to filter the data for a single chart. You can either use: * The [Filter Tab's](#std-label-filter-tab) numeric, string, date, or boolean fields to handle most of your data filtering needs.\n* The [Query Bar](#std-label-query-bar) to filter your data using more complex queries, such as logical operator queries, or process raw data by using the aggregation pipeline. To learn how to filter results across multiple charts on your dashboard, see[Filter Dashboards by Field Values.](https://mongodb.com/docs/charts/dashboard-filtering/#std-label-dashboard-filtering) ## Create Filters for Your Data The chart builder contains a filter tab where you can drag and drop fields to specify filters for your data. To filter data using the filter tab: 1. Click the center tab in the chart builder:  \n![Image showing how to access filter tab](https://mongodb.com/docs/charts/images/charts/filter-tab.png)\n2. Drag a field from the Fields on the left to theChart Filters section of the tab. The data type of the selected field determines the available filtering options. You can filter fields with the following data types: ## Note You cannot use the same field in multiple filters. ### Enable or Disable a Filter You can toggle whether a filter in the Filter tab is enabled or disabled. Disabled filters do not affect the documents which appear in the chart. Disabled filters are grayed out and cannot be edited until they are enabled. To toggle whether a filter is enabled, hover over a filter and set the toggle that appears at the top of the filter to the desired setting. ![Image showing filter toggle](https://mongodb.com/docs/charts/images/charts/filter-tab-disable-toggle.png) ### Expand or Collapse a Filter You can expand or collapse chart filter cards by clickingShow or Hide on that card. Disabled filters are automatically collapsed. Enabled, collapsed filters are still applied to your charts. ## Filter Your Data Using the Query Bar The Query bar above the chart display supports more complex queries than the filter panel. Additionally, you can use the query bar to create[aggregation pipelines](https://www.mongodb.com/docs/manual/core/aggregation-pipeline/) to process your data before it is rendered. To filter data using the Query bar: 1. In the Query bar, input a filter document. Use the same syntax used in the query portion of the[db.collection.find()](https://www.mongodb.com/docs/manual/reference/method/db.collection.find/) method. Your filter document must be in curly brackets.\n2. Click Apply. The following tabs show how to construct queries with the following operators: * `$or` logical operator to match documents where at least one clause is true\n* `$exists` query operator to match documents with an element that exists\n* `$regex` query operator to match documents with a regular expression\n* `Date` field to match documents with specific dates ### Address Query Errors If your query is invalid, Charts displays the icon in the Query bar. Click the Query bar if it is not already displayed to view error details. Charts displays error details for: * Client-side errors, such as malformed JSON, and\n* Server-side errors, such as invalid MQL. ![Example Filter Error](https://mongodb.com/docs/charts/images/charts/filter-error.png) Review the error details, then adjust your query accordingly. ## Considerations\n\n ← [Save and Reuse Queries](https://mongodb.com/docs/charts/query-library/ \"Previous Section\")[Bin, Sort, and Limit Your Data](https://mongodb.com/docs/charts/bin-data/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/tutorial/movie-details/create-dashboard/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Create a New Dashboard _Estimated Time to Complete: 2 minutes_ ## Instructions Now that you have created your data source and linked it to the order data collection, create a [dashboard](https://mongodb.com/docs/charts/dashboards/)to hold your visualizations: 1. In MongoDB Charts, click Dashboards in the sidebar.\n2. Click the New Dashboard button.\n3. Copy the following into the Title input:  \n`| Movie Details |  \n| ------------- |  \n`\n1. Copy the following into the Description input:  \n```  \nInsights from the Sample Mflix dataset.  \n```\n2. Click Create. After clicking create, Charts navigates you to your newly created dashboard and prompts you to add your first chart. ## Next Steps Follow along to the next section of the tutorial to build a[column chart](https://mongodb.com/docs/charts/tutorial/movie-details/column-chart-director-awards/#std-label-add-first-chart) showing directors who won the most awards. ← [Load the Sample Data](https://mongodb.com/docs/charts/tutorial/movie-details/prereqs-and-import-data/ \"Previous Section\")[Column Chart Showing Directors with the Most Awards](https://mongodb.com/docs/charts/tutorial/movie-details/column-chart-director-awards/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/get-started-embedding-sdk/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Get Started with the Embedding SDK On this page * [Prerequisites](#prerequisites)\n* [Procedures](#procedures)\n* [Enable Embedding](#enable-embedding)\n* [Create a Web App](#create-a-web-app)\n* [Add Embedding Code to Your App](#add-embedding-code-to-your-app) You can embed a chart or dashboard into a web application with the[Embedding SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/#std-label-embedding-charts-sdk), allowing more flexible adjustments of settings and rendering. ## Prerequisites * You must be a dashboard [Author](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-permissions) to enable embedding for a chart.\n* [Create a New Dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-create-new-dashboard)\n* [Create a Chart](https://mongodb.com/docs/charts/build-charts/#std-label-create-new-chart) ## Procedures ### Enable Embedding ### Create a Web App ### Add Embedding Code to Your App To learn how to install the Embedding SDK into your app, see[Install the Embedding SDK.](https://mongodb.com/docs/charts/embedding-charts-sdk/#std-label-embedding-sdk-install) ← [Embedding SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/ \"Previous Section\")[Configure Embedding Authentication Providers](https://mongodb.com/docs/charts/configure-auth-providers/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/tutorial/movie-details/arrange-charts/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Arrange the Charts on the Dashboard _Estimated Time to Complete: 2 minutes_ Now that you have two charts on your dashboard, you can arrange them for maximum legibility. These two charts are horizontally oriented, so you may wish to make them wider and stack them one above the other. You can change the shape of each chart by clicking and dragging on the lower right corner of the chart, and you can move them around the page by clicking and dragging on the upper left corner of the chart. ## Tip ### See also:  [Manage Existing Dashboards](https://mongodb.com/docs/charts/manage-dashboards/#std-label-manage-existing-dashboards) Your finished dashboard should look similar to this: ![Finished Tutorial Dashboard](https://mongodb.com/docs/charts/images/charts/movie-tutorial-dashboard-final.png) ## Wrapping Up You now have a dashboard which provides easily accessible insight into award winning directors and award nominated films. Try adding additional charts to the dashboard and see what other interesting insights you can discover. ← [Scatter Chart of Award-Nominated Movies with Their TomatoMeter Rating](https://mongodb.com/docs/charts/tutorial/movie-details/scatter-chart-movies-ratings/ \"Previous Section\")[Dashboards](https://mongodb.com/docs/charts/dashboards/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/tutorial/movie-details/column-chart-director-awards/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Column Chart Showing Directors with the Most Awards _Estimated Time to Complete: 5 minutes_ To create each chart, you will populate the chart's[encoding channels](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) with fields from your schema. [Encoding channels](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) represent the information passed to MongoDB Charts which allows Charts to create the visualization. ## Construct the Chart To discover which directors of films represented in this dataset have won the most awards, use the `directors` and `awards.wins` database fields in your chart. The `genres` field provides additional insight into the specific genres of the films for which these directors have won awards. A [column chart](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref) makes it easy to sort and compare fields with numerical values, so it is a good choice for this use case. 1 ### Click Add Chart. 2 ### Select the `sample_mflix.movies` data source. In the Select Data Source modal that appears: 1. Click the Project tab.\n2. Click the name of the deployment that contains the sample data source.\n3. Click the `sample_mflix` database. The database's data sources appear.\n1. Click Select on the `movies` data source. 3 ### Select the Chart Type. 1. In the Chart Type dropdown menu, selectColumn.\n2. Select the panel labeled Stacked below the Chart Type dropdown menu. 4 ### Add the desired fields to the proper encoding channels. 1. Drag the `directors` field from the Fieldssection of the Chart Builder view to the X Axisencoding channel.\n2. In the `directors` Array Reductions dropdown, select Unwind Array.\n3. In the Fields section click the `awards` field to expand the `awards` object and view its properties.\n4. Drag the `awards.wins` field to the Y Axisencoding channel. The Y Axis encoding channel determines which field to use for the chart's[aggregation.](https://www.mongodb.com/docs/manual/aggregation/)\n5. Leave the Aggregate dropdown menu for theY Axis encoding channel on its default value of sum. This value directs the aggregation operation to return the total number of award wins for each director. ## Example ### Aggregation [Aggregation](https://www.mongodb.com/docs/manualaggregation/) processes data records using a wide variety of methods and returns computed results which may not be available in the original dataset. Because we are interested in the total number of awards won by each director, we use the `awards.wins` field here and will use an aggregation operator which will allow us to add up the total wins for each director. 5 ### Apply a limit to the X axis. At this point there are too many columns in our X axis to show any meaningful results. To bring the number down to a manageable level, we'll apply a [limit](https://mongodb.com/docs/charts/bin-data/#std-label-charts-limit-data) to get the ten directors with the most award wins. The `directors` array is already sorted by the aggregated value of `wins` in descending order. To apply a limit to the number of columns in the X Axis: 1. Toggle Limit Results to On.\n2. Set Show to `10`. 6 ### Group awards by genre. 1. Drag the `genres` field to the Series encoding channel.\n2. In the Array Reductions dropdown menu, select`unwind array`. The X axis columns are now broken down by movie genre.  \n## Note  \nSome movies contain more than one genre, so the numbers shown in the columns may not be the exact number of awards for each director. 7 ### Title your chart.\n\n ## Next Steps Follow along to the next section of the tutorial to build a[scatter chart](https://mongodb.com/docs/charts/tutorial/movie-details/scatter-chart-movies-ratings/#std-label-add-scatter-chart) of award-nominated movies and their respective TomatoMeter ratings. ← [Create a New Dashboard](https://mongodb.com/docs/charts/tutorial/movie-details/create-dashboard/ \"Previous Section\")[Scatter Chart of Award-Nominated Movies with Their TomatoMeter Rating](https://mongodb.com/docs/charts/tutorial/movie-details/scatter-chart-movies-ratings/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/tutorial/order-data/area-chart-age-distribution/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Area Chart Showing Age Distribution of Customers _Time to Complete: 5 minutes_ In the final chart of the dashboard, highlight some of the customer analytic information available in the schema using an[area chart](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-line-area-chart-ref). By visualizing the age range and distribution of store customers, you can ensure that any advertising the store performs is directed where it will be seen by the most potential buyers. ## Construct the Chart 1 ### At the top-right corner of the dashboard, click Add Chart. 2 ### Select the `sample_supplies.sales` data source. In the Select Data Source modal that appears: 1. Click the Project tab.\n2. Click the name of the deployment that contains the sample data source.\n3. Click the `sample_supplies` database. The database's data sources appear.\n1. Click Select on the `sales` data source. 3 ### Select the Chart Type 1. In the Chart Type dropdown, selectArea.\n2. Click Discrete below the dropdown. ## Example ### Area Chart An area chart is a good choice to easily visualize the ages where customers are the most concentrated. Since you are not concerned with exact values in this scenario but rather general trends, an area chart makes more sense than a line chart because the filled-in visualization allows us to more easily identify the most common age ranges. We use a discrete area chart, rather than continuous, because we are ultimately looking for a count of the customers in each particular age bracket determined by the chart's[bin size](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data). Discrete charts allow us to perform aggregation operations on the data, whereas in a continuous chart each data point must come from a distinct document. 4 ### Add the desired fields to the proper encoding channels. 1. In the Fields section click the `customer` field to expand the `customer` object and view its properties.\n2. Drag the `customer.age` field to the X Axisencoding channel. The X Axis encoding channel dictates which field to display on the horizontal axis.\n3. Set the Bin Size to `5`.  \n## Example  \n### Data Binning  \nBinning data groups continuous data into bins of a specified size. In this case, rather than plotting points for each individual age in the dataset, the data is grouped into bins of `5` ages. This provides a clearer look into the overall trend of the age distribution.  \nFor more information on data binning, see the[Data Binning](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data) section.\n4. Drag the `_id` field to the Y Axisencoding channel. The Y Axis encoding channel determines which field to use for the chart's[aggregation.](https://www.mongodb.com/docs/manual/aggregation/)  \n## Example  \n### Y Axis Encoding Channel  \nBecause we will be performing a [$count](https://www.mongodb.com/docs/manual/reference/operator/aggregation/count/) aggregation on the documents, it does not matter what field we use for this encoding channel because the chosen field does not affect the number of documents in each bin.\n5. In the Y Axis Aggregate dropdown, selectcount. This option counts the occurrence of each customer age from each sale and adds it to the visualization after placing it in the appropriate bin. Your chart should now look something like this: ![Area Chart Builder](https://mongodb.com/docs/charts/images/charts/tutorial-area-in-progress-2.png) Customers appear to be mostly between the ages `40-45`. This is where the largest area region in the chart occurs. Additionally, the rest of the ages appear to be[normally distributed](https://en.wikipedia.org/wiki/Normal%5Fdistribution), meaning the average customer age is at the center of the area chart and there are the same number of younger and older customers. You can use this information to direct advertising where the largest customer age group is most likely to see company advertisements. 5 ### Title your chart.\n\n 6 ### Click Save and Close at the top-left of the chart builder view. After adding the last chart to your dashboard and performing some final reorganizing, the finished dashboard should look something like this: ![Finished Tutorial Dashboard](https://mongodb.com/docs/charts/images/charts/order-tutorial-dashboard-final.png) ## Wrapping Up You now have an effective orders dashboard which provides easily accessible insight into revenue data, sales details, and customer analytics. However, with the information you have available in your dataset, there are several ways in which you might be able to add additional charts and extend the dashboard even further. You may want to depict: * Average customer satisfaction by store location\n* The amount of money that customers in various age groups typically spend on a purchase\n* Which items are most commonly bought in bulk, utilizing the`items.quantity` field Try adding some of these additional charts to the dashboard and see what other interesting correlations between variables you can discover. ← [Rearrange and Resize Charts](https://mongodb.com/docs/charts/tutorial/order-data/rearrange-resize/ \"Previous Section\")[Visualizing Movie Details](https://mongodb.com/docs/charts/tutorial/movie-details/movie-details-tutorial-overview/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/tutorial/movie-details/scatter-chart-movies-ratings/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Scatter Chart of Award-Nominated Movies with Their TomatoMeter Rating _Estimated Time to Complete: 5 minutes_ ## Construct the Chart Next, add a chart to your dashboard showing the TomatoMeter rating and MPAA rating of movies with the most award nominations. A[scatter chart](https://mongodb.com/docs/charts/chart-type-reference/scatter-chart/#std-label-scatter-chart-ref) is a good choice for visualizing how data points cluster together around certain values and allows the representation of several different data dimensions. 1 ### Click Add Chart. The Add Chart button is in the top right corner of the dashboard. 2 ### Select the `sample_mflix.movies` data source. In the Select Data Source modal that appears: 1. Click the Project tab.\n2. Click the name of the deployment that contains the sample data source.\n3. Click the `sample_mflix` database. The database's data sources appear.\n1. Click Select on the `movies` data source. 3 ### Select the Chart Type. 1. In the Chart Type dropdown, selectGrid.\n2. Select the Scatter panel below the dropdown menu. 4 ### Add the desired fields to the proper encoding channels. 1. In the Fields section, click the `tomatoes` field to expand the `tomatoes` object and view its properties.\n2. Click the `tomatoes.critic` field to also expand that object.\n3. Drag the `tomatoes.critic.rating` field to the X Axis [encoding channel.](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels)\n4. In the Fields section click the `awards` field to expand the `awards` object and view its properties.\n5. Drag the `awards.nominations` field to the Y Axisencoding channel. 5 ### Add a query filter. You can see now that higher-rated movies have a higher density of awards, but the chart is rather noisy. Add a query filter to only include movies with at least 30 award nominations and marginal MPAA ratings. 1. In the Filters box, add the following query filter and click the Apply button:  \n`| {\"awards.nominations\": {$gte: 30}, rated: {$in: [\"G\", \"PG\", \"PG-13\", \"R\"]}} |  \n| --------------------------------------------------------------------------- |  \n` 6 ### Differentiate the chart by MPAA rating. In the Fields section, drag the `rated` field to the Color [encoding channel.](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) ## Example ### Additional Data Options There are three options for adding more data to your chart. You can use any of your data fields to modify the size, color, and shape of the markers on the grid. The `rated` field works well here because it has low cardinality; there are only four possible values (`G`, `PG`, `PG-13`, and `R`). Fields with higher cardinality may make the chart too noisy to read. 7 ### Title your chart. 1. Hover over your chart title above the center of the chart and click the pencil icon.\n2. Copy the following into the chart title input:  \n```  \nMovies with Most Awards Nominations, by MPAA Rating  \n```\n3. Click the check mark to save your title.\n4. Your chart should now look like this:  \n![Movies with the most awards by rating](https://mongodb.com/docs/charts/images/charts/tutorial2-most-awards-by-rating.png)\n5. Click Save and Close to return to your dashboard. ## Next Steps Follow along to the next section of the tutorial to see how we can[rearrange the charts on the dashboard.](https://mongodb.com/docs/charts/tutorial/movie-details/arrange-charts/#std-label-arrange-charts) ← [Column Chart Showing Directors with the Most Awards](https://mongodb.com/docs/charts/tutorial/movie-details/column-chart-director-awards/ \"Previous Section\")[Arrange the Charts on the Dashboard](https://mongodb.com/docs/charts/tutorial/movie-details/arrange-charts/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/tutorial/movie-details/movie-details-tutorial-overview/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Visualizing Movie Details On this page * [Introduction](#introduction)\n* [Table of Contents](#table-of-contents) _Total Estimated Time to Complete: 20-30 minutes_ ## Introduction This tutorial explores features and capabilities of MongoDB Charts with a [data source](https://mongodb.com/docs/charts/data-sources/) containing the `Mflix` [sample data provided by Atlas](https://www.mongodb.com/docs/atlas/sample-data/sample-mflix/). This sample data contains information on movies such as release year, cast, and reviews. With this tutorial, you will learn how to use filters to refine a large result set down to an easily understandable chart, and use multi-series charts to gain further insight into the data. In this tutorial, you'll create two charts: a sorted column chart and a scatter chart. * The [sorted column chart](https://mongodb.com/docs/charts/tutorial/movie-details/column-chart-director-awards/#std-label-movie-details-column)displays columns representing the number of awards won by directors with at least 50 total awards, sorted from highest to lowest and broken down by film genre.\n* The [scatter chart](https://mongodb.com/docs/charts/tutorial/movie-details/scatter-chart-movies-ratings/#std-label-movie-details-scatter) shows a diagram of movies with at least one award win along with their TomatoMeter rating and their MPAA rating (G, PG, PG-13, or R). ![Finished Tutorial Dashboard](https://mongodb.com/docs/charts/images/charts/movie-tutorial-dashboard-final.png) ## Table of Contents * Step 1: [Load the Sample Data](https://mongodb.com/docs/charts/tutorial/movie-details/prereqs-and-import-data/)\n* Step 2: [Create a New Dashboard](https://mongodb.com/docs/charts/tutorial/movie-details/create-dashboard/)\n* Step 3: [Column Chart Showing Directors with the Most Awards](https://mongodb.com/docs/charts/tutorial/movie-details/column-chart-director-awards/)\n* Step 4: [Scatter Chart of Award-Nominated Movies with Their TomatoMeter Rating](https://mongodb.com/docs/charts/tutorial/movie-details/scatter-chart-movies-ratings/)\n* Step 5: [Arrange the Charts on the Dashboard](https://mongodb.com/docs/charts/tutorial/movie-details/arrange-charts/) To get started, move ahead to the[Load the Sample Data](https://mongodb.com/docs/charts/tutorial/movie-details/prereqs-and-import-data/) page. ← [Area Chart Showing Age Distribution of Customers](https://mongodb.com/docs/charts/tutorial/order-data/area-chart-age-distribution/ \"Previous Section\")[Load the Sample Data](https://mongodb.com/docs/charts/tutorial/movie-details/prereqs-and-import-data/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/tutorial/order-data/rearrange-resize/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Rearrange and Resize Charts _Time to Complete: 2 minutes_ The dashboard is starting to get crowded at the top row with plenty of empty space below. You can make the display easier to digest by rearranging and resizing some of the charts. Charts makes this a straight-forward process by providing simple drag and drop capabilities for reorganizing a dashboard. ## Instructions You can rearrange charts by dragging the top-left corner of the chart, and resize charts by dragging the bottom-right corner. For additional details on rearranging and resizing charts, see the[Manage Existing Dashboards](https://mongodb.com/docs/charts/manage-dashboards/#std-label-manage-existing-dashboards) section. Try reorganizing your dashboard to get something like this: ![Organized Dashboard](https://mongodb.com/docs/charts/images/charts/order-tutorial-dashboard-organized.png) ## Next Steps In the last chart of the dashboard, we will explore some of the customer data available in the schema to create an[area chart](https://mongodb.com/docs/charts/tutorial/order-data/area-chart-age-distribution/#std-label-order-data-area-chart) showing the age distribution of customers. ← [Grouped Column Chart Showing Most Common Items Sold by Store Location](https://mongodb.com/docs/charts/tutorial/order-data/grouped-column-items-sold/ \"Previous Section\")[Area Chart Showing Age Distribution of Customers](https://mongodb.com/docs/charts/tutorial/order-data/area-chart-age-distribution/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/tutorial/order-data/column-chart-sales-by-store/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Column Chart Showing Total Sales by Store Location _Time to Complete: 5 minutes_ Looking at the data fields available in the schema, some of the most valuable information you can relay revolves around revenue. You may want to know how various stores are performing, specifically if there are any stores significantly under or overperforming compared to others. A [column chart](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref) works well for this type of visualization because you can easily compare individual store revenue based on the size of each column. ## Construct the Chart 1 ### Click Add Chart. 2 ### Select the `sample_supplies.sales` data source. In the Select Data Source modal that appears: 1. Click the Project tab.\n2. Click the name of the deployment that contains the sample data source.\n3. Click the `sample_supplies` database. The database's data sources appear.\n1. Click Select on the `sales` data source. 3 ### Select the Chart Type 1. In the Chart Type dropdown, selectColumn.\n2. Click Stacked below the dropdown. ## Example ### Column Chart This chart renders a column for each store location's revenue. Because there are six different store locations, the chart will contain six columns. 4 ### Add the desired fields to the proper encoding channels. 1. Drag the `storeLocation` property from the Fieldssection of the Chart Builder view to the X Axisencoding channel. This tells MongoDB Charts to create a column for each `storeLocation` value in the dataset.\n2. In the Fields section click the `items` field to expand the `items` object and view its properties.  \n## Note  \nMongoDB Charts infers the data type of each field and provides symbols to easily determine these data types when building your chart. For example, the calendar icon next to the `saleDate` field signifies that this field is a timestamp. These symbols can help ensure your chart renders as expected by using proper data types for each[encoding channel.](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels)\n3. Drag the `items.price` field to the Y Axisencoding channel. The Y Axis encoding channel determines which field to use for the chart's[aggregation.](https://www.mongodb.com/docs/manual/aggregation/)  \n## Example  \n### Aggregation  \n[Aggregation](https://www.mongodb.com/docs/manualaggregation/) processes data records using a wide variety of methods and returns computed results which may not be available in the original dataset. Because we are interested in the total revenue from each store, we use the `items.price` field here and will use an aggregation operator which will allow us to add the `items.price` fields together.\n4. In the Array Reductions dropdown, selectUnwind array.  \n## Example  \n### Unwind array  \nArray reductions dictate how to process an array so its elements can be visualized. The unwind arrayoption creates a new document for each element in the array, so each item's price is added to the total for that store.  \nFor more information on unwinding arrays, refer to the[unwind aggregation documentation.](https://www.mongodb.com/docs/manual/reference/operator/aggregation/unwind/)\n5. In the Aggregate dropdown, select sum.  \n## Example  \n### Sum  \nThis option adds the prices of all items per store together to display the chart. For more information on the `$sum`aggregation command, refer to the[sum aggregation documentation.](https://www.mongodb.com/docs/manual/reference/operator/aggregation/sum/) Your chart should now look something like this: ![Stacked Bar Chart Builder](https://mongodb.com/docs/charts/images/charts/tutorial-stacked-bar-in-progress-2.png) Notice that the stores generating the most revenue are the`Denver` and `Seattle` locations. 5 ### Title your chart. 1. Hover over your chart title above the center of the chart and click the pencil icon.\n2. Copy the following into the chart title input:  \n`| Total Sales ($) by Store Location |  \n| --------------------------------- |  \n`\n3. Click the check mark to save your title.\n\n ### Click Save and Close at the top right of the chart builder view. You will be navigated back to your Super Store Supply Sales dashboard and it should look something like this: ![Order Tutorial Dashboard Stage 1](https://mongodb.com/docs/charts/images/charts/order-tutorial-dashboard-stage1.png) ## Next Steps Now that we have a visualization showing a high-level overview of store revenue, one might wonder which type of item each store is selling the most of. The following section of the tutorial illustrates how to build a [donut chart](https://mongodb.com/docs/charts/tutorial/order-data/donut-chart-item-tags/#std-label-order-data-donut-chart) to analyze the tag names of items being sold. ← [Create a New Dashboard](https://mongodb.com/docs/charts/tutorial/order-data/create-new-dashboard/ \"Previous Section\")[Donut Chart Showing Most Common Tags for Items Sold](https://mongodb.com/docs/charts/tutorial/order-data/donut-chart-item-tags/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/tutorial/order-data/order-data-tutorial-overview/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Visualizing Order Data On this page * [Introduction](#introduction)\n* [Table of Contents](#table-of-contents) _Total Estimated Time to Complete: 20-30 minutes_ ## Introduction This tutorial explores features and capabilities of MongoDB Charts with a [data source](https://mongodb.com/docs/charts/data-sources/) containing the `Supply Store` [sample data provided by Atlas](https://www.mongodb.com/docs/atlas/sample-data/sample-supplies/). This sample data contains sales order data from a mock office supply company. This tutorial demonstrates how to create a[dashboard](https://mongodb.com/docs/charts/dashboards/) containing charts of various types and how to effectively use each chart's respective properties to obtain powerful visualizations. You will also learn how to use multi-series charts to gain further insight into the data. After completing the tutorial, you will have a dashboard which looks similar to the following: ![Finished Tutorial Dashboard](https://mongodb.com/docs/charts/images/charts/order-tutorial-dashboard-final.png) ## Table of Contents * Step 1: [Load the Sample Data](https://mongodb.com/docs/charts/tutorial/order-data/prerequisites-setup/)\n* Step 2: [Create a New Dashboard](https://mongodb.com/docs/charts/tutorial/order-data/create-new-dashboard/)\n* Step 3: [Column Chart Showing Total Sales by Store Location](https://mongodb.com/docs/charts/tutorial/order-data/column-chart-sales-by-store/)\n* Step 4: [Donut Chart Showing Most Common Tags for Items Sold](https://mongodb.com/docs/charts/tutorial/order-data/donut-chart-item-tags/)\n* Step 5: [Grouped Column Chart Showing Most Common Items Sold by Store Location](https://mongodb.com/docs/charts/tutorial/order-data/grouped-column-items-sold/)\n* Step 6: [Rearrange and Resize Charts](https://mongodb.com/docs/charts/tutorial/order-data/rearrange-resize/)\n* Step 7: [Area Chart Showing Age Distribution of Customers](https://mongodb.com/docs/charts/tutorial/order-data/area-chart-age-distribution/) To get started, move ahead to the[Setup and Import the Data](https://mongodb.com/docs/charts/tutorial/order-data/prerequisites-setup/#std-label-order-data-prerequisites-setup) page. ← [Tutorials](https://mongodb.com/docs/charts/tutorials/ \"Previous Section\")[Load the Sample Data](https://mongodb.com/docs/charts/tutorial/order-data/prerequisites-setup/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/tutorial/order-data/prerequisites-setup/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Load the Sample Data On this page * [Prerequisites](#prerequisites)\n* [Load the Sample Data into Your Atlas Cluster](#load-the-sample-data-into-your-service-cluster)\n* [Next Steps](#next-steps) _Time to Complete: 8 minutes_ ## Prerequisites To complete this tutorial you will need a[MongoDB Atlas](https://www.mongodb.com/cloud/atlas) cluster. Refer to the [Create a Cluster](https://www.mongodb.com/docs/atlas/create-new-cluster/) documentation for instructions on creating an Atlas cluster. ## Load the Sample Data into Your Atlas Cluster Atlas provides sample data you can load into your Atlascluster. To load sample data into your cluster: 1 ### Log in to Atlas. Log in to your Atlas account at [https://cloud.mongodb.com.](https://cloud.mongodb.com) 2 ### Navigate to your Atlas Database Deployments view. Click Database in the sidebar. 3 ### Load the sample dataset. 1. Click the Ellipses (...) button for your cluster.\n2. Click Load Sample Dataset. Atlas begins loading your sample data. This operation takes approximately 5 minutes to complete. Charts automatically connects to the supply store collection as a [data source.](https://mongodb.com/docs/charts/data-sources/#std-label-data-sources) ## Next Steps Now that you have loaded the sample data, you can [Create a New Dashboard](https://mongodb.com/docs/charts/tutorial/order-data/create-new-dashboard/#std-label-order-data-new-dash) which will use this data source to create visualizations. ← [Visualizing Order Data](https://mongodb.com/docs/charts/tutorial/order-data/order-data-tutorial-overview/ \"Previous Section\")[Create a New Dashboard](https://mongodb.com/docs/charts/tutorial/order-data/create-new-dashboard/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/tutorial/order-data/donut-chart-item-tags/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Donut Chart Showing Most Common Tags for Items Sold _Time to Complete: 5 minutes_ Next we will add a chart where you can quickly see which types of items the company is selling the most of. This information will be helpful for the company marketing team to know how effectively direct advertising. In this scenario, your manager has expressed interest specifically in items sold from the `Denver` and `New York` store locations. Additionally, they have requested to only visualize sales which contain an item costing `$1200` or more, in an effort to more closely examine the new line of laptops being sold at these locations and what types of items are being bought with them. You can accomplish this using a [filter](https://mongodb.com/docs/charts/filter-chart-results/#std-label-charts-filter-documents) in your[donut chart](https://mongodb.com/docs/charts/chart-type-reference/donut-chart/#std-label-donut-chart-ref), as shown in the following procedure. ## Construct the Chart 1 ### At the top-right corner of the dashboard, click Add Chart. 2 ### Select the `sample_supplies.sales` data source. In the Select Data Source modal that appears: 1. Click the Project tab.\n2. Click the name of the deployment that contains the sample data source.\n3. Click the `sample_supplies` database. The database's data sources appear.\n1. Click Select on the `sales` data source. 3 ### Select the Chart Type 1. In the Chart Type dropdown, selectCircular.\n2. Click Donut below the dropdown. ## Example ### Donut Chart A donut chart is a good choice for this chart because donut charts show the relationship of parts to a whole. Using this chart type you can easily get an idea of which tags make up the greatest portion of total sales. 4 ### Add the desired fields to the proper encoding channels. 1. In the Fields section click the `items` field to expand the `items` object and view its properties.\n2. Drag the `items.tags` field to the Labelencoding channel. The Label encoding channel dictates which field to use when dividing the sections of the chart.\n3. In the array reduction dropdown for the`items` array select Unwind array.\n4. In the array reduction dropdowns for the`tags` select Array element by index. Using this option you can specify which element of the `tags` array to visualize.\n5. Enter `0` for the Index input to only visualize the first element of the `tags` array. The first item tag is the most relevant tag to the item, so it should be the main concern in the visualiztion. This is the _primary_ item tag.  \n## Note  \nSelecting an array element by index also ensures the chart does not get overcrowded with less important tags as it would had you chosen to unwind the `tags` array rather than select a specific element.\n6. Drag the `id` field to the Arcencoding channel.\n7. In the Aggregate dropdown, select count. This option counts the occurrences of the first tag of each item and adds them to the chart. Your chart should now look something like this: ![Donut Chart Builder](https://mongodb.com/docs/charts/images/charts/tutorial-donut-in-progress-2.png) 5 ### Copy the following filter into the Query input above the main chart display. `| { storeLocation: { $in: [ \"Denver\", \"New York\" ] }, 'items.price': {$gte: 1200} } |\n| --------------------------------------------------------------------------------- | ` This [filter](https://mongodb.com/docs/charts/filter-chart-results/#std-label-charts-filter-documents) specifies thatCharts only visualizes item tags from items sold from either the `Denver` or `New York` store location where there was an item in the sale costing `$1200` or more. 6 ### Click Apply to the right of the filter. Your chart should now look something like this: ![Edit Chart Add Filter](https://mongodb.com/docs/charts/images/charts/order-tutorial-edit-add-filter-2.png) Notice how the `electronics` tag now takes a larger slice of the distribution compared to when not using the filter. Based on this chart, notice that `office` and `school` are the two most common primary item tags from sales matching the filter. 7 ### Title your chart.\n\n 8 ### Click Save and Close at the top-left of the chart builder view. Your dashboard should now look something like this: ![Order Tutorial Dashboard Stage 2](https://mongodb.com/docs/charts/images/charts/order-tutorial-dashboard-stage2.png) ## Next Steps Now that we have a chart showing the tags of the items sold, it would be helpful to know which specific items are most commonly sold at the various store locations. To do so, refer to the next section to see how to implement a [grouped column chart](https://mongodb.com/docs/charts/tutorial/order-data/grouped-column-items-sold/#std-label-order-data-grouped-column)showing the most common items sold by store location. ← [Column Chart Showing Total Sales by Store Location](https://mongodb.com/docs/charts/tutorial/order-data/column-chart-sales-by-store/ \"Previous Section\")[Grouped Column Chart Showing Most Common Items Sold by Store Location](https://mongodb.com/docs/charts/tutorial/order-data/grouped-column-items-sold/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/tutorial/order-data/grouped-column-items-sold/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Grouped Column Chart Showing Most Common Items Sold by Store Location _Time to Complete: 5 minutes_ By visualizing which items are sold most commonly at each store, you can help ensure each store is properly stocked with the items they are most likely to sell out of. A grouped[column chart](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref) creates a group within the chart for each store location and display columns within each group reflecting the relative sales of each item. ## Construct the Chart 1 ### At the top-right corner of the dashboard, click Add Chart. 2 ### Select the `sample_supplies.sales` data source. In the Select Data Source modal that appears: 1. Click the Project tab.\n2. Click the name of the deployment that contains the sample data source.\n3. Click the `sample_supplies` database. The database's data sources appear.\n1. Click Select on the `sales` data source. 3 ### Select the Chart Type 1. In the Chart Type dropdown, selectColumn.\n2. Click Grouped below the dropdown. 4 ### Add the desired fields to the proper encoding channels. 1. Drag the `storeLocation` field to the X Axisencoding channel. The X Axis encoding channel dictates which field to use when creating the column groups.  \n## Example  \n### X Axis Encoding Channel  \nUsing `storeLocation` for this encoding channel allows us to visualize a group of items per store location.\n2. In the Fields section click the `items` field to expand the `items` object and view its properties.\n3. Drag the `items.name` field to the Y Axisencoding channel. The Y Axis encoding channel determines which field to use for the chart's[aggregation.](https://www.mongodb.com/docs/manual/aggregation/)  \n## Example  \n### Y Axis Encoding Channel  \nUsing `items.name` for this encoding channel allows us to aggregate and count the items sold in each location.\n4. In the Array Reductions dropdown, selectUnwind array.\n5. In the Aggregate dropdown, select count.  \n## Example  \n### Count  \nThe count option counts the occurrences of each item name after unwinding the `items` array and displays them in the chart grouped by store location.  \nFor more information on the `$count` aggregation command, refer to the[count aggregation documentation.](https://www.mongodb.com/docs/manual/reference/operator/aggregation/count/)\n6. Drag the `items.name` field to the Series encoding channel.  \n## Example  \n### Series Encoding Channel  \nThe Series encoding channel dictates how to split each group of the chart. Each member of the series becomes a column within the group, so each item name becomes a column within the store location group.\n7. In the Series Array Reductions dropdown, selectUnwind array. Your chart should now look something like this: ![Grouped Column Chart Builder](https://mongodb.com/docs/charts/images/charts/tutorial-grouped-column-in-progress-2.png) The item sales look to be fairly evenly distributed by store location. Notice based on this chart that `notepads` are the most common item sold at all store locations, which is useful information when stocking each store with its inventory. 5 ### Title your chart. 1. Hover over your chart title and click the pencil icon.\n2. Copy the following into the title input:  \n`| Most Common Items Sold by Store Location |  \n| ---------------------------------------- |  \n`\n3. Click the check mark to save your title. 6 ### Click Save and Close at the top-left of the chart builder view. Your dashboard should now look something like this: ![Order Tutorial Dashboard Stage 3](https://mongodb.com/docs/charts/images/charts/order-tutorial-dashboard-stage3.png) ## Next Steps Now that we have a few charts the dashboard is starting to get a bit crowded. Follow along to the next section of the tutorial to see how we can [rearrange and resize](https://mongodb.com/docs/charts/tutorial/order-data/rearrange-resize/#std-label-order-data-rearrange-resize) the charts to make the dashboard easier to digest.\n\n",
  "https://www.mongodb.com/docs/charts/tutorial/order-data/create-new-dashboard/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Create a New Dashboard _Time to Complete: 3 minutes_ ## Instructions Now that you have created your data source, create a dashboard to hold all of your visualizations: 1. Click Dashboards in the sidebar.\n2. Click the New Dashboard button.\n3. Copy the following into the Title input:  \n`| Super Supply Store Orders |  \n| ------------------------- |  \n`\n1. Copy the following into the Description input:  \n```  \nSales, Customer Analytics, and More.  \n```\n2. Click Create. After clicking create, Charts navigates you to your newly created dashboard and prompts you to add your first chart. ## Next Steps The following sections of the tutorial walk through[building each chart](https://mongodb.com/docs/charts/build-charts/) for your dashboard. You will be populating the dashboard with the following visualizations: * A [column chart](https://mongodb.com/docs/charts/tutorial/order-data/column-chart-sales-by-store/#std-label-order-data-column-chart) for total sales by store location\n* A [donut chart](https://mongodb.com/docs/charts/tutorial/order-data/donut-chart-item-tags/#std-label-order-data-donut-chart) showing the frequencies of tags occurring in each item sold\n* A [grouped column chart](https://mongodb.com/docs/charts/tutorial/order-data/grouped-column-items-sold/#std-label-order-data-grouped-column) showing the most common items sold in each store location\n* An [area chart](https://mongodb.com/docs/charts/tutorial/order-data/area-chart-age-distribution/#std-label-order-data-area-chart) showing a distribution of customer ages To create each chart, you will populate the chart's[encoding channels](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) with fields from your schema. Encoding channels represent the information passed toMongoDB Charts which allows Charts to create the visualization. For more information on encoding channels and the different types of channels available, refer to the[encoding channels section](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) of the documentation. Follow along to the next section of the tutorial to build a[column chart](https://mongodb.com/docs/charts/tutorial/order-data/column-chart-sales-by-store/#std-label-order-data-column-chart) showing total sales by store location. ← [Load the Sample Data](https://mongodb.com/docs/charts/tutorial/order-data/prerequisites-setup/ \"Previous Section\")[Column Chart Showing Total Sales by Store Location](https://mongodb.com/docs/charts/tutorial/order-data/column-chart-sales-by-store/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/release-notes/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # MongoDB Charts Release Notes On this page\n\n ## MongoDB Charts v1.36.1 _Released February 22nd, 2023_ Improvements in this release: * Users can now load various[sample dashboards](https://mongodb.com/docs/charts/dashboards/#std-label-sample-dashboard) in MongoDB Charts, including Product, Sales, Observability, and IoT data dashboards.\n* Developers can use the SDK to[filter data in embedded dashboards](https://mongodb.com/docs/charts/filter-embedded-dashboards/#std-label-filter-embedded-dashboards) with embedded dashboard filters and user injected filters.\n* Developers can now use the SDK to download an embedded chart as a binary or base64 image.\n* Charts and Dashboard authors can now enable the embedding settingAllow all fields in the data sources used in this dashboardto quickly allow all the fields in a data source to be used as filters for embedded charts and dashboards.\n* In the side navigation panel, Data Usage is now namedData Transfer.\n* Improved the process for saving an imported dashboard. Bug fixes in this release: * `getFilter` and `getHighlight` SDK methods now return values in a consistent format.\n* Fixes an issue with bin sizes displaying incorrectly after using array reduction.\n* Fixes an issue where applying dashboard filters would render charts blank.\n* Fixes an issue where Charts returned a disk use error when refreshing data sources.\n* Fields now render correctly when lookup fields have an empty array.\n* Nested fields now display correctly inside the dashboard filter pane.\n* Arabic and Slovenian dates now display correctly.\n* The background colors of charts in embedded dashboards now render correctly. ## MongoDB Charts v1.35 _Released December 13th, 2022_ Improvements in this release: * Project Owners can manage viewing permissions on a deployment from the [Data Sources](https://mongodb.com/docs/charts/data-sources/#std-label-data-sources) page. Bug fixes in this release: * Fixes an issue where opening a dashboard would update the time it was last modified.\n* Fixes an issue with dashboard filter data source details.\n* Fixes an issue with replacing array fields in the chart builder.\n* Fixes an issue with sorting by value for colored charts.\n* Fixes an issue where latitude and longitude fields were lost when editing geospatial heatmap or scatter charts.\n* Fixes an issue for Safari where number fields were not displayed correctly in the Encode tab.\n* Fixes an issue with the Wrap Text andColumn Total rules on table charts.\n* Fixes several issues with the query bar, including an overflowing error on the tooltip.\n* Fixes an issue with rendering chart titles.\n* Dashboards are now correctly imported when `textSize` fields exist with invalid data sources.\n* You can now correctly add an embedding provider from theChart Embedding Settings dialog.\n* Geospatial scatter charts now render correctly when using array coordinates.\n* Buttons on the Refresh Settings modal now display correctly on small screens.\n* Long chart titles now display properly in theImport Dashboard dialog.\n* Multi-level lookups in the chart builder Fields list are now displayed properly.\n* Sample document details from a data source now display correctly.\n* The Regex binning option is now enabled for MongoDB 4.2 and above. ## MongoDB Charts v1.34 _Released November 16th, 2022_ Improvements in this release: * You can now [share dashboards](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-modify-dashboard-permissions)across an Atlas organization. Bug fixes in this release: * Fixes an issue with adding date filters inside the Chart Builder.\n* Fixes an issue where filter selections were not saved correctly when building charts.\n* Fixes an issue where non-binned dates with null values were not saved correctly when exported as CSV.\n* Fixes an issue where the Charts homepage did not load. ## MongoDB Charts v1.33.2 _Released October 3rd, 2022_ Improvements in this release: * You can now use Atlas [Online Archives](https://www.mongodb.com/docs/atlas/online-archive/manage-online-archive/)as [data sources.](https://mongodb.com/docs/charts/data-sources/#std-label-data-sources) ## MongoDB Charts v1.33.1 _Released September 12, 2022_ Improvements in this release:\n\n ## MongoDB Charts v1.32.1 _Released May 16, 2022_ Improvements in this release: * Adds a new Embedding page that includes guidance for[getting started with embedding](https://mongodb.com/docs/charts/get-started-embedding/#std-label-get-started-embedding) and[lists all your embedded charts and dashboards.](https://mongodb.com/docs/charts/manage-embedded-items/#std-label-manage-embedded-items)\n* Moves the Authentication Settings inside theEmbedding page. To learn more, see[Configure Embedding Authentication Providers.](https://mongodb.com/docs/charts/configure-auth-providers/#std-label-configure-auth-providers)\n* Adds a new page to see Charts [data usage.](https://mongodb.com/docs/charts/admin-settings/#std-label-admin-settings)\n* For developers, updates the Charts [Embedding SDK](https://mongodb.com/docs/charts/embedding-charts-sdk/#std-label-embedding-charts-sdk) to v2.3.0-beta.1 to support programmatic filtering of charts inside an embedded dashboard. Bug fixes in this release: * Fixes an issue where Charts appended the `$regularExpression`operator to an aggregation pipeline.\n* Supports adding `$search` as the first stage in an aggregation pipeline. ## MongoDB Charts v1.31.1 _Released April 1, 2022_ Bug fixes in this release: * Downloading a CSV file now works correctly for unbinned dates and data that includes the \"#\" character. ## MongoDB Charts v1.31 _Released March 28, 2022_ Improvements in this release: * You can now create a sample dashboard from theAdd Dashboard menu. Bug fixes in this release: * Fixes an issue where charts using aggregate functions would stop working.\n* Dropdown menus in the chart builder now display options correctly.\n* Fixes a bug where a product tours were incorrectly triggered when there were no dashboards on the Dashboards page. ## MongoDB Charts v1.30.1 _Released February 24, 2022_ Bug fixes in this release: * Fixes a bug where a lookup field was not added. ## MongoDB Charts v1.30 _Released February 21, 2022_ Improvements in this release: * Adds the [Dashboard Embedding](https://mongodb.com/docs/charts/embedding-dashboards/#std-label-embedding-dashboards) feature, which lets you embed an entire dashboard in your website or app.\n* Adds the [Query Library](https://mongodb.com/docs/charts/query-library/#std-label-charts-query-library) feature, which lets you reuse queries across multiple charts.\n* Adds the ability to download chart data from a public dashboard. Bug fixes in this release: * Fixes an issue where incorrect binned dates were selected when you used a filter.\n* Fixes a bug where there was an issue applying empty queries in the query bar.\n* Fixes date filters in dashboard filters to correctly display the timezone when charts refresh.\n* Fixes the Import Dashboard dialog to correctly display when you have many data sources.\n* Fixes Ignore Filter to work correctly for all charts in the dashboard. ## MongoDB Charts v1.29 _Released December 6, 2021_ Improvements in this release: * [Interactive Filtering](https://mongodb.com/docs/charts/interact-with-charts/#std-label-interactive-filtering) is now available.\n* Improves the query editor, including a new button to collapse the editor. Bug fixes in this release: * Fixes an issue where [importing a dashboard](https://mongodb.com/docs/charts/dashboards/#std-label-import-dashboard)did not work for some users.\n* Fixes an issue where sharing a dashboard with[Everyone](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-access-everyone) allowed them to make changes to existing roles.\n* Fixes an issue where negative numbers were incorrectly binned.\n* The Edit Chart button is now disabled for viewers.\n* Show Data now correctly displays in table and JSON format.\n* Data source names can now be 64 characters long.\n* Fixes an issue with donut charts having boolean values.\n* Click events now correctly pass event data when clicked in embedded charts. ## MongoDB Charts v1.27.0 _Released September 13, 2021_ Improvements in this release:\n\n Bug fixes in this release: * Fixes an issue with highlighting in bar and column charts when converting the time zone of a date field.\n* Axis labels are now correctly highlighted for binned dates.\n* Improves performance when adding a missed field in the chart builder.\n* The Convert type option is now correctly enabled in the chart builder for single-level arrays in documents.\n* Fixes an issue where part of the chart builder tour for new users was incorrectly positioned.\n* Donut charts with By Series colors now display properly with `null` values.\n* Programmatic highlighting now works correctly with single quotes in values.\n* The chart aggregation pipeline view is now accessible when a chart is loading. ## MongoDB Charts v1.26.1 _Released August 19, 2021_ Bug fixes in this release: * Fixes an issue with disabling interactive filters on some dashboards created before v1.26.0.\n* Grouped column charts with secondary axes now render properly.\n* Donut charts with By Series colors now display properly when data changes.\n* Pressing the ‘Enter’ key to create a new dashboard now works correctly.\n* Fixes an issue where data driven multi-series charts could not be embedded. ## MongoDB Charts v1.26.0 _Released August 2, 2021_ Improvements in this release: * Color swatches can now be rearranged in the custom color palette for data-driven multi-series charts.\n* Period [date filter](https://mongodb.com/docs/charts/filter-chart-results/#std-label-charts-filter-documents) now allows adding custom past or future periods.\n* Adds a new dashboard filter button to enable or disable dashboard-level filtering on a chart.\n* Zoomed view now allows viewers to jump to a chart by clicking on the carousel indicators.\n* Imported dashboards now show the Just added status when imported.\n* Lookup fields can now be removed when sampling fields time out.\n* Encoded fields now have inferred type icons.\n* Type icons on encoding cards can now reflect the field's original type.\n* [Charts Embedding SDK](https://github.com/mongodb-js/charts-embed-sdk)has been updated to v2.1.0 to support programmatic highlighting.\n* [Click Events](https://mongodb.com/docs/charts/handle-click-events/#std-label-handle-click-events) are no longer in beta. Bug fixes in this release: * Improves time series functionality by allowing `$setWindowFields`.\n* Fixes an issue where some dashboards were not able to be imported or exported.\n* Line series in [Combo charts](https://mongodb.com/docs/charts/chart-type-reference/combo-charts/#std-label-combo-chart-ref) now use the correct formatting.\n* Fixes an issue where the editor for chart title and description had incorrect heights.\n* Improves `selectionFilter` on non-binned date fields by making them timezone aware.\n* Resized charts now display on their tiles correctly. ## MongoDB Charts v1.25.1 _Released June 25, 2021_ Bug fixes in this release: * Fixes an issue where data labels did not appear when enabled on some charts. ## MongoDB Charts v1.25.0 _Released June 23, 2021_ Improvements in this release: * Dashboards can now be [exported](https://mongodb.com/docs/charts/dashboards/#std-label-export-dashboard) to a file.\n* Dashboards can be [imported](https://mongodb.com/docs/charts/dashboards/#std-label-import-dashboard) from a previously exported file.\n* Single-series charts now only show a single color in the palette customization setting.\n* Adds a new series-based color palette editing experience for multi-series charts built from multiple fields.\n* Number formatting can now be applied for every field used on a chart’s axis.\n* Adds a new tour showing how to customize field settings. Bug fixes in this release: * Embedded charts now automatically repaint if their size or visibility changes.\n* Fixes an issue where the magnifier icon in search boxes was very small.\n* Improves the behavior of `selectionFilter` in click event payloads for binned date values, making them time-zone aware.\n* Fixes an issue where charts did not render when series' names contained single quotes. ## MongoDB Charts v1.24.2 _Released May 11, 2021_ Improvements in this release:\n\n Bug fixes in this release: * Disables browser autocomplete in the New Dashboard dialog.\n* Hides the Gauge charts Target Label & Value customization option when a Target is not set.\n* Gauge charts with a value of `0` no longer show as blank.\n* Top Item charts no longer show `undefined` while loading.\n* The indicator on the chart builder Filter tab now shows the count for enabled filters only.\n* A numeric bin size of `0` is now treated as invalid.\n* Fixes an issue where charts would sometimes show two `null`categories.\n* Binned string values are now sorted.\n* Prevents reordering columns in the[Data Sources](https://mongodb.com/docs/charts/data-sources/#std-label-data-sources) table.\n* Changes the click event role for clicks on a Scatter chart background.\n* Click event roles now differentiate between category and axis tick labels.\n* Calculated fields that are nested inside objects can now be modified or deleted.\n* Swaps the order of colors 18 and 20 in the default color palette.\n* Fixes an issue where filters sometimes couldn’t be deleted from a chart.\n* Text can now be copied from chart titles and descriptions using the browser context menu.\n* Donut chart series now render in the same order in the legend and on the chart.\n* Charts no longer return an error if the Show “All Others” [limiting option](https://mongodb.com/docs/charts/bin-data/#std-label-charts-limit-data) is on and the chart has no data.\n* [Logarithmic scale](https://mongodb.com/docs/charts/customize-charts/value-axis-options/#std-label-logarithmic-scale) can now be enabled if an axis minimum or maximum is set.\n* Fixes an issue where dashboards did not load if a user with[dashboard permissions](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-permissions) was deleted from MongoDB Cloud. ## MongoDB Charts v1.23.0 _Released March 29, 2021_ Improvements in this release: * Adds the option to drill down into data on a chart by right-clicking chart elements and choosing “show data for this mark.”\n* Adds the option to [pin Table columns](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-pin-columns) to prevent horizontal scrolling.\n* Adds the option to select the angle for labels on the X-axis of discrete charts.\n* Extends the Embedding [Click Events](https://mongodb.com/docs/charts/handle-click-events/#std-label-handle-click-events) beta to include Table chart types.\n* Developers can now filter click events by role.\n* Embedded charts with click events enabled now display the hand cursor over clickable elements.\n* Adds a [choropleth shape scheme](https://mongodb.com/docs/charts/chart-type-reference/choropleth-regions/#std-label-choropleth-shape-scheme) for Italian Regions.\n* Updates the default color palette for charts.\n* Introduces performance improvements. Bug fixes in this release: * Improves the chart title and description inline editing experience.\n* Iframe embedded charts now accept the `autorefresh=false` parameter.\n* Fixes an issue where some read-only users could access theAdd Data Source dialog.\n* Fixes some corner cases where the embedding `selectionFilter` field returned the wrong value. ## MongoDB Charts v1.22.0 _Released February 18, 2021_ Improvements in this release:\n\n Bug fixes in this release: * Geospatial scatter charts now use requested formatting for values in the Color channel.\n* Validation errors now properly appear when adding calculated fields.\n* Charts built from multiple aggregation fields now show bars in the same order that the fields are encoded.\n* You can now select text in the View Aggregation Pipelinedialog.\n* Table row and total columns now respect the table text size customization option.\n* Chart title and description fields can no longer be edited simultaneously.\n* Improved column sorting behavior in tables.\n* Fixed some issues where the Top Item chart sometimes displayed incorrect data.\n* Data labels no longer appear in the wrong place for fields mapped to the secondary Y axis. ## MongoDB Charts v1.21.0 _Released December 21, 2020_ Improvements in this release: * Adds the ability to add a description to a chart.\n* Charts no longer allocate space for chart titles or descriptions when they are not present.\n* Refreshes the visual styling for [Table](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-data-table-ref) and[Area](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-line-area-chart-ref) charts.\n* Adds the following new customization options:  \n   * Wrap text in specific columns of a [Table](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-data-table-ref) chart.  \n   * Choose the font size in a [Table](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-data-table-ref) chart.  \n   * Enable Trend Lines in [Scatter](https://mongodb.com/docs/charts/chart-type-reference/scatter-chart/#std-label-scatter-chart-ref),[Continuous Line and Continuous Area](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-continuous-charts)charts.\n* Adds the option to enable Data labels in [Stacked Bar and Stacked Column](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref) charts.\n* Improves rendering performance on embedded charts.\n* Releases Click Events in the [Charts Embedding SDK](https://github.com/mongodb-js/charts-embed-sdk) as a beta feature. Bugs fixed in this release: * Fixes an issue where donut charts rendered with too many segments after swapping from a different chart type.\n* Fixes an issue where embedded charts did not render when the browser is configured to block third-party cookies.\n* Fixes an issue where the Get Chart Data dialog was empty if a chart used the [Count By Value](https://mongodb.com/docs/charts/multi-series-charts/#std-label-count-by-value-agg)aggregation.\n* Fixes an issue where tables didn’t sort correctly when binned dates were used in the Dynamic Columns channel.\n* Fixes an issue where values from the Color channel were not always sorted correctly on [Scatter](https://mongodb.com/docs/charts/chart-type-reference/scatter-chart/#std-label-scatter-chart-ref)charts. ## MongoDB Charts v1.20.2 _Released December 1, 2020_ Bug fixes in this release: * Fixes an issue where [donut charts](https://mongodb.com/docs/charts/chart-type-reference/donut-chart/#std-label-donut-chart-ref) constructed from multiple fields failed to render.\n* Fixes an issue where [series](https://mongodb.com/docs/charts/multi-series-charts/#std-label-multi-series-charts) could render in an unpredictable order when using [string binning.](https://mongodb.com/docs/charts/bin-data/#std-label-nominal-binning)\n* Fixes an issue where [area charts](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-line-area-chart-ref) showed overlapping segments when some series had no data for some categories. ## MongoDB Charts v1.20.1 _Released November 18, 2020_ Bug fixes in this release:\n\n ## MongoDB Charts v1.20.0 _Released November 12, 2020_ Improvements in this release: * Introduces option to show All others when[limiting results](https://mongodb.com/docs/charts/bin-data/#std-label-charts-limit-data) on a chart.\n* Introduces [Count by Value](https://mongodb.com/docs/charts/multi-series-charts/#std-label-count-by-value-agg) aggregation option, which automatically generates series based on the values in a field.\n* Provides more detailed error messages in the tooltip when a chart on a public dashboard fails to load.\n* New option to use Regular Expressions to choose which string values to use in a [bin.](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data)\n* New chart [customization options:](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts)  \n   * Plot one or more series on a Secondary Y axis on grouped column, line and area charts.  \n   * Reposition or hide the chart legend.  \n   * Use different dash styles for each series on a line chart.  \n   * Change the size, stroke width and fill opacity of marks on a scatter chart. Bug fixes in this release include: * System databases and collections can no longer be added as data sources, since they can’t be used for charting.\n* Popup dialogs in the chart builder no longer close when you click on the background.\n* Error state is now properly cleared when the Lookup Field dialog is reopened.\n* Improves the resolution of the Countries andRegions choropleth shape scheme, ensuring small countries are visible.\n* Charts now render correctly when `NaN` values are included in bins.\n* Series now display in a consistent order when string binning is enabled.\n* Null and empty string values can now be used successfully in string bins.\n* String bins are now retained when binning is disabled and re-enabled.\n* Fixes a styling issue where type converted fields were not showing with a green icon in the field panel.\n* Changes placement of product tours so they can be dismissed on low resolution displays.\n* Binned numbers and dates are no longer infilled when used on a chart’s Series channel.\n* Null category no longer displays when binned numbers or dates are used on a Series chanel.\n* Fixes an issue where charts were not always sorted correctly when binned numbers or dates were used on a Series chanel.\n* Fixes an issue where the data in the Get Chart Datadialog was sometimes empty or didn’t match the chart. ## MongoDB Charts v1.19.0 _Released October 13, 2020_ Improvements in this release: * Introduces [Lookup Fields](https://mongodb.com/docs/charts/add-lookup-field/#std-label-add-lookup-field) in the Chart Builder.\n* Introduces binning on string-typed fields in category channels. See [Bin Data.](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data)\n* Adds ability to limit the number of documents displayed on[Table Charts.](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-data-table-ref)\n* Adds new tour showing virtual and lookup fields. Bug fixes in this release: * Field encodings are now correctly retained when swapping between Geo Scatter and Geo Heatmap chart types.\n* Calculated fields that return objects can now be modified or deleted.\n* Fixes a rendering issue for Area charts when some bins or categories had no values.\n* Geospatial charts can now be panned independently.\n* Fixes an issue when scatter charts with log scales were panned with the mouse.\n* Changes to the Filter Allow list are now immediately picked up by embedded charts.\n* Prevents some “white screen” errors from occurring in the Chart Builder.\n* Allows editing chart titles while a chart is loading.\n* Empty arrays now show the `[]` symbol in the Chart Builder field panel.\n* Improves the refresh behavior for expired authentication sessions.\n* MongoDB Charts no longer crashes when geospatial charts are rendered with`NaN` coordinates. ## MongoDB Charts v1.18.0 _Released September 15, 2020_ Improvements in this release:\n\n Bug fixes in this release: * Array reduction options no longer show on wrong cards after deleting fields.\n* Improves performance of queries when absolute date filters are used.\n* Improves rendering of multi-series charts containing empty bins.\n* Embedded charts no longer blank out when refreshing.\n* Zoomed dashboard view now fills the entire screen.\n* Tables containing a mixture of unbinned dates and binned values no longer show empty cells where dates should appear.\n* Improves rendering consistency across different chart types.\n* Charts no longer hang hang during rendering if the number of requested bins was very large. ## MongoDB Charts v1.17.0 _Released August 20, 2020_ Improvements in this release: * Introduces product tours for new users.\n* Allows users with the[Project Read Only](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles)role to create dashboards and charts using sample data.\n* Introduces a new personal dashboard for new users.\n* Introduces new customization option to show[Gauge Charts](https://mongodb.com/docs/charts/chart-type-reference/gauge-chart/#std-label-gauge-chart-ref) as a percentage of target.\n* Improves autocomplete suggestions in the chart builder query bar to be case-insensitive.\n* Improves rendering of null values in charts.\n* Improves performance of sorting and limiting of chart data by performing sorting and limiting server-side.  \n   * Improves performance of chart rendering and the accuracy of data in the Get Chart Data dialog.\n* Increases the number of legend entries that render on a multi-series chart. Bug fixes in this release: * Embedded number charts no longer display as blank when a zero value was expected.\n* Supports adding calculated fields whose values are arrays.\n* Chart titles can now be selected and copied from the dashboard view.\n* The numeric binning textbox no longer shows non-integer values.\n* The string filter card can still be used even if sampling of string values fails.\n* Missed Fields can now be added whenSample Mode is enabled.\n* Summary of user permissions now show on theDashboard Overview page.\n* The Chart Builder no longer crashes when an empty array is dragged to the filter panel.\n* Collection statistics now display for databases that contain views.\n* Error codes now display correctly after failures.\n* Chart status bar no longer shows a tick if the chart data fails to load.\n* Charts no longer render incorrectly when the only category is an empty string.\n* Cluster names are no longer truncated in theData Source Permissions dialog.\n* Multi-series charts with some empty date bins now render correctly.\n* Blank screen no longer occurs after moving a chart to a different dashboard. ## MongoDB Charts v1.16.0 _Released July 24, 2020_ Improvements in this release: * Adds a welcome experience for new Charts users.\n* Adds a sample data source of movie data available to all Charts users for testing and experimentation.\n* Enables [generating sample dashboards and charts.](https://mongodb.com/docs/charts/admin-settings/#std-label-admin-settings)\n* Adds an option to [show a running total or change in value](https://mongodb.com/docs/charts/bin-data/#std-label-bin-date-fields)on a chart.\n* For charts with no [category channel](https://mongodb.com/docs/charts/encoding-channels/#std-label-charts-channel-type-table)encoded, fields in [aggregation channels](https://mongodb.com/docs/charts/encoding-channels/#std-label-charts-channel-type-table)are now used as categories. Bug fixes in this release: * Fixes an issue where a white screen was displayed when editing the time component of a date filter.\n* Fixes an issue where number charts displayed as blank when a zero value was expected.\n* Fixes an issue where the Retry option did not appear on charts with errors on public dashboards.\n* Fixes an issue where embedded charts using BSON types in filters did not work when using the Atlas App Services authentication provider.\n* Fixes an issue where some charts unexpectedly showed a blank entry in the legend.\n* Fixes an issue where chart queries did not work if they used the`NumberInt`, `NumberLong` or `NumberDecimal` helpers.\n* Improves the performance of rendering large dashboards. ## MongoDB Charts v1.15.0 _Released June 23, 2020_ Improvements in this release:\n\n Bug fixes in this release: * Fixes an issue where injected embedding filters were not properly considered when retrieving chart data from the cache.\n* Fixes an issue where errors that occurred while sampling fields did not display in the chart builder.\n* Fixes an issue where the chart builder query bar did not appear dimmed when a dialog was open.\n* Changes the IFrame embedding parameter to `autoRefresh` to improve consistency with SDK property (the previous `autorefresh` syntax still works).\n* Fixes an issue where embedded charts sometimes rendered with the incorrect font. ## MongoDB Charts v1.14.0 _Released May 28, 2020_ Improvements in this release: * Adds a new chart status bar that shows details about last and next refresh time and any errors in the chart.\n* Adds the ability to refresh a single chart on a dashboard. To learn more, see [Refresh Dashboard Data.](https://mongodb.com/docs/charts/dashboard-refresh/#std-label-refresh-dashboard)\n* Improves server-side caching of chart data.\n* Adds an option to add an authentication provider while embedding a chart.\n* Adds new Tooltip Detail channel on[Scatter](https://mongodb.com/docs/charts/chart-type-reference/scatter-chart/#std-label-scatter-chart-ref) and[Geospatial Scatter](https://mongodb.com/docs/charts/chart-type-reference/geospatial-scatter/#std-label-geospatial-scatter-type) charts. Bug fixes in this release: * Embedded tables now have a transparent background.\n* Prevents a failure when geospatial charts use decimal type fields for coordinates.\n* Fixes sorting of unbinned decimal typed values in chart category channels.\n* Fixes an issue where newly added dashboard filters wouldn’t show sample string values. ## MongoDB Charts v1.13.0 _Released April 30, 2020_ Improvements in this release: * Embedding SDK now generally available. Adds support for[authenticated embedding.](https://mongodb.com/docs/charts/configure-auth-providers/#std-label-configure-auth-providers)  \n   * Charts supports Custom JWT, Atlas App Services, and Google authentication providers.\n* Adds more detailed [error information](https://mongodb.com/docs/charts/embedded-chart-error-codes/#std-label-embedded-errors) for embedded charts.  \n   * Embedding errors are now written to browser developer console.\n* Includes server-side caching of chart data for improved performance.\n* Updates UI for setting[dashboard refresh behavior.](https://mongodb.com/docs/charts/dashboard-refresh/#std-label-refresh-dashboard) Bug fixes in this release: * Error messages no longer render incorrectly in Firefox.\n* Field sampling in the chart builder no longer appears to hang if the sample returns no documents.\n* Table charts now properly format unbinned dates.\n* Queries using[$date](https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/#bson.Date) and a string date can now be used in the query bar.\n* Improves the rendering of emphasized series in line, area and scatter charts. ## MongoDB Charts v1.12.0 _Released March 31, 2020_ Improvements in this release: * Allows [dashboard filter cards](https://mongodb.com/docs/charts/dashboard-filtering/#std-label-dashboard-filtering) to be renamed.\n* Allows filter cards to be expanded and collapsed.\n* Visual refresh across the MongoDB Charts application. Bug fixes in this release:\n\n ## MongoDB Charts v1.11.0 _Released March 2, 2020_ Improvements in this release: * Allows setting the `theme` and `attribution` with the[Embedding SDK.](https://mongodb.com/docs/charts/embedding-charts-sdk/#std-label-embedding-charts-sdk)\n* Adds the [Gauge Chart](https://mongodb.com/docs/charts/chart-type-reference/gauge-chart/#std-label-gauge-chart-ref) type.\n* Enables [Dashboard filters](https://mongodb.com/docs/charts/dashboard-filtering/#std-label-dashboard-filtering) on public link-shared dashboards.\n* Enables linking [Dashboard filter cards](https://mongodb.com/docs/charts/dashboard-filtering/#std-label-dashboard-filtering) to multiple fields from different data sources.\n* Adds [Smart Labels](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-smart-labels-dates) for dates on the X axis of continuous line, area and scatter charts.\n* Enables zooming and panning on[Scatter Charts.](https://mongodb.com/docs/charts/chart-type-reference/scatter-chart/#std-label-scatter-chart-ref)\n* Enables [highlighting individual data series](https://mongodb.com/docs/charts/interact-with-charts/#std-label-emphasize-series)by clicking the legend entries. Bug fixes in this release: * Fixes an issue where Verified Signature embedded charts failed to render when strings in filters contain space characters.\n* Fixes an issue where embedded charts failed to render when field names in filters were not quoted.\n* Fixed an issue where embedded[Choropleth Charts](https://mongodb.com/docs/charts/chart-type-reference/choropleth/#std-label-choropleth-ref) did not render.\n* Improved rendering of filter cards in the dashboard filter pane. ## MongoDB Charts v1.10.0 _Released February 5, 2020_ Improvements in this release: * Adds [dashboard filtering](https://mongodb.com/docs/charts/dashboard-filtering/#std-label-dashboard-filtering) for authenticated dashboard users.\n* Adds support for Embedding JavaScript SDK (beta) for unauthenticated embedding.\n* IFrame [embedded charts](https://mongodb.com/docs/charts/embedding-charts/#std-label-embedding-charts) no longer require Tenant ID. Bug fixes in this release: * Improves scaling of [Number Charts](https://mongodb.com/docs/charts/chart-type-reference/number-chart/#std-label-number-chart-ref) to prevent the text from getting cut off.\n* [Data Tables](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-data-table-ref) no longer show as blank when dynamic column fields have empty values.\n* Improves reliability and performance when duplicating dashboards.\n* Prevents stale error messages from appearing in[Calculated Fields](https://mongodb.com/docs/charts/calculated-fields/#std-label-calculated-fields) editor. ## MongoDB Charts v1.9.1 _Released December 16, 2019_ Bug fixes in this release: * Removes extra padding around[embedded charts.](https://mongodb.com/docs/charts/embedding-charts/) ## MongoDB Charts v1.9.0 _Released December 10, 2019_ Improvements in this release: * Improves dialog for unauthenticated [chart embedding.](https://mongodb.com/docs/charts/embedding-charts/)\n* Supports dark mode in [embedded charts.](https://mongodb.com/docs/charts/embedded-chart-options/)\n* Adds the ability to [filter](https://mongodb.com/docs/charts/filter-embedded-charts/#std-label-embed-options-filter)unauthenticated charts based on allowed fields.\n* Improves the attribution logo on [embedded charts](https://mongodb.com/docs/charts/embedded-chart-options/)and provides the ability to hide the logo.\n* Improves the treatment of errors in the [Chart Builder](https://mongodb.com/docs/charts/build-charts/),[Dashboards](https://mongodb.com/docs/charts/dashboards/), and [embedded charts.](https://mongodb.com/docs/charts/embedded-chart-options/) Bug fixes in this release:\n\n ## MongoDB Charts v1.8.0 _Released November 11, 2019_ Improvements in this release: * Add [Missed Fields](https://mongodb.com/docs/charts/encoding-channels/#std-label-missing-fields) and[Calculated fields](https://mongodb.com/docs/charts/calculated-fields/#std-label-calculated-fields) while building a chart.\n* Share dashboards via a [public link.](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-access-link)\n* New design for [Data Source Permissions](https://mongodb.com/docs/charts/manage-data-sources/#std-label-permission-model) and[Dashboard Permissions](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-permissions) dialogs. Bug fixes in this release: * Legends on [donut charts](https://mongodb.com/docs/charts/chart-type-reference/donut-chart/#std-label-donut-chart-ref) should no longer overlap with the donut.\n* Long category names are now truncated, maximizing space for the chart.\n* Improved error handling for queries with mismatched brackets.\n* Embedded charts no longer go blank while refreshing.\n* View Source Documents andView Aggregation Pipeline dialogs no longer take unapplied queries into account. Prior to this fix, these dialogs would be affected by queries in the query bar regardless of whether the query was applied to the chart. ## MongoDB Charts v1.7.1 _Released October 14, 2019_ Bug fixes in this release: * Fixed an issue that resulted in number formatting not being applied to decimal types in some charts.\n* Charts containing type-converted fields now render correctly on dashboards and when embedded. ## MongoDB Charts v1.7.0 _Released October 2, 2019_ Improvements in this release: * New menu in the Chart Builder allows you to[view and export chart data:](https://mongodb.com/docs/charts/view-export-chart-data/#std-label-view-export-chart-data)  \n   * View Source Documents from the data source.  \n   * View Aggregation Pipeline used to query the data source.  \n   * Get Chart Data to see the data used on the chart and export to CSV or JSON.\n* Adds the ability to[change the data type of fields](https://mongodb.com/docs/charts/convert-field-data-types/#std-label-convert-field-data-types)while building a chart, when using MongoDB 4.0 or later.\n* Charts can now be placed across the full width of a dashboard on a large monitor.\n* A warning now appears when deleting a data source that is in use by at least one chart. Bug fixes in this release: * Performing a new operation in the Chart Builder now cancels previous operations, preventing the chance of multiple responses coming back in an unexpected order.\n* Table row totals correctly display at the far right of the table at all times.\n* Encoding cards can now be more reliably swapped across chart channels.\n* Singapore is now shown on Choropleth maps using theCountries and Regions scheme.\n* Choropleth tooltips are now shown on the largest land mass of a region.\n* String Filter card now correctly shows sample values from arrays of documents.\n* Null values in chart categories now show as `null`, not 0.\n* Improves rendering of dates on continuous chart axes.\n* Ellipsis menu is now accessible for data sources at the bottom of the grid.\n* Miscellaneous performance, reliability and security improvements. ## MongoDB Charts v1.6.0 _Released September 3, 2019_ Improvements in this release: * New design for [Data Sources](https://mongodb.com/docs/charts/data-sources/#std-label-data-sources) list.\n* New Data Source Name attribute replaces theAlias attribute.\n* Data Source owners can now add, edit, or remove an[Aggregation Pipeline](https://mongodb.com/docs/charts/create-manage-charts-view/#std-label-data-sources-pipeline) on a data source, including the ability to join multiple collections using[$lookup.](https://mongodb.com/docs/charts/create-manage-charts-view/#std-label-join-data)\n* Version detection to detect unsupported MongoDB versions or disable unsupported chart features.\n* Option to enable or disable thousands separators in numbers on charts. Bug fixes in this release:\n\n ## MongoDB Charts v1.5.0 _Released August 7, 2019_ Improvements in this release: * Option to [specify refresh period](https://mongodb.com/docs/charts/embedded-chart-options/#std-label-embed-options-refresh)in embedded charts.\n* Option to [specify a custom filter](https://mongodb.com/docs/charts/filter-embedded-charts/#std-label-embed-options-filter) in embedded charts using Verified Signature authentication.\n* [Enabling and disabling of chart filters](https://mongodb.com/docs/charts/filter-chart-results/#std-label-filter-tab)\n* Set [preferred time zone](https://mongodb.com/docs/charts/filter-chart-results/#std-label-filter-tab) when using an absolute date filter.\n* Visual refresh of the Chart Builder. Bug fixes in this release: * Addressed various issues when building and rendering geospatial charts.\n* Fixed an issue that could cause charts to appear blank when refreshing large dashboards.\n* String filter card shows a more complete set of sample values for large, indexed collections.\n* Miscellaneous performance, reliability and security improvements. ## MongoDB Charts v1.4.0 _Released June 12, 2019_ General Availability Release Improvements in this release: * New [geospatial chart types:](https://mongodb.com/docs/charts/chart-type-reference/geo-spatial/#std-label-geo-spatial)  \n   * [Choropleth](https://mongodb.com/docs/charts/chart-type-reference/choropleth/#std-label-choropleth-ref)  \n   * [Geospatial Scatter](https://mongodb.com/docs/charts/chart-type-reference/geospatial-scatter/#std-label-scatter-ref)  \n   * [Geospatial Heatmap](https://mongodb.com/docs/charts/chart-type-reference/geospatial-heatmap/#std-label-geospatial-heatmap-type)\n* New Data Source [permissions model](https://mongodb.com/docs/charts/manage-data-sources/#std-label-permission-model).`Viewer` role allows users to be granted access to data for viewing but not authoring.\n* UI improvements to the [chart builder.](https://mongodb.com/docs/charts/build-charts/#std-label-build-charts) Bug fixes in this release: * Prevented console errors from being written when embedded charts are rendered.\n* Read Preference now shows correctly for newly created data sources.\n* Prevented intermittent errors when adding data sources.\n* Charts can now be edited or deleted when their data is loading. ## MongoDB Charts v1.3.0 _Released May 14, 2019_ Improvements in this release: * New [filtering experience](https://mongodb.com/docs/charts/filter-chart-results/#std-label-charts-filter-documents) in the chart builder.\n* Improved [Query Bar](https://mongodb.com/docs/charts/filter-chart-results/#std-label-query-bar) in the chart builder, allowing the chart author to specify custom aggregation pipeline stages.\n* Charts now runs against [secondary](https://www.mongodb.com/docs/manual/reference/glossary/#std-term-secondary) replica set members by default, and allows [Data Source](https://mongodb.com/docs/charts/data-sources/#std-label-data-sources) owners to change the read preference.\n* Charts now remain visible when changing the dashboard layout and refreshing charts. Bug fixes in this release: * Duplicating a dashboard no longer breaks[embedded charts.](https://mongodb.com/docs/charts/embedding-charts/#std-label-embedding-charts)\n* Tooltips on area charts now show on hover over any part of the area, not just the data points. ## MongoDB Charts v1.2.0 _Released Apr 16, 2019_ Improvements in this release: * Ability to [embed charts](https://mongodb.com/docs/charts/embedding-charts/#std-label-embedding-charts) in external applications.\n* Warning now appears if Atlas renders with incomplete data. Bug fixes in this release:\n\n ## MongoDB Charts v1.1.1 _Released Feb 14, 2019_ Improvements in this release: * New Chart Types:  \n   * [100% Stacked Bar](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref)  \n   * [100% Stacked Column](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref)  \n   * [100% Stacked Area](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-line-area-chart-ref)\n* New default [sort behavior](https://mongodb.com/docs/charts/bin-data/#std-label-charts-sort-data) in charts.\n* New [filter bar](https://mongodb.com/docs/charts/filter-chart-results/#std-label-charts-filter-documents) in the chart builder, with increased performance and usability. Bug fixes in this release: * Changes to [filter parsing](https://mongodb.com/docs/charts/filter-chart-results/#std-label-filter-tab) to better align with MongoDB Shell syntax and Javascript in general. Specifically, filters using `Date()` to represent the current date or`Date(\"2019-01-01\")` to represent a specific date will need to be changed to `new Date()` or `ISODate()` and`new Date(\"2019-01-01\")` or `ISODate(\"2019-01-01\")`, since the Date() function now correctly returns the date as a string representation.\n* Fixed rendering issues in certain browser versions relating to the[continuous color picker.](https://mongodb.com/docs/charts/customize-charts/general-customization/#std-label-color-palette-customization)\n* Miscellaneous performance, reliability and security improvements. ## MongoDB Charts v1.0.0 _Released Dec 11, 2018_ Initial public release of the MongoDB Charts SaaS application. ← [Charts on Atlas Pricing](https://mongodb.com/docs/charts/pricing/ \"Previous Section\")[Third-Party Licenses](https://mongodb.com/docs/charts/third-party-licenses/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/customize-charts/general-customization/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # General On this page * [Color Palette Customization](#color-palette-customization)\n* [Resize Labels](#resize-labels)\n* [Customize Legend](#customize-legend) MongoDB Charts provides general customization options which modify the visualization at a high level, rather than individual pieces of the visualization. ## Note This page illustrates the general customization options which are available for most [chart types](https://mongodb.com/docs/charts/chart-types/#std-label-chart-type-reference). Some chart types have other customization options which are noted on their individual documentation pages. To access the general customization options, expand the Generalsection of the Customize tab. ![Field level customizations](https://mongodb.com/docs/charts/images/charts/general-custom.png) ## Color Palette Customization Palette customization allows you to select custom colors for your chart. To enable color customization, select theCustomize tab of the Chart Type column. A toggle switch labeled Custom Color Palette appears in the General section. You can also customize individual colors in your palette. Most chart types use a custom color picker with color swatches that correspond to your data series. ![Custom color palette selection](https://mongodb.com/docs/charts/images/charts/custom-color-palette.png) Depending on the chart type, each color swatch has a corresponding number or a corresponding name: * Single-series charts have a single numbered swatch.\n* Multi-series charts built by[mapping multiple fields](https://mongodb.com/docs/charts/multi-series-charts/#std-label-multiple-field-mappings)have color swatches with the names of your selected fields.\n* Multi-series charts built with a numeric or date field in the[Series channel](https://mongodb.com/docs/charts/multi-series-charts/#std-label-charts-series-encoding) have numbered color swatches.\n* Multi-series charts built with a string field in the[Series channel](https://mongodb.com/docs/charts/multi-series-charts/#std-label-charts-series-encoding) allow you to choose how you want to assign color. For numbered color swatches, select the By Order option. For swatches with field names, select the By Series option. To change the color of the corresponding data series, click the color swatch. You can select a new color with a color slider, by entering a hex value, by entering RGB values, or by choosing a predefined color. You can also drag and drop color swatches to rearrange the colors in your palette. ## Note For multi-series charts with numbered color swatches, the custom color palette shows swatches for 10 data series by default, and it can expand to show up to 20 data series. However, you can only modify as many swatches as you have data series. For example, if you have two data series in your chart, only the swatches numbered `1` and`2` have an effect on your chart. If additional series appear while the chart is rendering, Charts assigns them a new color. Other chart types use a gradient color scale with a set of pre-defined gradients. The[heatmap](https://mongodb.com/docs/charts/chart-type-reference/heatmap/#std-label-heatmap-chart-ref) and [colored bar and column](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref) types use this method. ![Custom color palette selection](https://mongodb.com/docs/charts/images/charts/custom-gradient.png) To close the color customization tool, click somewhere outside it. To revert the entire chart to its default colors, set theCustom Color Palette toggle switch back to Off. ### Applicable Chart Types This customization option is available for all chart types except[Text.](https://mongodb.com/docs/charts/chart-type-reference/text-charts/#std-label-chart-type-text-charts) ## Resize Labels You can resize the text labels on a chart. Resizing text labels changes: * Axis labels\n* Axis tick labels\n* Data value labels\n* Data category labels\n* Legend caption and entries To set this option:\n\n ### Applicable Chart Types This customization option is available for all charts _except_ [Gauge](https://mongodb.com/docs/charts/chart-type-reference/gauge-chart/#std-label-gauge-chart-example),[Number](https://mongodb.com/docs/charts/chart-type-reference/number-chart/#std-label-number-chart-example),[Table](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-data-table-example), and[Word Cloud](https://mongodb.com/docs/charts/chart-type-reference/word-cloud/#std-label-word-cloud-example) charts. ## Customize Legend You can show or hide a chart legend. If you show the legend, you can specify its position relative to your chart. To set this option: 1. Navigate to the Customize tab in the[Chart Builder.](https://mongodb.com/docs/charts/build-charts/)\n2. Expand the General section.\n3. In the General section, set theLegend toggle switch to the desired setting. The legend is shown by default.\n4. If you toggle Legend on, you may select a position for the legend relative to the chart:  \n   * Right  \n   * Bottom  \n   * Top  \nThe legend is positioned to the right of the chart by default. ### Applicable Chart Types This customization option is available for all charts which may display a legend. This includes any multi-series chart, as well as charts that have a field mapped to a Color, Intensity, Shape or Size channel. ← [Customize Charts](https://mongodb.com/docs/charts/customize-charts/ \"Previous Section\")[Conditional Formatting](https://mongodb.com/docs/charts/customize-charts/conditional-formatting/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/customize-charts/value-axis-options/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Axes On this page * [Max and Min](#max-and-min)\n* [Logarithmic Scale](#logarithmic-scale)\n* [Label Override](#label-override)\n* [Secondary Y Axis](#secondary-y-axis) MongoDB Charts offers several customization options which modify the representation of a chart's X and Y value axes without affecting the formatting of the data points in the visualization. ## Note This page illustrates the value axis customization options which are available for most [chart types](https://mongodb.com/docs/charts/chart-types/#std-label-chart-type-reference). Some chart types have other customization options which are noted on their individual documentation pages. To access value axis customization options, expand the Axessection of the Customize tab. ![Value axis customizations](https://mongodb.com/docs/charts/images/charts/value-axis-custom.png) ## Note A value axis shows a continuous scale of values. Charts such as[Bar/Column](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref) and[Discrete Line/Area](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-discrete-charts) have just one value axis. [Continuous line and area](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-continuous-charts)and [scatter](https://mongodb.com/docs/charts/chart-type-reference/scatter-chart/#std-label-scatter-chart-ref) charts have two value axes. ## Max and Min The Max and Min value axis options allow you to specify maximum and minimum values to display on a chart. Any data points with values outside the specified limits appear at the boundaries of the chart. Setting a maximum display value is useful for removing outlying data from the chart and allowing the viewer to focus on more relevant information. ## Note Changing the minimum for bar and column charts from the default of zero is not recommended. Doing so means the length of the bars is no longer proportional to the data point values. The following chart types can use max and min: * all [Bar/Column](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref) except 100% stacked\n* [Discrete and Continuous Line](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-line-area-chart-ref)\n* [Discrete and Continuous Area](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-discrete-charts)\n* [Scatter](https://mongodb.com/docs/charts/chart-type-reference/scatter-chart/#std-label-scatter-chart-ref) ## Logarithmic Scale Toggling the Logarithmic Scale switch to theOn position causes your chart to use a logarithmic scale instead of a linear scale for data values. Using a logarithmic scale is helpful for showing the percentage change from one value to the next and for charts with a large value differential from smallest to largest. Data sets such as stock market movements, earthquake strength measurements, and global population sizes are good use cases for a logarithmic scale chart. ### Logarithmic Scale Considerations * Use the Logarithmic Scale option only with chart data that consists of either all positive values or all negative values. If the chart includes a mix of positive and negative values, or if it includes the value `0`, the chart will not render.\n* Bar and column charts normally have a baseline of `0`, but logarithmic scale charts have a baseline of `1` because`log(0)` is undefined. As a result, charts with data points between`0` and `1` do not render well. You can mitigate this effect by setting the [axis minimum](#std-label-max-min-options) of the chart to a value greater than zero but smaller than the lowest value in the data set. The following chart types can use logarithmic scale:\n\n ## Label Override The Label Override field allows you to create a custom axis label. Custom labels can be more descriptive than the default labels and help chart viewers quickly grasp the significance of chart data. The Label Override customization option is available on the `X`or `Y` value axis for charts in which the author has encoded multiple data series by mapping more than one field on a given axis. To customize the axis label for charts that have a single field mapped, use the Label Override option within that field's customization options. The following chart types can use label override: * [Bar/Column](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref)\n* [Line](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-line-area-chart-ref)\n* [Area](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-line-area-chart-ref)\n* [Scatter](https://mongodb.com/docs/charts/chart-type-reference/scatter-chart/#std-label-scatter-chart-ref) ## Secondary Y Axis If you map multiple Aggregation or Value fields to the Y axis, you can plot one set of values on a secondary Y axis. This customization option is useful for comparing two data series with significantly different scales using the same chart. ![Secondary Y axis customization](https://mongodb.com/docs/charts/images/charts/secondary-y-customization.png) ### Usage You can plot a secondary Y axis on the following chart types: * [Grouped column](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref)\n* [Discrete line](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-line-area-chart-ref)\n* [Continuous line](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-continuous-charts)\n* [Continuous area](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-continuous-charts) To plot a field on a secondary Y axis: 1. Click the Customize tab above the [encoding channels](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) in the [Chart Builder.](https://mongodb.com/docs/charts/build-charts/)\n2. Expand the Fields section of the Customize tab.\n3. Select the field you want to plot on a secondary Y axis from the dropdown menu.\n4. Set the Plot on Secondary Axis toggle switch toOn. After the secondary Y axis is enabled, you can customize its [value axis options.](#std-label-value-axis-options) When the secondary Y axis is used for at least one series, two separate legends appear for the left Y axis and the right Y axis, each showing the series mapped to that legend. ### Example The following chart uses the `movies` collection in the `sample_mflix`database. The `metacritic` field rates movies on a scale of 0-100, while the `tomatoes.critic` field uses a scale of 0-10\\. This chart shows the total scores for all movies for ten directors, with the `metacritic`totals on the left Y axis and the `tomatoes.critic` totals on the right. The chart shows that Woody Allen gets better ratings from the Rotten Tomatoes reviewers, while Steven Soderbergh does better with the Metacritic reviewers. ![Secondary Y axis example chart](https://mongodb.com/docs/charts/images/charts/secondary-y-example.png) ← [Conditions Reference](https://mongodb.com/docs/charts/customize-charts/conditional-formatting-reference/ \"Previous Section\")[Fields](https://mongodb.com/docs/charts/customize-charts/field-level-options/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/encoding-channels/aggregation-options/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Aggregation Options On this page * [Numbers](#numbers)\n* [Strings and Dates](#strings-and-dates) Dragging a field onto an aggregation [encoding channel](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) allows you to use an[aggregation pipeline operator](https://www.mongodb.com/docs/manual/reference/operator/aggregation/)on that field. The aggregation pipeline operators available in the chart builder change based on the [data type](https://www.mongodb.com/docs/manual/reference/bson-types/)of the selected field. MongoDB Charts categorizes the field data type as either a `number`, `string`, or `date` and displays appropriate aggregation options accordingly. The following tables list the available aggregation options for each data type: ## Numbers\n\n ## Strings and Dates\n\n ← [Understand Encoding Channels](https://mongodb.com/docs/charts/encoding-channels/ \"Previous Section\")[Title and Description](https://mongodb.com/docs/charts/title-description/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/customize-charts/conditional-formatting-reference/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Conditions Reference On this page * [Applies to Field](#applies-to-field)\n* [Operator Field](#operator-field)\n* [Input Field](#input-field) The configuration options available for creating a condition vary based on: * Chart type\n* _Effective type_ of the value to which you you want to apply the condition The effective type of a value is its type after array reductions and aggregations. For example, a string field in a table'sValues channel with a `COUNT` aggregation becomes numeric. ## Applies to Field Use the Applies to menu to select the aspect of your chart to which to you want to apply formatting based on a condition. For [Number Charts](https://mongodb.com/docs/charts/chart-type-reference/number-chart/#std-label-number-chart-ref), you can only apply conditions to the number. For [Data Tables](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-data-table-ref), you can select:\n\n ## Operator Field Use the Operator menu to select the operator that the condition uses to determine formatting. Depending on the type of value you selected from the Applies to menu, you can choose from numeric, string, or date operators. Charts uses the selected operator to compare chart values included in the Applies to field to an[input](#std-label-conditional-formatting-input) you provide. You can only select numeric operators for[Number Charts.](https://mongodb.com/docs/charts/chart-type-reference/number-chart/#std-label-number-chart-ref) ### Numeric Operators For individual numeric values, the following operators are available: * Equal to\n* Not equal to\n* Greater than\n* Greater than or equal to\n* Less than\n* Less than or equal to On Data Tables, the following ranking operators are also available: * Ranked in top\n* Ranked in bottom\n* Ranked in top percent\n* Ranked in bottom percent ## Note ### Ranking identical values If multiple, identical values extend outside of the specified ranking, MongoDB Charts formats all matching values. For example, if the top 20 values in your table are identical and you choose to format the top 10, Charts formats all 20 identical values. ### Date Operators For individual date values, the following operators are available: * On or after\n* After\n* Exactly\n* Before\n* On or before ### Binned Numbers and Dates [Binned](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data) numbers and dates use different operators that apply to the bin range. For binned number ranges, the following operators are available: * Includes\n* Greater than\n* Greater than or includes\n* Less than\n* Less than or includes For binned date ranges, the following operators are available: * Includes\n* After\n* After or includes\n* Before\n* Before or includes ### String Operators For string values, the following operators are available: * Equal to\n* Not equal to\n* Empty\n* Not empty\n* Contains\n* Does not contain\n* Starts with\n* Matches Regex\n* One of #### Matches Regex If you select _Matches Regex_, you can apply any number of the following Regex flags: * Case insensitive (i)\n* Multiline (m)\n* Extended (x)\n* Single line (s) Use the [input](#std-label-conditional-formatting-input) field to specify a regular expression. #### One of If you select _One of_, use the[input](#std-label-conditional-formatting-input) field to list a series of strings. Matching any string in that list applies your conditional formatting. ## Input Field The Input field specifies a value to use for evaluating your Operator condition against the values from yourApplies to field.\n\n ← [Conditional Formatting](https://mongodb.com/docs/charts/customize-charts/conditional-formatting/ \"Previous Section\")[Axes](https://mongodb.com/docs/charts/customize-charts/value-axis-options/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/customize-charts/conditional-formatting/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Conditional Formatting On this page * [Applying Multiple Rules](#applying-multiple-rules)\n* [Use Case](#use-case)\n* [Add a Rule](#add-a-rule)\n* [Reorder, Edit, or Delete a Rule](#reorder--edit--or-delete-a-rule) MongoDB Charts provides conditional formatting options which modify the styling of individual chart values based on conditions you define. Conditional formatting is available for [Data Table](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-data-table-ref)and [Number](https://mongodb.com/docs/charts/chart-type-reference/number-chart/#std-label-number-chart-ref) charts. To view your existing rules or to add, edit, or delete a rule, expand the Conditional Formatting section of theCustomize tab. ![Image displaying the conditional formatting pane, under the Customize tab on a Table Text chart.](https://mongodb.com/docs/charts/images/charts/conditional-formatting-custom.png) ## Applying Multiple Rules Multiple conditional formatting rules can affect the styling of the same value. Conditional formatting rules take precedence in the order you put them in. Rule `1` overwrites rule `2` in cases where both rules affect the same styling of a value. ## Example The following conditional formatting rules both apply to a value: 1. White text\n2. Black text, green background The value's text is white because rule `1` takes precedence. The background is green because both rules apply. ## Use Case Conditional formatting can help clarify the insights that your chart provides. The following example uses conditional formatting to highlight slight shifts in critical reception and runtime in movies of the 2000s. ![Example of a data table with conditional formatting applied.\nMovie statistics are displayed by year and colored with a gradient that highlights shifting trends.](https://mongodb.com/docs/charts/images/charts/conditional-formatting-example-table.png) ## Add a Rule To add a conditional formatting rule: 1 ### Navigate to the Customize tab in the [Chart Builder](https://mongodb.com/docs/charts/build-charts/). 2 ### Expand the Conditional Formatting section. 3 ### Click Add. 4 ### Select Single Color or Color Scale. Single Color sets styling options for values in a field that match specific conditions. Color Scale applies a color gradient to the entire range of values in a field, with the minimum value colored by one end of the gradient and the maximum value colored by the opposite end of the gradient. 5 ### Configure conditions. To configure a condition for Single Color format rules: 1. From the Applies to dropdown menu, select a field or an aspect of your chart to which you want to apply a condition.\n2. From the Operator dropdown menu, select a condition. Depending on the type of field you selected, you can choose from numeric, string or date operators.\n3. From the Input dropdown menu, specify a value to which to compare field values using the operator you selected. ## Note For more information on condition configuration options, see[Conditions Reference.](https://mongodb.com/docs/charts/customize-charts/conditional-formatting-reference/#std-label-conditional-formatting-reference) You can add any number of conditions to a rule. To add another condition, click Another. A value must match all conditions for the rule to apply. To configure a Color Scale format rule, select a field to which you want to apply a color gradient from theApplies to dropdown menu. The color gradient applies to values in that field. 6 ### Customize the styling of values that match your condition. To customize the styling for Single Color format rules, use the editor under Styling. You can apply basic text styling and change the color of value backgrounds and text. On a table chart, to apply that formatting to an entire row, selectFormat entire row. For Color Scale format rules, click the color gradient under Styling to select a predefined color range. Click the arrow icon to the right of the color gradient to invert the gradient. 7 ### Click Save. To create another rule, click Save and add anotherinstead. ## Reorder, Edit, or Delete a Rule To reorder, edit, or delete conditional formatting rules: 1 ### Navigate to the Customize tab in the [Chart Builder](https://mongodb.com/docs/charts/build-charts/). 2 ### Expand the Conditional Formatting section. 3 ### Click Edit. 4 ### Reorder, edit, or delete a rule.\n\n To edit a rule, click the  icon on that rule. When you are finished editing, click Save. To abandon your changes, click Cancel. To delete a rule, click the  icon on that rule.MongoDB Charts deletes the rule immediately. ← [General](https://mongodb.com/docs/charts/customize-charts/general-customization/ \"Previous Section\")[Conditions Reference](https://mongodb.com/docs/charts/customize-charts/conditional-formatting-reference/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/scatter-chart/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Scatter Chart On this page * [Scatter Chart Encoding Channels](#scatter-chart-encoding-channels)\n* [Use Cases](#use-cases)\n* [Customization Options](#customization-options)\n* [Examples](#examples)\n* [Limitations](#limitations) Scatter charts plot data with individual data points placed along the X and Y axes. Optionally, the data point representations may use shapes and colors to display additional data dimensions. ## Scatter Chart Encoding Channels Scatter charts provide the following [encoding channels:](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels)\n\n ## Use Cases Scatter charts are useful for representing numerical data and showing clearly how data points cluster together in certain areas. The Size, Color, and Shapeencoding channels allow you to reveal additional trends for data dimensions with low cardinality. ## Tip A chart with many different colors or shapes may result in a cluttered visualization which is difficult to read. You can limit the number of categories in your chart by [binning](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data) or [limiting](https://mongodb.com/docs/charts/bin-data/#std-label-charts-limit-data) your data. Scatter charts show an individual marker for each data point, so they work better with smaller result sets. Outliers and extreme data points are easy to identify. Consider using a scatter chart to display: * Temperature data for selected cities\n* Volume of sales data for selected retail outlets\n* Population density figures across several countries ## Customization Options The following customization options are specific to scatter charts. To see all available customization options, see [Customize Charts.](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) ### Opacity The Opacity customization option, measured as a percentage, modifies the transparency of the data point fill. This setting defaults to `0%`, which renders the data point fill as completely transparent. ### Stroke Thickness The Stroke Thickness customization option, measured in pixels, modifies the thickness of data point outlines. This setting defaults to `2`. ### Mark Size Adjust the size of the scatter marks. This option behaves differently based on whether you have a field mapped to the Sizeencoding channel. * If you do not have a field mapped to Size, theMark Size setting changes the size of the marks linearly based on the chosen value.\n* If you have a field mapped to Size, theMark Size setting changes the size of the largest mark, and also controls the difference between the smallest and largest marks. ### Smart Date Labels Smart labels for dates are axis markers grouped by units of time to reduce repetition of information. They are generated automatically based on the range of the chart when a `date` type field is encoded on an `X` or `Y` value axis. Smart labels are enabled by default when dates fields are encoded on value axes on supported chart types. To toggle smart labels on and off: 1. Click the Customize tab above the [encoding channels](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) in the [Chart Builder.](https://mongodb.com/docs/charts/build-charts/)\n2. Expand the Fields section.\n3. Select the desired field from the dropdown menu.\n4. If the Use Smart Labels on Axis toggle swich is set to Off, toggle it to On. ![Smart label toggle switch](https://mongodb.com/docs/charts/images/charts/smart-label-switch.png) ## Note When smart labels are enabled, date and time formatting options remain available. Any formatting options you apply are visible in the chart's tooltips. ### Add a Trendline You can add a trendline to a continuous line/area or scatter chart. To enable the trendline feature: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. Scroll down to the Chart Elements section.\n3. Toggle the Trendline switch.\n4. Select a series from the Series dropdown menu.\n5. Select a trendline type from the Type dropdown menu. Trendlines span the entire length of a chart's X axis, including any additional space added as a result of a [min/max axis customization.](https://mongodb.com/docs/charts/customize-charts/value-axis-options/#std-label-max-min-options) The following trendline types are available: * Linear (default)\n* Logarithmic\n* Quadratic\n* Cubic\n* Exponential\n* Power The trendline option is not available if: * A field is mapped to the [series](https://mongodb.com/docs/charts/multi-series-charts/#std-label-multi-series-charts) channel.\n* A [count by value aggregation](https://mongodb.com/docs/charts/multi-series-charts/#std-label-count-by-value-agg) is used. ## Examples ### AirBnB Rentals\n\n The chart shows that lower-priced properties have a wider range of review scores, while higher-priced properties have a smaller score range with generally higher scores. ![Scatter chart example](https://mongodb.com/docs/charts/images/charts/scatter-chart-airbnb.png) ### Movies with the Most Award Nominations The following more complex scatter chart uses a database with movie data compiled from IMDb and Rotten Tomatoes. The chart shows the TomatoMeter rating (ranging from 0 to 100) of movies with at least one award nomination. Each data point marker represents one movie. The X axis shows the movie's TomatoMeter rating and the Y axis shows the number of award nominations the movie received. The [query filter](https://mongodb.com/docs/charts/filter-chart-results/#std-label-charts-filter-documents) restricts the result set to exclude marginal data points. The chart uses the Color and Shape encoding channels to shed further light on the types of movies which receive the most award nominations. The color of each data point shows the MPAA (Motion Picture Association of America) rating the movie received. The chart uses the Shape encoding channel to indicate the year in which the movie was released, and [bins](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data) the data to place each movie into a time range, with each bin covering 25 years. Without the bins, there would be a different shape for every year, which would make the chart too noisy to read. ![Scatter chart example](https://mongodb.com/docs/charts/images/charts/scatter-chart-movie-details.png) ## Limitations The maximum query response size for a scatter chart is 50000 documents. ← [Heatmap](https://mongodb.com/docs/charts/chart-type-reference/heatmap/ \"Previous Section\")[Circular Charts](https://mongodb.com/docs/charts/chart-type-reference/circular-charts/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/column-bar-chart/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Column and Bar Charts On this page * [Column and Bar Chart Encoding Channels](#column-and-bar-chart-encoding-channels)\n* [Column and Bar Chart Types](#column-and-bar-chart-types)\n* [Use Cases](#use-cases)\n* [Customization Options](#customization-options)\n* [Examples](#examples)\n* [Limitations](#limitations) Column and bar charts plot data in either horizontal or vertical segments where the length of the segment is proportional to the data value. Column and bar charts provide high-level overviews of data trends by comparing values within a specific category. ## Column and Bar Chart Encoding Channels Column and bar charts provide the following[encoding channels:](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels)\n\n ## Column and Bar Chart Types Column and bar charts provide the following sub-types:\n\n ## Use Cases Column and bar charts display information in similar manners and, as such, have similar use cases. There are, however, situations where it may be beneficial to use one over the other: * A bar chart may be a better choice than a column chart when the category labels are long, as it may be difficult to quickly pinpoint which label applies to which column.\n* A column chart may be a better choice when comparing sequential values (such as time or geographic data) because the viewer will intuitively read these charts from left to right and attain the full picture of the visualization. ## Tip Column and bar charts are best suited for data with limited categories. When plotting data with many categories, such as years across a long period of time, consider using a[Line Chart.](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/) You can also limit the number of categories displayed in your chart to focus on a subset of your data. MongoDB Charts provides the following methods to reduce the number of bars or columns plotted in the visualization: * [Filter documents](https://mongodb.com/docs/charts/filter-chart-results/#std-label-charts-filter-documents)\n* [Limit Data](https://mongodb.com/docs/charts/bin-data/#std-label-charts-limit-data)\n* [Bin data](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data) ## Customization Options The following customization options are specific to column and bar charts. To see all available customization options, see[Customize Charts.](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) ### Adjust X-Axis Label Angle You can adjust the X-axis label angle. You can choose one of the following options: | Option    | Description                                 |\n| --------- | ------------------------------------------- |\n| Vertical  | Labels right-aligned at a 270 degree angle. |\n| Horizonal | Labels center-aligned at a 0 degree angle.  |\n| Diagonal  | Labels right-aligned at a 315 degree angle. | To set this option: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. In the Axes section, select a Label Anglefor the X Axis. ### Show or Hide Data Value Labels You can dictate whether Charts displays text labels for your data **values**. Data value labels show the exact values of your data points. To set this option: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. In the General Customization section, set theData Value Labels toggle switch to the desired setting. To customize the formatting of the number in the data label, modify the [Number Formatting](https://mongodb.com/docs/charts/customize-charts/field-level-options/#std-label-customize-number-formats) settings for the relevant field. ## Note When used with [stacked](#std-label-stacked-ref-example) column and bar charts, data labels show the sum of all series in each column or bar. ## Examples ### Grouped Column Chart The following grouped column chart shows the most common items sold from an office supply store across several store locations. The X Axis category of `storeLocation` creates a group for each store location in the data set, and each group is split by theseries column of `item.name`. This ultimately displays the count of each item's name sold at each store location: ![Grouped Column Chart Reference](https://mongodb.com/docs/charts/images/charts/grouped-column-chart-reference.png) ### Stacked Column Chart The following stacked column chart shows the number of awards won by the top 10 highest award-winning movie directors, with each bar segmented by the genres of films directed by that director. The X Axis category of director creates a column for each director in the data set, which we [limit](https://mongodb.com/docs/charts/bin-data/#std-label-charts-limit-data) to only the top 10 as sorted by the aggregated sum of `awards.wins` from the Y Axis. The Series encoding channel field of `genres` segments each column to portray the genres of the films directed by that director:\n\n ### 100% Stacked Bar Chart The following 100% stacked bar chart visualizes the monthly cost of renting a home in three different suburbs of Austin, Texas, USA. Using a 100% stacked chart allows us to easily visualize the percentage of rental homes in each `monthly_price` [bin](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data) within each neighborhood. This provides a clear picture of how these neighborhoods generally compare on rental prices. This is the complete [filter](https://mongodb.com/docs/charts/filter-chart-results/#std-label-charts-filter-documents) used for this chart: `| {                                                       |\n| ------------------------------------------------------- |\n| $and: [                                                 |\n| { monthly_price:                                        |\n| { $exists: true, $lte: 2000 }                           |\n| },                                                      |\n| { 'address.suburb':                                     |\n| { $in: [\"Georgian Acres\", \"South Congress\", \"Wooten\"] } |\n| }                                                       |\n| ]                                                       |\n| }                                                       | ` The Y Axis category channel creates a bar for each of the three suburbs in the filter. The X Axis channel aggregates to obtain a count of documents matching each respective suburb. TheSeries encoding channel of `monthly_price` splits each bar into categories colored according to the legend on the right side of the chart: ![Colored Bar Chart Reference](https://mongodb.com/docs/charts/images/charts/100-bar-chart.png) ### Colored Bar Chart The following colored bar chart shows the average [Rotten Tomatoes](https://www.rottentomatoes.com/) rating for countries with the 10 highest ratings, and colors each bar to show the average runtime for movies from each country. The Y Axis category creates a bar for each country in the data set, which we limit to only the top 10 as sorted by the aggregated mean of the `tomato.rating` field from the X Axis. TheColor encoding channel field of `runtime` colors each bar to show the average runtime for movies from each country. A darker shade of green indicates a longer average runtime: ![Colored Bar Chart Reference](https://mongodb.com/docs/charts/images/charts/colored-bar-chart-reference.png) ## Limitations The maximum query response size for column and bar charts is 5000 documents. ← [Chart Types](https://mongodb.com/docs/charts/chart-types/ \"Previous Section\")[Line and Area Charts](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/customize-charts/field-level-options/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Fields On this page * [Field Label Override](#field-label-override)\n* [Number Formats](#number-formats)\n* [Date Format and Time Zone](#date-format-and-time-zone) Within the customization tab, you can modify how MongoDB Charts displays data fields in your visualization. The customization options available depend on the data type of the value you are customizing. ## Note This page illustrates the field-level customization options which are available for most [chart types](https://mongodb.com/docs/charts/chart-types/#std-label-chart-type-reference). Some chart types have other customization options which are noted on their individual documentation pages. To access field-level customization options, expand the Generalsection of the Customize tab. Select the desired field from the dropdown menu. ![Field level customizations](https://mongodb.com/docs/charts/images/charts/field-level-custom.png) ## Field Label Override When you [encode](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) a field in the[Chart Builder](https://mongodb.com/docs/charts/build-charts/), MongoDB Charts automatically generates a label for the field in the visualization. Chartsgenerates the label based on the field name and the type of aggregation applied to the field if appropriate. You can use this customization option to override the default label to provide more insightful or descriptive field labels. To override a field label: 1. Navigate to the Customize tab in the[Chart Builder.](https://mongodb.com/docs/charts/build-charts/)\n2. Expand the Fields section.\n3. Select the field whose label you wish to modify from the dropdown menu to expand its customization options.\n4. Set the Label Override toggle switch to On.\n5. Enter the new desired field label in the text box. This option affects all places in the chart the field label appears, including axis titles, legends, tooltips, etc. Your chart automatically updates to show the new label. This option is available on all chart types. ## Number Formats You can use these customization options to specify how Chartsformats numbers in your data fields. These options are available on all chart types. ### Number Format Options MongoDB Charts provides the following options for formatting numbers. You can use any combination of these options to customize your chart:\n\n ### Number Format Presets Charts provides the following preset customizations to format numbers for common use cases: | Option     | Description                                                                                                                |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------- |\n| Percentage | Multiplies each value by 100 and appends a % sign to each value. Use this option to convert decimal values to percentages. |\n| Dollars    | Rounds each value to two decimal places and prepends a$ to each value.                                                     |\n| Thousands  | Divides each value by 1,000 and appends a K to each value.                                                                 |\n| Millions   | Divides each value by 1,000,000 and appends an M to each value.                                                            | If you select a preset, you can modify any of its attributes to further refine your numeric displays. Once you modify a preset's attribute, Charts changes the preset selection in the dropdown to Custom. ## Date Format and Time Zone You can customize how MongoDB Charts displays date fields, as well as convert dates to a specified time zone. ![Date Field customizations](https://mongodb.com/docs/charts/images/charts/date-format-custom.png) To customize date formats and configure time zones: 1. Navigate to the Customize tab in the[Chart Builder.](https://mongodb.com/docs/charts/build-charts/)\n2. Expand the Fields section.\n3. Select the field whose date format and time zone you wish to modify from the dropdown menu.\n4. Configure the [Date and Time Formatting](#std-label-date-time-format) and[Convert Time Zone](#std-label-convert-time-zone) settings as desired. ### Date and Time Formatting Use this option to specify how Charts formats dates and times. Click the dropdowns in this customization section to select a preset format provided by Charts. Chartsprovides one dropdown for selecting a date format and one dropdown for selecting a time format. ## Note Depending on the [binning](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data) type selected for the field, Charts may not show both date formatting dropdowns. Also, the options in the dropdowns change depending on the binning type selected. For more information, see the[Considerations](#std-label-time-zone-considerations) section. You can also use the input box below the dropdowns to specify a custom datetime format. The following table shows how to create custom datetime formats:\n\n ## Example Consider a timestamp of November 8th, 2018 1:30:58 PM. The following table shows how various custom date filters would output the date: | Custom Format      | Output             |\n| ------------------ | ------------------ |\n| YYYY/MM/DD         | 2018/11/18         |\n| MMM YY             | Nov 18             |\n| DDD, YYYY HH:mm:ss | 322, 2018 13:30:58 |\n| DD-MMM H:mm:ss A   | 08-Nov 1:30:58 PM  | Once you modify a preset's attribute, Chartschanges the preset selection in the dropdown to Custom. #### Considerations If you [bin](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data) your timeseries data, you cannot specify a unit of time in your custom format with smaller granularity than your bin size. For example, if you bin data by Month, you cannot specify days, hours, minutes, or seconds in your custom format because Charts does not show these values in the visualization. If you enter an invalid custom datetime format, Charts highlights the format input box in red. Specifying the Periodic option further limits valid formatting options. For example, if you bin data by Month, you can only specify `year` in your date format if you disable thePeriodic option. If you enable the Periodicoption, you cannot specify `year` because Charts only displays the `month` in the field. ### Convert Time Zone By default, MongoDB Charts displays timeseries data exactly how it appears in the original dataset, which is assumed to be inUTC. You can use this customization option to convert the time zone in which Chartsdisplays the data to best fit the location of the data or the viewers of the chart. To enable this option: 1. Set the Convert Time Zone toggle switch toOn.\n2. Use the dropdown below the toggle to select the desired time zone for your data. ## Note When you convert time zones, Charts automatically accounts for Daylight Savings Time when required. You can search the dropdown to easily filter for the desired time zone. Type into the search bar above the dropdown to see all matching time zones. ← [Axes](https://mongodb.com/docs/charts/customize-charts/value-axis-options/ \"Previous Section\")[View and Export Chart Data](https://mongodb.com/docs/charts/view-export-chart-data/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/number-chart/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Number Chart On this page * [Number Chart Encoding Channels](#number-chart-encoding-channels)\n* [Use Cases](#use-cases)\n* [Customization Options](#customization-options)\n* [Examples](#examples)\n* [Limitations](#limitations) Number charts display a single aggregated value from a data field. ## Number Chart Encoding Channels Number charts only require a single encoding channel, calledNumber. This is an aggregation encoding channel which aggregates based on the field and aggregation method chosen, and displays the result in the chart. ## Use Cases Number charts are useful for highlighting grand totals or values which represent the overall state of your data. For example, a store may use a number chart to represent the total dollar value of all sales. Additionally, a hotel chain may use a number chart to represent the average number of vacant rooms across all hotels, or apply a[filter](https://mongodb.com/docs/charts/filter-chart-results/#std-label-charts-filter-documents) to see the total number of vacant rooms in a select region. ## Customization Options ### Conditional Formatting You can style the number that your chart displays with conditional formatting rules. These rules are applied dynamically: if your number changes to match or stop matching a condition you define, its styling updates. To learn how to use conditional formatting rules, see the[Conditional Formatting](https://mongodb.com/docs/charts/customize-charts/conditional-formatting/#std-label-conditional-formatting)customization option. ## Examples ### Total Value of Store Sales The following chart visualizes sales data from a mock office supply store. Each document in the collection represents an individual sale, which contains information on the item(s) sold and the purchaser. This number chart shows the total sum of all sales stored in the collection: ![Sales number chart example](https://mongodb.com/docs/charts/images/charts/number-chart-example.png) The Number field of `items.price` tells MongoDB Charts to aggregate the field based on the selected method of[$sum](https://www.mongodb.com/docs/manual/reference/operator/aggregation/sum/). Since`items` is an array, we have to select an array reduction option before we can aggregate. In this example, we chooseUnwind Array, which creates a new document for each element in the `items` array. MongoDB Charts sums the `price` of each newly created document and displays the value in the visualization. ### Maximum Calories Burned During Workouts The following chart visualizes workout data. Each document in the collection represents an individual workout activity, which contains information on the type of activity performed and the amount of calories burned during the workout. This number chart shows the maximum calories burned across all `swimming` and `surfing`workouts: ![Workout number chart example](https://mongodb.com/docs/charts/images/charts/number-chart-example-2.png) The Number field of `Calories Burned (kCal)` tellsMongoDB Charts to aggregate the field based on the selected method of[$max.](https://www.mongodb.com/docs/manual/reference/operator/aggregation/max/) We have applied a [filter](https://mongodb.com/docs/charts/filter-chart-results/#std-label-charts-filter-documents) to this chart to restrict the documents MongoDB Charts examines to only those with an`Activity Type` of `Surf`, `Swim`, or `Indoor Swim`. MongoDB Chartsdetermines the maximum value of the `Calories Burned (kCal)` field across all documents which match this criteria and displays the value in the visualization. ## Limitations The maximum query response size for a number chart is 5000 documents. ← [Limit the Rows a Data Table Displays](https://mongodb.com/docs/charts/chart-type-reference/data-table/limit-rows/ \"Previous Section\")[Word Cloud](https://mongodb.com/docs/charts/chart-type-reference/word-cloud/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/geo-spatial/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Geospatial Charts On this page * [Choropleth](#choropleth)\n* [Scatter](#scatter)\n* [Heatmap](#heatmap) Geospatial data defines specific geographical locations, either in the form of latitude and longitude coordinates or text fields with names of geographical areas, such as countries or states. Geospatial charts combine geospatial data with other forms of data to create map-based charts. MongoDB collections can store geospatial data as[GeoJSON objects](https://www.mongodb.com/docs/manual/geospatial-queries/#geospatial-geojson)or as [legacy coordinate pairs.](https://www.mongodb.com/docs/manual/geospatial-queries/#geospatial-legacy) Geospatial charts can visualize geospatial data in a variety of chart formats, including [choropleth](#std-label-choropleth-description), [scatter](#std-label-scatter-description), and [heatmap.](#std-label-heatmap-description) ## Tip ### See also:  [Geopoint encoding channel type](https://mongodb.com/docs/charts/encoding-channels/#std-label-geopoint-channel) ## Choropleth [Choropleth charts](https://mongodb.com/docs/charts/chart-type-reference/choropleth/#std-label-choropleth-ref) use predefined [shapes](https://mongodb.com/docs/charts/chart-type-reference/choropleth-regions/#std-label-choropleth-shape-scheme) for geographical areas, e.g. the countries of the world, or the states of the United States. They are useful for comparing aggregated values across defined geographical areas. ![Choropleth chart example](https://mongodb.com/docs/charts/images/charts/geo-type-choropleth.png) ## Scatter [Scatter charts](https://mongodb.com/docs/charts/chart-type-reference/geospatial-scatter/#std-label-scatter-ref) use customizable data markers to indicate data points on a map. ![Scatter chart example](https://mongodb.com/docs/charts/images/charts/geo-type-scatter.png) ## Heatmap [Heatmap charts](https://mongodb.com/docs/charts/chart-type-reference/geospatial-heatmap/#std-label-geospatial-heatmap-type) use gradations of color intensity to compare concentrations of data points on a map. ![Heatmap chart example](https://mongodb.com/docs/charts/images/charts/geo-type-heatmap.png)",
  "https://www.mongodb.com/docs/charts/chart-type-reference/line-area-chart/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Line and Area Charts On this page * [Discrete Line and Area Charts](#discrete-line-and-area-charts)\n* [Continuous Line and Area Charts](#continuous-line-and-area-charts)\n* [Discrete Area Versus Continuous Area Charts Display](#discrete-area-versus-continuous-area-charts-display)\n* [Use Cases](#use-cases)\n* [Customization Options](#customization-options)\n* [Examples](#examples)\n* [Limitations](#limitations) Line charts and area charts display information as a series of data points connected by straight line segments. In area charts, the space beneath the line segments is filled in with color, whereas in line charts only the line segments are rendered with no additional coloring or shading. These charts facilitate visualizing data over a period of time (using time series data) and identifying trends and patterns across the entire data range. Line and area charts support visualizing both [discrete](#std-label-discrete-charts) and [continuous](#std-label-continuous-charts) data. ## Discrete Line and Area Charts Discrete line and area charts visualize categorical or [binned](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data) data with some form of logical ordering, such as time. MongoDB Charts always [aggregates](https://mongodb.com/docs/charts/encoding-channels/#std-label-building-charts-aggregation)values in discrete charts such that any number of documents can supply values to a given plotted point. A discrete chart would be useful to visualize a store's average annual sales over time. ### Discrete Chart Encoding Channels Discrete line and area charts provide the following[encoding channels:](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels)\n\n ### 100% Stacked Area Charts 100% stacked area charts are a subtype of discrete area charts. In 100% stacked area charts, the total area shown is normalized to 100% and split into segments based on the category in the Series [encoding channel](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels). Each series is shown as a percentage of the whole. When using a traditional stacked area chart, it can be difficult to compare the proportions of each series to the whole if the total value of the chart segments greatly differ. 100% stacked charts make it easier to compare proportions of each series to the whole by showing relative percentages. For a detailed example, see the [100% Stacked Area Chart Example.](#std-label-one-hundred-stacked-area-example) ## Continuous Line and Area Charts In continuous line and area charts, every data point comes from a distinct document in the [data source](https://mongodb.com/docs/charts/data-sources/). Continuous charts do not support aggregation or binning. A continuous chart would be useful to visualize stock closing prices over time, assuming each closing price comes from a distinct document in the dataset. ### Continuous Chart Encoding Channels Continuous line and area charts provide the following[encoding channels:](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels)\n\n ### Smart Date Labels for Continuous Line and Area Charts Smart labels for dates are axis markers grouped by units of time to reduce repetition of information. They are generated automatically based on the range of the chart when a `date` type field is encoded on an `X` or `Y` value axis. Smart labels are enabled by default when dates fields are encoded on value axes on supported chart types. To toggle smart labels on and off: 1. Click the Customize tab above the [encoding channels](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) in the [Chart Builder.](https://mongodb.com/docs/charts/build-charts/)\n2. Expand the Fields section.\n3. Select the desired field from the dropdown menu.\n4. If the Use Smart Labels on Axis toggle swich is set to Off, toggle it to On. ![Smart label toggle switch](https://mongodb.com/docs/charts/images/charts/smart-label-switch.png) ## Note When smart labels are enabled, date and time formatting options remain available. Any formatting options you apply are visible in the chart's tooltips. ## Discrete Area Versus Continuous Area Charts Display Discrete area charts are _stacked_, meaning MongoDB Charts plots each series above or below the others in the visualization. The chart shows the total aggregated value of all of the series, so you can easily see the proportion of each series in relation to the total. Continuous area charts are _overlaid_, meaning MongoDB Charts plots each series directly on top of one another in the visualization. ## Use Cases Line charts and area charts are closely related and are both useful for depicting time series data and data with logical ordering. However, there are scenarios when it may be beneficial to use one chart type over the other. * Consider using a line chart when creating [multi-series charts](https://mongodb.com/docs/charts/multi-series-charts/#std-label-multi-series-charts) where each series represents an isolated field. MongoDB Charts stacks multi-series area charts, as shown in this [example](#std-label-area-chart-multi-series-example), which results in a chart where the stacked totals appear to share a relationship contributing to a larger summed value. This may not be desireable depending on the specific relationships within the data fields.  \n   * The line chart displays the data from each series in-line with one another without stacking, which may provide a more accurate representation of the data as shown in the[discrete line chart.](#std-label-discrete-line-chart-example)\n* Area charts are useful for showing an overall trend while also highlighting relative performances of individual components of that sum.  \n   * Consider using a discrete area chart when illustrating a part-to-whole relationship, such as tracking data metrics over time. An example of this might be showing `revenue` compared with`expenses` over the course of a year.  \n   * A continuous area chart would work in this scenario if you were less concerned with the summation of the two fields and instead wanted a more direct comparison of the fields against one another. ## Tip When your data does not have a logical order, consider instead using a [bar or column chart](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref) to visualize your data. When the order of the data is not important, a bar or column chart can quickly highlight the highest and lowest values in the visualization, which may be more beneficial than suggesting the viewer read the chart from left to right as in a line or area chart. ## Customization Options The following customization options are specific to line and area charts. To see all available customization options, see[Customize Charts.](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) ### Adjust X-Axis Label Angle You can adjust the X-axis label angles in[Discrete Area Chart with Multiple Series](#std-label-area-chart-multi-series-example) and[Discrete Line Chart with Multiple Aggregated Fields](#std-label-discrete-line-chart-example) charts. You can choose one of the following options:\n\n To set this option: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. In the Axes section, select a Label Anglefor the X Axis. ### Show or Hide Data Markers On line and area charts, you can dictate whether Charts displays visible data markers that represent individual data points. Enabling this option makes it easier to see exactly where your data points lie along a line. Hovering over these markers shows the exact data values in a tooltip, making it easier to view precise measurements. To set this option: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. In the General Customization section, set theData Markers toggle switch to the desired setting. To customize the formatting of the number in the data marker tooltip, modify the [Number Formatting](https://mongodb.com/docs/charts/customize-charts/field-level-options/#std-label-customize-number-formats)settings for the relevant field. ### Set Distinct Dash Style per Series on Line Charts On discrete and continuous line charts, you can opt to display each series in the chart with a distinct dash style. This option can help make your chart more accessible by distinguishing between series beyond color. To set this option: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. In the General Customization section, set theDash Styles per Series toggle switch to the desired setting. ### Show or Hide Data Value Labels You can dictate whether Charts displays text labels for your data **values**. Data value labels show the exact values of your data points. To set this option: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. In the General Customization section, set theData Value Labels toggle switch to the desired setting. To customize the formatting of the number in the data label, modify the [Number Formatting](https://mongodb.com/docs/charts/customize-charts/field-level-options/#std-label-customize-number-formats) settings for the relevant field. ## Note When used with [stacked](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-stacked-ref-example) column and bar charts, data labels show the sum of all series in each column or bar. ### Add a Trendline You can add a trendline to a continuous line/area or scatter chart. To enable the trendline feature: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. Scroll down to the Chart Elements section.\n3. Toggle the Trendline switch.\n4. Select a series from the Series dropdown menu.\n5. Select a trendline type from the Type dropdown menu. Trendlines span the entire length of a chart's X axis, including any additional space added as a result of a [min/max axis customization.](https://mongodb.com/docs/charts/customize-charts/value-axis-options/#std-label-max-min-options) The following trendline types are available: * Linear (default)\n* Logarithmic\n* Quadratic\n* Cubic\n* Exponential\n* Power The trendline option is not available if: * A field is mapped to the [series](https://mongodb.com/docs/charts/multi-series-charts/#std-label-multi-series-charts) channel.\n* A [count by value aggregation](https://mongodb.com/docs/charts/multi-series-charts/#std-label-count-by-value-agg) is used. ### Smooth Lines You can change the way lines are drawn on your chart. To smooth lines: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. In the General Customization section, setLine Smoothing to the desired option. The following line smoothing options are available:\n\n ## Examples ### Discrete Area Chart with Multiple Series The following chart visualizes sales data from a mock office supply store. Each document in the collection represents an individual sale with information on the item(s) sold and the customer conducting the purchase. This discrete area chart shows the distribution of customer ages throughout sales in the collection: ![Discrete area example](https://mongodb.com/docs/charts/images/charts/discrete-area-example.png) The X Axis field of `customer.age` plots the ages of the customers along the X axis. We direct to Charts to [bin](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data) the ages into groups of 5. The Y Axis field of `customer.age` andaggregate option of count counts the occurrences of each age in the corresponding bin. Lastly, we apply the `item.name` field to theSeries encoding channel to split the age area into segments displaying the count of each age group purchasing each store item. ## Note For more information on multi-series charts, see[Multi-Series Charts.](https://mongodb.com/docs/charts/multi-series-charts/#std-label-multi-series-charts) ### 100% Stacked Area Chart The following chart visualizes data from a mock office supply store. Each document in the collection represents an individual sale with information on the item(s) sold and the customer conducting the purchase. This 100% stacked area chart shows the relative percentages of items sold on each date of the month: ![Discrete area example](https://mongodb.com/docs/charts/images/charts/100-area-example.png) The X Axis field of `saleDate` plots each sale according to its date. The [Binning](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data) and[Periodic](https://mongodb.com/docs/charts/bin-data/#std-label-periodic-setting) settings are enabled, soCharts groups the dates into bins based on each date of the month. ## Note For more information on binning dates and the periodic setting, refer to the [Bin Data](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data) page. The Y Axis field of `_id` runs a [count](https://www.mongodb.com/docs/manual/reference/operator/aggregation/count/) aggregation to calculate the total number of sales that happened each day of the month. Since this is a 100% stacked chart, these values are all normalized to 100%, and are segmented by the Series [encoding channel](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels). The Series field of `item.name` segments the total chart area based on the name of the item sold. Since there may be multiple items in a single document, we Unwind this array to add each item to the visualization. This provides a clear picture of the relative percentages of items sold based on the date of the month. ### Discrete Line Chart with Multiple Aggregated Fields The following chart visualizes data pertaining to movies. Each document in the collection represents a movie and contains general information about the film and ratings from various rating aggregators. This discrete line chart compares average[Rotten Tomatoes](https://www.rottentomatoes.com/) `tomato.meter` ratings and average [Metacritic](http://www.metacritic.com/) ratings of films over time. Both ratings are on a scale from `0` \\- `100`: ![Discrete line example](https://mongodb.com/docs/charts/images/charts/discrete-line-example.png) The X Axis field of `year` plots each film according to its release year. We direct to Charts to [bin](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data) the years into groups of 5. The Y Axis fields of `tomato.meter` and `metacritic`along with the aggregate option of meancalculate and plot the average ratings of films from each group of 5 years. ## Note For more information on creating charts with multiple aggregated fields, see [Multiple Field Mappings.](https://mongodb.com/docs/charts/multi-series-charts/#std-label-multiple-field-mappings) ### Continuous Line Chart Using Time Series Data The following chart visualizes data pertaining to the usage of a solar-powered house battery. This continuous line graph shows the battery level over time:\n\n The X Axis field of `timestamp` plots each timestamp in the data source. The Y Axis fields of `energy_left` and`total_pack_energy` each plot a series in the chart; the amount of energy the battery has left and the total amount of energy the battery holds. This comparison shows how close the battery is to a full charge. ## Note A continuous chart works better than a discrete chart in this case because our X Axis field, `timestamp` is not a discrete, categorical variable, and is instead a continuous value along a range. We want to plot each `timestamp` as an individual point, rather than show an aggregated value from many data values. ## Limitations * The maximum document limit for discrete line and area charts is 5000 documents.\n* The maximum document limit for continuous line and area charts is 50000 documents. ← [Column and Bar Charts](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/ \"Previous Section\")[Combo Charts](https://mongodb.com/docs/charts/chart-type-reference/combo-charts/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/text-charts/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Text Charts",
  "https://www.mongodb.com/docs/charts/chart-type-reference/data-table/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Data Table On this page * [Data Table Encoding Channels](#data-table-encoding-channels)\n* [Use Cases](#use-cases)\n* [Customization Options](#customization-options)\n* [Examples](#examples)\n* [Limitations](#limitations) Data tables represent data in a tabular view, similar to a[spreadsheet](https://en.wikipedia.org/wiki/Spreadsheet). Data tables split your data into categories, with each categorization field represented in the table columns. The unique categories are represented as the table rows, and Charts displays aggregated values in the table body based on the fields selected. ## Data Table Encoding Channels Data tables use the following [encoding channels:](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels)\n\n ## Use Cases Data tables have a wide variety of applications, but are most useful when comparing multiple categories of calculated values. Visual charts struggle to display multiple categories of data without losing their audience. Data tables present data with multiple categories such that you can see which value applies to which slice of data. Data tables are also useful for showing precise data values, rather than comparing approximate values. Comparing approximate values is best done with a visual representation, instead of text. You can use data tables to show: * The total cost to rent an apartment, including rent, cleaning fees, and security deposits organized by location and total area of the unit.\n* Time spent working out and total calories burned during various exercises categorized by the type of exercise and time of day the exercised was performed. ## Customization Options The following customization options are specific to data table charts. To see all available customization options, see[Customize Charts.](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) ### Wrap Text You can wrap text that does fit in a single data cell across multiple lines. This setting is off by default. To turn it on: 1. Select the Customize tab of the Chart Builder.\n2. Expand the Fields section.\n3. Select your desired field from the dropdown menu.\n4. Toggle the Wrap Text switch to enable this feature. ### Pin Columns You can pin Group and Row Total columns to the side of the data table. A pinned column remains fixed in place while the rest of the table scrolls. To pin a column, hover over the column you want to pin and click the button in the column header. The button toggles on and the column pins to the side of the data table: * A Group column pins to the left of any unpinned columns.\n* The Row Total column pins to the right of any unpinned columns. To unpin a column, click the  button in the header of the column you want to unpin. The  button toggles off and if the column is a Group column, it moves to the right of any pinned Group columns. ### Conditional Formatting You can create styling rules for table cell values that match conditions you define. Conditional formatting rules affect the look of your chart dynamically: if the value of a table cell changes to match or stop matching your conditions, its styling updates to reflect that. To learn how to use conditional formatting rules, see the[Conditional Formatting](https://mongodb.com/docs/charts/customize-charts/conditional-formatting/#std-label-conditional-formatting)customization option. ## Examples The following data table examples visualize data from a hospitality and property service. Each document in the collection represents a unit available for rent and includes information such as the monthly unit price, neighborhood, and property type. ### Basic Data Table The following data table categorizes the rental listings by property type and location, and shows the average review rating and average weekly rent for each group: ![Basic Data Table Example](https://mongodb.com/docs/charts/images/charts/data-table-basic-example.png) The Group encoding channels of `property_type` and`suburb` create a row in the data table for each unique combination of those two fields in the data. The Values of `review_scores_rating` and`weekly_price` each add a column to the table. For both values, we average the rating and price for each `property type` and `suburb`using [aggregation](https://www.mongodb.com/docs/manual/aggregation/) and display the results in the data table. The results are formatted using the Customization tab to display the mean weekly price as currency and round the mean review score to an appropriate number of decimal places. ## Note We have applied a [filter](https://mongodb.com/docs/charts/filter-chart-results/#std-label-charts-filter-documents) to this chart to only display listings which have a `weekly_price`associated with them. ### Data Table with Dynamic Columns The following data table displays nearly the same data as the previous basic data table example. In this example, instead of making`property_type` and `suburb` Groups, `property_type`field is now a Dynamic Column: ![Basic Data Table Example](https://mongodb.com/docs/charts/images/charts/data-table-dynamic-example.png) Now, rather than having two category columns in the table, the`property_types` become column titles. We are still aggregating the mean of the `weekly_price` based on each combination of`property_type` and `suburb`. The results are formatted using the Customization tab to display the mean weekly price as currency. ## Note\n\n ## Limitations The maximum query response size for a data table is 50000 documents. ← [Text Charts](https://mongodb.com/docs/charts/chart-type-reference/text-charts/ \"Previous Section\")[Reorder Data Table Columns](https://mongodb.com/docs/charts/chart-type-reference/data-table/reorder-columns/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/choropleth-regions/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Choropleth Chart Shape Schemes MongoDB Charts provides shape schemes to help define regions in your[Choropleth Charts](https://mongodb.com/docs/charts/chart-type-reference/choropleth/#std-label-choropleth-ref). Each shape scheme has a distinct set of expected values where each value corresponds to a region. ## Shape Schemes and Location In choropleth charts, you specify regions with the[Location](https://mongodb.com/docs/charts/chart-type-reference/choropleth/#mongodb-data-Location) channel. The value in the location channel must match a region value for the selected Shape Scheme(case insensitive)- when using the US Statesscheme, the region of `California` will match both `california`and `CA` as well as `California`. ### Available Shape Schemes The following table defines the available shape schemes and their expected Location values:\n\n ← [Choropleth Chart](https://mongodb.com/docs/charts/chart-type-reference/choropleth/ \"Previous Section\")[Geospatial Scatter Chart](https://mongodb.com/docs/charts/chart-type-reference/geospatial-scatter/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/combo-charts/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Combo Charts On this page * [Combo Chart Encoding Channels](#combo-chart-encoding-channels)\n* [Combo Chart Types](#combo-chart-types)\n* [Use Cases](#use-cases)\n* [Customization Options](#customization-options)\n* [Examples](#examples)\n* [Limitations](#limitations) Combo charts offer a combined [column](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref) and[line](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-line-area-chart-ref) view. ## Combo Chart Encoding Channels Combo charts provide the following[encoding channels:](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels)\n\n ## Combo Chart Types Combo charts provide the following sub-types: | Sub-Type Name                                   | Description                                                                                                                                                                                                                                  |\n| ----------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [Grouped](#std-label-grouped-combo-ref-example) | MongoDB Charts groups data by the category specified in thecategory [encoding channel](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels), and plots a column for each value in the Columns encoding channel.                      |\n| [Stacked](#std-label-stacked-combo-ref-example) | MongoDB Charts creates a column for each distinct value in thecategory [encoding channel](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels)field, and splits each column into segments based on the the Columns encoding channel. | ## Use Cases * Combo charts bring together the useful aspects of both [column](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref) and [line](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/#std-label-line-area-chart-ref) charts into a single chart. ## Customization Options The following customization options are specific to combo charts. To see all available customization options, see[Customize Charts.](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) ## Note If the columns and lines in your combo use different scales, consider a [Secondary Y Axis](https://mongodb.com/docs/charts/customize-charts/value-axis-options/#std-label-secondary-y-axis). This option appears on theCustomize pane in the Fields section for any fields mapped to the Lines channel. Fields mapped to theColumns channel appear only on the primary axis. ### Adjust X-Axis Label Angle You can adjust the X-axis label angle. You can choose one of the following options: | Option    | Description                                 |\n| --------- | ------------------------------------------- |\n| Vertical  | Labels right-aligned at a 270 degree angle. |\n| Horizonal | Labels center-aligned at a 0 degree angle.  |\n| Diagonal  | Labels right-aligned at a 315 degree angle. | To set this option: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. In the Axes section, select a Label Anglefor the X Axis. ### Set Distinct Dash Style per Series On combo charts, you can opt to display each series in the chart with a distinct dash style. This option can help make your chart more accessible by distinguishing between series beyond color. To set this option: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. In the General Customization section, set theDash Styles per Series toggle switch to the desired setting. ### Smooth Lines\n\n 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. In the General Customization section, setLine Smoothing to the desired option. The following line smoothing options are available: | Option         | Description                                                                                                                                                                              |\n| -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| None (Default) | Draws straight lines between data points.                                                                                                                                                |\n| Smooth         | Draws curved lines between data points.                                                                                                                                                  |\n| Step Before    | Lines extend horizontally to data points. This is useful for visualizing data that only changes in intervals and is collected at the end of a period, such as daily average temperature. |\n| Step After     | Lines extend horizontally from data points. This is useful for visualizing data that only changes in intervals, such as stock prices.                                                    | ### Show or Hide Data Markers On combo charts, you can dictate whether Charts displays visible data markers that represent individual data points along the line. Enabling this option makes it easier to see exactly where your data points lie along a line. Hovering over these markers shows the exact data values in a tooltip, making it easier to view precise measurements. To set this option: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. In the General Customization section, set theData Markers toggle switch to the desired setting. To customize the formatting of the number in the data marker tooltip, modify the [Number Formatting](https://mongodb.com/docs/charts/customize-charts/field-level-options/#std-label-customize-number-formats)settings for the relevant field. ### Show or Hide Data Value Labels You can dictate whether Charts displays text labels for your data **values**. Data value labels show the exact values of your data points. To set this option:\n\n To customize the formatting of the number in the data label, modify the [Number Formatting](https://mongodb.com/docs/charts/customize-charts/field-level-options/#std-label-customize-number-formats) settings for the relevant field. ## Note When used with [stacked](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-stacked-ref-example) column and bar charts, data labels show the sum of all series in each column or bar. ## Examples ### Grouped Combo Chart The following grouped combo chart shows the number of award nominations, wins, and metascores by director. The X Axis category of `director` creates a group for each director in the data set, and each group is split by theColumns encoding channel fields of `nominations` and`wins`. The Lines encoding channel field of`metacritic` displays as a line: ![Grouped Combo Chart Reference](https://mongodb.com/docs/charts/images/charts/combo-chart-grouped.png) ### Stacked Combo Chart The following stacked combo chart shows the number of award nominations, wins, and metascores by director. The X Axis category of `director` creates a column for each director in the data set, [limited](https://mongodb.com/docs/charts/bin-data/#std-label-charts-limit-data) to only the top 10 as sorted by the aggregated sum of `awards.wins` fromColumns. The Columns encoding channel fields of`nominations` and `wins` segment each column. The Linesencoding channel field of `metacritic` displays as a line: ![Stacked Combo Chart Reference](https://mongodb.com/docs/charts/images/charts/combo-chart-stacked.png) ## Limitations The maximum query response size for combo charts is 5000 documents. ← [Line and Area Charts](https://mongodb.com/docs/charts/chart-type-reference/line-area-chart/ \"Previous Section\")[Grid Charts](https://mongodb.com/docs/charts/chart-type-reference/grid-charts/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/donut-chart/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Donut Chart On this page * [Donut Chart Encoding Channels](#donut-chart-encoding-channels)\n* [Use Cases](#use-cases)\n* [Customization Options](#customization-options)\n* [Examples](#examples)\n* [Limitations](#limitations) [Donut Charts](#std-label-donut-chart-ref) display data in a series of segments of a circle, with larger segments representing larger data values. The entire circle represents the sum of all data values, and each segment indicates the proportion of each category in the data to the total. ## Donut Chart Encoding Channels Donut charts provide the following [encoding channels:](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) | Encoding Channel | Description                                                                                                                                                                                                                                                                                                                                                                                                               |\n| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Label            | The category encoding channel. MongoDB Charts creates a segment in the donut for each unique value from this field.NoteThe Label encoding channel supports[binning](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data) for numeric and date fields. The channel supports [sorting](https://mongodb.com/docs/charts/bin-data/#std-label-charts-sort-data) and[limiting](https://mongodb.com/docs/charts/bin-data/#std-label-charts-limit-data) for string fields. |\n| Arc              | The aggregation encoding channel. MongoDB Charts [aggregates](https://mongodb.com/docs/charts/encoding-channels/#std-label-building-charts-aggregation) this field based on the aggregation method selected. This field dictates the size of each circle segment.If you don't add a field to the Label channel, you can add multiple fields to the Arc channel. MongoDB Chartscreates one segment for each encoded field.                    | ## Use Cases Donut charts are ideal for giving readers a quick overview of the proportional distribution of a dataset. Use donut charts when the general trend of data is more important than precise data values. Donut charts are especially useful when there is a low number of categories to visualize, because it is easier to compare fewer segments of the circle to see which values make up the greatest parts of the whole. Consider using donut charts to display:\n\n ## Note Although you can [limit](https://mongodb.com/docs/charts/bin-data/#std-label-charts-limit-data) your data to reduce the number of categories in the visualization, this may not be the best choice for donut charts. The purpose of donut charts is to show each value as a proportion of a total, so excluding categories may result in a misleading visualization that reflects inaccurate proportions. If you do [limit](https://mongodb.com/docs/charts/bin-data/#std-label-charts-limit-data) your data, donut charts enable the Show \"All Others\" option by default. This option creates an \"All others\" category that represents the sum of the omitted values and ensures that chart values are displayed as a proportion of the total. When looking to compare individual data values, rather than show values as a proportion to a whole, consider using a[column or bar chart.](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-column-bar-chart-ref) ## Customization Options The following customization options are specific to donut charts. To see all available customization options, see[Customize Charts.](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) ### Show or Hide Category Labels You can dictate whether Charts displays text labels for**categories** in your donut charts. To set this option: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. In the General Customization section, set theData Category Labels toggle switch to the desired setting. ## Note When you enable one or both of theData Value Labels or Data Category Labelssettings on a [Donut Chart](#std-label-donut-chart-ref) with many categories, MongoDB Charts only renders labels for the highest value categories. ### Show or Hide Data Value Labels You can dictate whether Charts displays text labels for your data **values**. Data value labels show the exact values of your data points. To set this option: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. In the General Customization section, set theData Value Labels toggle switch to the desired setting. To customize the formatting of the number in the data label, modify the [Number Formatting](https://mongodb.com/docs/charts/customize-charts/field-level-options/#std-label-customize-number-formats) settings for the relevant field. ## Note When used with [stacked](https://mongodb.com/docs/charts/chart-type-reference/column-bar-chart/#std-label-stacked-ref-example) column and bar charts, data labels show the sum of all series in each column or bar. ### Show Value or Percentage Labels You can dictate whether a [Donut Chart](#std-label-donut-chart-ref) displays data values as raw values or percentages. By default, data value labels show the raw values of your data points. For percentage values in[Donut Charts](#std-label-donut-chart-ref), the whole value is the total value of the entire chart. Percentage labels are always rounded to one decimal place, and do not adhere to [Number Formatting](https://mongodb.com/docs/charts/customize-charts/field-level-options/#std-label-customize-number-formats) settings. To set this option: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. In the General Customization section, set theData Value Labels toggle switch to on if off.\n3. Select Show Value or Show Percentage from the drop-down. ## Examples ### Donut Chart Using Count The following chart visualizes sales data from a mock office supply store. Each document in the collection represents an individual sale, which contains information on the item(s) sold and the customer conducting the purchase. This donut chart shows the proportional counts of the three different purchase methods the store provides: ![Donut Chart Using Count Example](https://mongodb.com/docs/charts/images/charts/donut-chart-store-example.png)\n\n We see based on the visualization that the most common purchase method is `In store`, followed by `Online`. ## Note In this example we are counting entire documents, so it does not matter what field we select for the Arc field. No matter what field we apply, the visualization will still be the same. ### Donut Chart Using Sum The following chart visualizes personal workout data. Each document in the collection represents a single workout activity, which includes information on the type of activity performed and the amount of time spent exercising. This donut chart shows the proportional time spent performing each exercise activity: ![Donut Chart Using Sum Example](https://mongodb.com/docs/charts/images/charts/donut-chart-workout-example.png) The Label field of `Activity Type` tells MongoDB Charts to create a circle segment for each unique value in the `Activity Type`field. MongoDB Charts proportions each segment according to the aggregated value signified in the Arc encoding channel. In this case, we aggregate to find the total sum of workout times for documents with the same `Activity Type` value. We see based on the visualization that the activity with the greatest total workout time is `Surf`, followed by `Bike Ride`. ### Donut Chart Using Multiple Arc Fields The following chart vizualizes rental property data. Each document in the collection represents a single rental property, which includes information on prices. This donut chart shows the average price of all properties in the collection for a daily, weekly, and monthly rental: ![Donut Chart Multiple Arc Fields Example](https://mongodb.com/docs/charts/images/charts/donut-chart-airbnb-example.png) Because there is no Label field, MongoDB Charts creates a circle segment for each Arc field. MongoDB Charts proportions each segment according to the aggregated value signified in theArc encoding channel. In this case, we aggregate themean price for all properties rented by the day, week, and month. ## Limitations The maximum query response size for a donut chart is 5000 documents. ← [Circular Charts](https://mongodb.com/docs/charts/chart-type-reference/circular-charts/ \"Previous Section\")[Gauge Chart](https://mongodb.com/docs/charts/chart-type-reference/gauge-chart/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/gauge-chart/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Gauge Chart On this page * [Gauge Chart Encoding Channels](#gauge-chart-encoding-channels)\n* [Target and Maximum Interaction](#target-and-maximum-interaction)\n* [Use Cases](#use-cases)\n* [Cutomization Options](#cutomization-options)\n* [Examples](#examples) [Gauge Charts](#std-label-gauge-chart-ref) display data as a percentage of a semicircle, with customizable minimum and maximum values. Optionally you may also specify a Target value, which renders as a heavy line within the gauge's range. ## Gauge Chart Encoding Channels Gauge charts provide the following [encoding channels:](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels)\n\n ## Target and Maximum Interaction The value encoded in the Target channel and theMaximum customization affect each others' behavior. The followling table explains the effect on the chart of having one, both, or neither of the values set. | Target  | Maximum | Behavior                                                                                    |\n| ------- | ------- | ------------------------------------------------------------------------------------------- |\n| None    | Default | No target line. Gauge maximum is the next power of 10 above the value of the Value channel. |\n| None    | Custom  | No target line. Gauge maximum is the specified value.                                       |\n| Encoded | Default | Target line is rendered. Gauge maximum matches the target value.                            |\n| Encoded | Custom  | Target line is rendered. Gauge maximum is the specified value.                              | ## Use Cases Gauge charts are useful for displaying a data value represented as a fraction of a larger value. Gauge charts are a familiar way to represent a situation in which a container may be either full or empty or somewhere in between. Consider using gauge charts to represent: * Occupancy rates in a hotel\n* Progress towards a fundraising goal\n* The water level in a reservoir ## Cutomization Options To access the customization options, click the Customize tab above the encoding channels in the Chart Builder. ![Customization tab](https://mongodb.com/docs/charts/images/charts/customize-tab.png) ### General Customization\n\n ### Value Axis | Option  | Description                                                                                                                                                                                  | Default |\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |\n| Maximum | Specifies the maximum range of the gauge when enabled. See [Target and Maximum Interaction](#std-label-target-max) for more information on how the maximum range of the gauge is determined. | Off     |\n| Minimum | Specifies the minimum range of the gauge when enabled. Defaults to 0.                                                                                                                        | Off     | ### Value Field | Option            | Description                                                                                                                                                | Default |\n| ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |\n| Label Override    | When enabled, displays a custom label for the Valuenumber if the Value Label option is also enabled. Displays a custom label for the Value Field tooltips. | Off     |\n| Number Formatting | Controls formatting of the large value in the chart, the tooltips, and the min/max labels.                                                                 | None    | ### Target Field\n\n ## Examples The following chart shows progress towards a goal. A clothing retailer has a goal of selling 100 green shirts per month. ![Gauge chart example](https://mongodb.com/docs/charts/images/charts/gauge-chart-example.png) This chart uses a filter to find sales order documents in which the `item`field is `shirt` and the `color` field is `green`. The `qty` field is encoded in the Value channel to a get an aggregated total. The 100-shirt goal is a constant value, so the chart uses a [calculated field](https://mongodb.com/docs/charts/calculated-fields/#std-label-calculated-fields) named `target` with a value of `100` encoded in theTarget channel. ← [Donut Chart](https://mongodb.com/docs/charts/chart-type-reference/donut-chart/ \"Previous Section\")[Text Charts](https://mongodb.com/docs/charts/chart-type-reference/text-charts/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/choropleth/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Choropleth Chart On this page * [Regions](#regions)\n* [Choropleth Chart Encoding Channels](#choropleth-chart-encoding-channels)\n* [Use Cases](#use-cases)\n* [Customization Options](#customization-options)\n* [Examples](#examples)\n* [Limitations](#limitations) Choropleth charts are maps that use shading to depict differences across regions. The shading of a region (e.g. states, countries) is based on an aggregated value and is proportional to the corresponding value of other regions. Unlike other geospatial charts, choropleths do not require coordinate data in your collections. Instead you can have names of regions as strings, so long as the region strings correspond to the names used in a supported [Shape Scheme.](https://mongodb.com/docs/charts/chart-type-reference/choropleth-regions/#std-label-choropleth-shape-scheme) ## Regions To help define regions, MongoDB Charts provides[Shape Schemes](https://mongodb.com/docs/charts/chart-type-reference/choropleth-regions/#std-label-choropleth-shape-scheme). For example, with theUS States scheme, you can define regions at a state level, and your location field value must be one of the 50 states. ## Choropleth Chart Encoding Channels Choropleth charts use the following [encoding channels:](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels)\n\n ## Use Cases Choropleth charts can be used to depict differences in your selected aggregated field between geographic subregions, such as states or countries. They are useful when you have a dataset with clearly defined subregions compatible with one of the[Shape Schemes](https://mongodb.com/docs/charts/chart-type-reference/choropleth-regions/#std-label-choropleth-shape-scheme) MongoDB Charts provides. A choropleth chart is a good choice to compare: * Population density across US states.\n* Annual rainfall across European countries.\n* Number of cellphone towers across Australian states. ## Tip ### See also:  If you are looking for a chart to depict exact values rather than a high-level comparison, consider using a[Data Table.](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-data-table-ref) ## Customization Options The following customization options are specific to choropleth charts. For general customization options, see [Customize Charts.](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) ### Automatically Set Viewport By default, geospatial charts show a map which includes all the data point markers in your specified collection. You can pan and zoom to change the map view, but if you close the chart and re-open it the map reverts to its default state. This behavior is controlled by theAutomatically Set Viewport option. When you toggle the Automatically Set Viewport switch to`Off`, the area and zoom level at which the map is saved becomes the new default view. ## Note You can pan and zoom the map area in a chart on a dashboard, but these changes do not affect the default map view. ### Opacity The Opacity level of a map modifies the degree to which the chart's map data shows through the data point markers. Choropleth charts default to `100%`. ### Custom Color Palette The color palette specifies the range of colors that corresponds to relative aggregated values in your map. Choropleth charts use a gradient color picker. To enable palette customization, toggle theCustom Color Palette switch in the Generalsection. For more information, see [Color Palette Customization.](https://mongodb.com/docs/charts/customize-charts/general-customization/#std-label-color-palette-customization) ## Examples The following choropleth chart visualizes the total count of movie releases across various countries. Each document in the collection contains an array of countries where a particular movie was released. ![Choropleth example chart](https://mongodb.com/docs/charts/images/charts/geo-type-choropleth.png) In this chart, we specify a[Shape Scheme](https://mongodb.com/docs/charts/chart-type-reference/choropleth-regions/#std-label-choropleth-shape-scheme) ofWorld Countries to divide the map into countries. The `countries` array in the Location field contains an array of elements representing each country where a movie was released. These elements match the values expected by theWorld Countries shape scheme. We unwind the array so each movie contributes to the count for each country where it was released. The Color field of `id` is aggregated byCount. As a result, each country is shaded based on its number of movies released. The custom color palatte for this chart ranges from yellow for lower ratings to dark red for higher ratings. Based on the visualization, we see that France, India, and Japan have relatively high movie release counts compared with other countries. ## Tip ### See also:  For a complete list of choropleth Shape Schemes and their expected values, refer to the[Choropleth Regions](#std-label-choropleth-regions) page. ## Limitations The maximum query response size for a choropleth chart is 5000 documents. ← [Geospatial Charts](https://mongodb.com/docs/charts/chart-type-reference/geo-spatial/ \"Previous Section\")[Choropleth Chart Shape Schemes](https://mongodb.com/docs/charts/chart-type-reference/choropleth-regions/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/circular-charts/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Circular Charts [Donut Chart](https://mongodb.com/docs/charts/chart-type-reference/donut-chart/) [Donut Charts](https://mongodb.com/docs/charts/chart-type-reference/donut-chart/#std-label-donut-chart-ref) display data in a series of segments of a circle, with larger segments representing larger data values. The entire circle represents the sum of all data values, and each segment indicates the proportion of each category in the data to the total. ![Example of a donut chart](https://mongodb.com/docs/charts/images/charts/donut-simple-example.png) [Gauge Chart](https://mongodb.com/docs/charts/chart-type-reference/gauge-chart/) [Gauge Charts](https://mongodb.com/docs/charts/chart-type-reference/gauge-chart/#std-label-gauge-chart-ref) display data as a percentage of a semicircle, with customizable minimum and maximum values. Optionally you may also specify a Target value, which renders as a heavy line within the gauge's range. ![Example of a gauge chart](https://mongodb.com/docs/charts/images/charts/gauge-chart.png) ← [Scatter Chart](https://mongodb.com/docs/charts/chart-type-reference/scatter-chart/ \"Previous Section\")[Donut Chart](https://mongodb.com/docs/charts/chart-type-reference/donut-chart/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/grid-charts/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Grid Charts ← [Combo Charts](https://mongodb.com/docs/charts/chart-type-reference/combo-charts/ \"Previous Section\")[Heatmap](https://mongodb.com/docs/charts/chart-type-reference/heatmap/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/top-item/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Top Item Chart On this page * [Top Item Chart Encoding Channels](#top-item-chart-encoding-channels)\n* [Use Cases](#use-cases)\n* [Examples](#examples) Top Item charts show information from the document with the greatest or smallest value for a specified field. When you create a Top Item chart, you specify: * The field by which to sort your collection.\n* Whether you want to sort in ascending or descending order.\n* The fields you want to display from the first document returned by your specified sort. ## Top Item Chart Encoding Channels Top Item charts utilize the following [encoding channels:](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) | Encoding Channel | Description                                                                                 |\n| ---------------- | ------------------------------------------------------------------------------------------- |\n| Sort             | The field by which to sort the collection. You can specify an ascending or descending sort. |\n| Display          | The fields to display from the top item in the collection after sorting.                    | ## Note You cannot perform aggregations on Displayfields. ## Use Cases Use Top Item charts to show information about the most extreme or most recent instance of a particular field value. For example, you can use Top Item charts to show information on: * The most recent reading from a collection of sensor data, such as temperature readings.\n* The highest rated movie in a collection.\n* The cheapest available room in a collection of available hotel listings.\n* The largest sale recorded in the past month (when combining a Top Item chart with [date filters](https://mongodb.com/docs/charts/filter-chart-results/#std-label-charts-filter-documents)). ## Examples The following chart uses a data source containing [Sample AirBnB Listing](https://www.mongodb.com/docs/atlas/sample-data/sample-airbnb/) data and shows information on the document with the highest `monthly_price` in the collection: ![Top Item Chart with AirBnB Data](https://mongodb.com/docs/charts/images/charts/top-item-example.png) The chart sorts the documents based on `monthly_price` in descending order, and returns the first document appearing in the sort. The chart displays the following fields: * `monthly_price`\n* `property_type`\n* `country`\n* `suburb` ← [Word Cloud](https://mongodb.com/docs/charts/chart-type-reference/word-cloud/ \"Previous Section\")[Geospatial Charts](https://mongodb.com/docs/charts/chart-type-reference/geo-spatial/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/geospatial-heatmap/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Geospatial Heatmap On this page * [Geospatial Heatmap Encoding Channels](#geospatial-heatmap-encoding-channels)\n* [Customization Options](#customization-options)\n* [Examples](#examples)\n* [Tutorials](#tutorials)\n* [Limitations](#limitations) You can use geospatial heatmap charts to visualize how geographic areas of a map compare to one another based on a given criterion. ## Geospatial Heatmap Encoding Channels ### Coordinates A geopoint encoding channel which defines the map area of the chart. See the [Geopoint](https://mongodb.com/docs/charts/encoding-channels/#std-label-geopoint-channel) reference page for more information about what types of data you can use in this channel. ### Intensity An aggregation encoding channel that changes the shading of the colors in different chart regions to reflect the aggregated values of this field. More intense colors in the visualization reflect greater aggregated values. The [radius customization option](#std-label-customize-radius) dictates the size of the data markers in [Geospatial Heatmaps](#std-label-geospatial-heatmap-type). The color of each data marker reflects the aggregated value of all data points within that marker's radius. ## Example If ten data points exist within the specified radius, the color displayed is based on the aggregated value of those ten data points. ## Note Intensity shading is local to the map's current view. The most intense color is displayed for the most extreme aggregated values currently visible on the map, even if there are points outside the current view that are more extreme. ### Legend Unlike other types of charts, the legend and the chart colors on geospatial heatmaps change when the view changes. The color range is based on the data in the current view, and may change when you pan or zoom the map. ## Customization Options The following customization options are specific to geospatial heatmap charts. For general customization options, see [Customize Charts.](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) ### Automatically Set Viewport By default, geospatial charts show a map which includes all the data point markers in your specified collection. You can pan and zoom to change the map view, but if you close the chart and re-open it the map reverts to its default state. This behavior is controlled by theAutomatically Set Viewport option. When you toggle the Automatically Set Viewport switch to`Off`, the area and zoom level at which the map is saved becomes the new default view. ## Note You can pan and zoom the map area in a chart on a dashboard, but these changes do not affect the default map view. ### Radius You can adjust the radius of your data points. The radius is measured in pixels and defaults to `30`. ### Opacity The Opacity level of a map modifies the degree to which the chart's map data shows through the data point markers. Geospatial heatmap charts default to `100%`. ### Custom Color Palette The color palette specifies the range of colors that corresponds to relative aggregated values in your map. Geospatial heatmap charts use a gradient color picker. To enable palette customization, toggle theCustom Color Palette switch in the Generalsection. For more information, see [Color Palette Customization.](https://mongodb.com/docs/charts/customize-charts/general-customization/#std-label-color-palette-customization) ## Examples The following chart is based on AirBnB data for the New York City area. It shows rental rate hot spots in a geospatial heatmap. ![Geospatial heatmap example](https://mongodb.com/docs/charts/images/charts/geo-type-heatmap.png) The Coordinates channel uses the `location` database field, which contains arrays of latitude-longitude pairs. TheIntensity field uses the `monthly_price` database field, which contains monthly rental rates for each property in the database. ## Tutorials See the following tutorials to build geospatial heatmap charts: * [Create a Geospatial Heatmap Chart Using GeoJSON Points](#std-label-create-heatmap-chart-geojson)\n* [Create a Geospatial Heatmap Chart Using Numeric or Numeric Array Fields](#std-label-create-heatmap-chart-numeric) ### Prerequisites\n\n ### Create a Geospatial Heatmap Chart Using GeoJSON Points This tutorial demonstrates how to create a geospatial heatmap chart with fields that are [GeoJSON Points](https://www.mongodb.com/docs/manual/reference/geojson/). The final chart displays a heatmap of average AirBnB prices in New York. ## Note Charts automatically determines if field types in your collection are [GeoJSON Points](https://www.mongodb.com/docs/manual/reference/geojson/) by displaying the  icon. You can map these fields directly to a geopoint channel type in the Chart Builder. For more information, see [Geopoint Channel Type.](https://mongodb.com/docs/charts/encoding-channels/#std-label-geopoint-channel) 1 #### Add a geospatial heatmap chart to your dashboard. 1. From the Dashboards page, select the dashboard where you want to add a new chart. For instructions on setting up a dashboard, see [Dashboards.](https://mongodb.com/docs/charts/dashboards/)\n2. Click Add Chart.\n3. In the Select Data Source modal, click theProject tab.\n4. In the cluster where you loaded the sample data, select the `listingsAndReviews` collection in the `sample_airbnb` database.\n5. In the Chart Type dropdown, click Geo Heatmap. For more details, see [Create a Chart.](https://mongodb.com/docs/charts/build-charts/#std-label-create-new-chart) 2 #### Add fields to your chart. 1. Select the Encode tab.\n2. Navigate to the Fields pane on the left side of the Chart Builder. This section lists all available fields in the`listingsAndReviews` collection.\n3. Drag the `location` geopoint field nested in the `address`field to the Coordinates encoding channel.\n4. Drag the `price` field to the Intensity encoding channel. Then, in the Aggregate dropdown that appears, set the aggregation method to mean.  \nCharts displays the aggregated mean prices of AirBnB listings across the world. The color gradient to the right represents the range of prices in the heatmap. A more intense gradation reflects higher prices in the area.  \n## Note  \nTo customize colors, click the Customize tab. Under General, enable theCustom Color Palette and set your preferred colors. For more information, see[Color Palette Customization.](https://mongodb.com/docs/charts/customize-charts/general-customization/#std-label-color-palette-customization) 3 #### Filter your results. 1. Select the Filter tab.\n2. Drag the `market` field nested in the `address` field to the Filter encoding channel.\n3. To filter your results to include only AirBnBs in New York, click Deselect All and then select `New York`. 4 #### Save the chart to your dashboard. 1. Optionally, Enter a titleor Enter a description for your chart.\n2. Click Save and Closeat the upper right of the chart builder view. ### Create a Geospatial Heatmap Chart Using Numeric or Numeric Array Fields This tutorial demonstrates how to create a geospatial heatmap chart with numeric or numeric array fields. The final chart displays a heatmap of shipwrecks across the world. 1 #### Add a geospatial heatmap chart to your dashboard. 1. From the Dashboards page, select the dashboard where you want to add a new chart. For instructions on setting up a dashboard, see [Dashboards.](https://mongodb.com/docs/charts/dashboards/)\n2. Click Add Chart.\n3. In the Select Data Source modal, click theProject tab.\n4. In the cluster where you loaded the sample data, select the `shipwrecks` collection in the `sample_geospatial` database.\n5. In the Chart Type dropdown, click Geo Heatmap. For more details, see [Create a Chart.](https://mongodb.com/docs/charts/build-charts/#std-label-create-new-chart) 2 #### Add fields to your chart.\n\n 3 #### Save the chart to your dashboard. 1. Optionally, Enter a titleor Enter a description for your chart.\n2. Click Save and Closeat the upper right of the chart builder view. ## Limitations The maximum query response size for a geospatial heatmap is 50000 documents. ← [Geospatial Scatter Chart](https://mongodb.com/docs/charts/chart-type-reference/geospatial-scatter/ \"Previous Section\")[Embed Charts and Dashboards](https://mongodb.com/docs/charts/embed-charts-and-dashboards/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/heatmap/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Heatmap On this page * [Heatmap Encoding Channels](#heatmap-encoding-channels)\n* [Use Cases](#use-cases)\n* [Customization Options](#customization-options)\n* [Examples](#examples)\n* [Limitations](#limitations) A heatmap represents data in a tabular format as a range of color. A darker, or more intense, color represents a larger aggregated value for a particular data point. ## Heatmap Encoding Channels Heatmaps provide the following [encoding channels:](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels) | Encoding Channel | Description                                                                                                                                                                                                                   |\n| ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| X Axis           | A category encoding channel that creates a category along the X axis for each unique value in this field.                                                                                                                     |\n| Y Axis           | A category encoding channel that creates a category along the Y axis for each unique value in this field.                                                                                                                     |\n| Intensity        | An aggregation encoding channel that changes the shading of the colors in different chart regions to reflect the aggregated values of this field. More intense colors in the visualization reflect greater aggregated values. | ## Note Heatmaps support [sorting](https://mongodb.com/docs/charts/bin-data/#std-label-charts-sort-data) and[limiting](https://mongodb.com/docs/charts/bin-data/#std-label-charts-limit-data) for theX Axis encoding channel, but not theY Axis channel. ## Use Cases Heatmaps reveal patterns or trends within your data. Use heatmaps when the exact data values are not as important as depicting higher-level trends and relationships between your data points. They can also highlight any significant outliers, or points which strongly go against the general direction of your data. A heatmap is a good choice to display: * A comparison of average room rental prices based on location and property type.\n* Geographic data, such as election results across different districts or population density.\n* The number of customer orders across various store locations by month of the year. ## Tip Heatmaps work especially well with [binned](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data)data. With naturally ordered datasets, heatmaps highlight areas of concentration within the data. ## Customization Options\n\n ### Adjust X-Axis Label Angle You can adjust the X-axis label angle. You can choose one of the following options: | Option    | Description                                 |\n| --------- | ------------------------------------------- |\n| Vertical  | Labels right-aligned at a 270 degree angle. |\n| Horizonal | Labels center-aligned at a 0 degree angle.  |\n| Diagonal  | Labels right-aligned at a 315 degree angle. | To set this option: 1. Open the [Customize](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) pane for your chart.\n2. In the Axes section, select a Label Anglefor the X Axis. ## Examples The following chart visualizes data pertaining to movies. Each document in the collection represents a movie and contains general information about the film as well as ratings from critics. This heatmap shows the mean (average) [Metacritic](http://www.metacritic.com/) rating for different movie genres (Y Axis) over time (X Axis): ![Heatmap example](https://mongodb.com/docs/charts/images/charts/heatmap-example.png) We [bin](https://mongodb.com/docs/charts/bin-data/#std-label-charts-bin-data) the years along the X Axis into decades and aggregate to find the mean `metacritic` score of films from each genre released in each decade. The intensity field of `metacritic` shades each grid element based on the mean `metacritic` field of all of the intersecting documents based on the X andY axes fields. Based on the chart, we see that from `1930-1940` there are a few genres with very high average Metacritic scores, and over time a more even distribution of film ratings begins to occur. ## Note If the space is white, there are no movies from that decade of that particular genre in the dataset. ## Limitations The maximum query response size for a heatmap is 20000 documents. ← [Grid Charts](https://mongodb.com/docs/charts/chart-type-reference/grid-charts/ \"Previous Section\")[Scatter Chart](https://mongodb.com/docs/charts/chart-type-reference/scatter-chart/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/word-cloud/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Word Cloud On this page * [Word Cloud Encoding Channels](#word-cloud-encoding-channels)\n* [Use Cases](#use-cases)\n* [Examples](#examples)\n* [Limitations](#limitations) Word clouds visually represent text data, highlighting prevalent keywords and phrases. The frequency at which each word appears is reflected by the word's size. ## Word Cloud Encoding Channels Word clouds provide the following [encoding channels:](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels)\n\n ## Use Cases Use word clouds to show the frequency of specific words or phrases in text fields. Word clouds provide a high-level view of common words and themes across a series of text data. They can also highlight the most common phrases from a known set of strings, such as product categories or tags. Consider using a word cloud to: * Show common words and phrases used in reviews of a product.\n* Identify common terms in existing content to improveSEO.\n* Highlight specific customer pain points from aggregated user surveys. ## Examples Word clouds are commonly used to show the frequency of words appearing within long text fields. By default, word clouds do not split text fields into words, and instead attempt to visualize the entire text field as a single value. You can use an[aggregation pipeline](https://mongodb.com/docs/charts/aggregation-pipeline/#std-label-charts-agg-pipeline) to split a text field into individual words. ## Note The dataset used in this tutorial is included in the`sample_airbnb.listingsAndReviews` [dataset provided by Atlas.](https://www.mongodb.com/docs/atlas/sample-data/load-sample-data/) The following example creates a word cloud from a dataset containing information on AirBnB rental properties. Each property listing contains a `description` field; a text field describing the property. First, we run an aggregation pipeline to pre-process the `description`field. The following aggregation pipeline: 1. [Splits](https://www.mongodb.com/docs/manual/reference/operator/aggregation/split/#mongodb-expression-exp.-split) the `description` field into an array where each individual word is an array element.\n2. [Unwinds](https://www.mongodb.com/docs/manual/reference/operator/aggregation/unwind/#mongodb-pipeline-pipe.-unwind) this array, creating a new document for each individual word from each `description` field.\n3. [Adds a new field](https://www.mongodb.com/docs/manual/reference/operator/aggregation/addFields/#mongodb-pipeline-pipe.-addFields) called `words` to the collection, where each unwound word from the `description` becomes a value of `words`.\n4. Performs a [$match](https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/#mongodb-pipeline-pipe.-match) query such that only non-trivial words are added to the word cloud. ### Procedure\n\n Your word cloud should look something like this: ![Word cloud example](https://mongodb.com/docs/charts/images/charts/word-cloud-example2.png) The size of the words in the cloud represent their relative frequency. ## Limitations The maximum query response size for a word cloud is 5000 documents. ← [Number Chart](https://mongodb.com/docs/charts/chart-type-reference/number-chart/ \"Previous Section\")[Top Item Chart](https://mongodb.com/docs/charts/chart-type-reference/top-item/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/data-table/limit-rows/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Limit the Rows a Data Table Displays On this page * [Behavior](#behavior)\n* [Procedure](#procedure)\n* [Considerations](#considerations) Users with the `Author` [dashboard role](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-roles) can limit the number of rows that a data table displays, thereby limiting the data accessible to viewers. ## Behavior Limiting is off by default. When a row limit is applied to a data table in the[Chart Builder](https://mongodb.com/docs/charts/build-charts/), it is applied to the chart definition. The visible subset of data becomes the entire data set available to viewers. Dashboard viewers can temporarily change the[sort order](https://mongodb.com/docs/charts/bin-data/#std-label-charts-sort-data), but only the data that initially appears on the chart is re-sorted. ## Example A movie data source provides a ranked list of 100 movies. A chart`Author` chooses to limit the results to 10 and sort in descending rank order to show the top 10 movies. A `Viewer` then sorts the chart into ascending order. The same 10 movies are displayed in ascending order. The user does not have access to the 90 movies that the chart `Author` excluded. ## Procedure To limit the number of rows that a chart displays: 1. Navigate to the Encode tab of the[Chart Builder](https://mongodb.com/docs/charts/build-charts/) and toggleLimit Results to enable it.\n2. Specify the number of rows to show between `1` and `9999`. The default is `10`. ## Considerations The data displayed on a table with a row limit is specific to the[sort order](https://mongodb.com/docs/charts/bin-data/#std-label-charts-sort-data) you define in the[Chart Builder](https://mongodb.com/docs/charts/build-charts/). If you change your sorting, you change the data presented in your table. ← [Toggle Data Table Row and Column Totals](https://mongodb.com/docs/charts/chart-type-reference/data-table/toggle-row-column-totals/ \"Previous Section\")[Number Chart](https://mongodb.com/docs/charts/chart-type-reference/number-chart/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/data-table/sort-resize-columns/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Sort and Resize Data Table Columns On this page * [Behavior](#behavior)\n* [Procedure](#procedure) Users with the viewer and author [roles](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-roles)on data tables can sort and resize data table columns. You can sort and resize columns either in the[dashboard](https://mongodb.com/docs/charts/dashboards/) or the [Chart Builder.](https://mongodb.com/docs/charts/build-charts/) ## Behavior When a viewer or author sorts or resizes columns from the[dashboard](https://mongodb.com/docs/charts/dashboards/) view, the changes do not persist as part of the chart definition. In this case, the chart returns to its original state once the chart or corresponding dashboard is refreshed. To save the changes as part of the chart definition, an author must make the changes in the Chart Builder. All Charts users will see the new column sorting and sizing. ## Procedure ### Sort Columns To sort a data table column, click on its header. With each click, MongoDB Charts cycles between sorting the column in ascending order, descending order, and the default chart sorting order. To sort by multiple columns, Shift + Click on the additional columns by which you wish to sort. Charts applies the sort order in the same order you select additional columns. Charts displays numbers in the column headers indicating the order in which the sorting is applied. ### Resize Columns To resize a column, click the column divider and drag until the column reaches the desired width. To return a column to its default width, double-click on the column divider. ← [Reorder Data Table Columns](https://mongodb.com/docs/charts/chart-type-reference/data-table/reorder-columns/ \"Previous Section\")[Resize Data Table Text](https://mongodb.com/docs/charts/chart-type-reference/data-table/resize-table-text/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/data-table/reorder-columns/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Reorder Data Table Columns On this page * [Behavior](#behavior)\n* [Procedure](#procedure)\n* [Considerations](#considerations) Users with the author and owner [roles](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-roles)on data tables can reorder data table columns in the [Chart Builder.](https://mongodb.com/docs/charts/build-charts/) ## Behavior When you reorder data table columns and save the chart, MongoDB Charts saves the specified order as part of the chart definition. All Charts users will see the new column order. ### Pinned Columns If you reorder a Group column in a data table that has[pinned columns](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-pin-columns), the following behaviors apply: * If the column to the right of the destination is pinned, the reordered column is pinned.\n* If the column to the left of the destination is unpinned, the reordered column is unpinned. ## Procedure To reorder data table columns, click and drag column headers to the desired order. ## Note Data table [authors and owners](https://mongodb.com/docs/charts/dashboard-permissions/#std-label-dashboard-roles) can also reorder columns by modifying the order of the respective column[encoding channels](https://mongodb.com/docs/charts/encoding-channels/#std-label-encoding-channels). MongoDB Charts renders data table columns in the same order you specify the column encoding channels. To modify the order of the encoding channels, drag and drop one field on top of another to swap their order. ## Considerations * You can only reorder columns within their respective table sections, being Groups or Values.\n* You cannot reorder Dynamic Columns. ← [Data Table](https://mongodb.com/docs/charts/chart-type-reference/data-table/ \"Previous Section\")[Sort and Resize Data Table Columns](https://mongodb.com/docs/charts/chart-type-reference/data-table/sort-resize-columns/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/data-table/toggle-row-column-totals/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Toggle Data Table Row and Column Totals By default, data tables include a Column Totals row, which consists of a row of values with sum totals for each column. Optionally, you can enable a Row Totals column, which consists of a column of values containing sum totals for each row. The following image shows a detail from a data table with row and column totals enabled and added text indicating which is which: ![Data table with row and column totals](https://mongodb.com/docs/charts/images/charts/row-column-totals.png) ## Procedure To toggle the totals on and off: 1. Navigate to the Customization tab in the[Chart Builder.](https://mongodb.com/docs/charts/build-charts/)\n2. In the General Customization section, set theColumn Totals and Row Totals toggles to the desired settings. For a complete list of Chart Customization options, see [Customize Charts.](https://mongodb.com/docs/charts/customize-charts/) ← [Resize Data Table Text](https://mongodb.com/docs/charts/chart-type-reference/data-table/resize-table-text/ \"Previous Section\")[Limit the Rows a Data Table Displays](https://mongodb.com/docs/charts/chart-type-reference/data-table/limit-rows/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/data-table/resize-table-text/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Resize Data Table Text You can resize [Data Table](https://mongodb.com/docs/charts/chart-type-reference/data-table/#std-label-data-table-example) chart text. Resizing table text changes the pixel size of the following components: * Header text, including icons\n* Body text and the vertical height of rows\n* Footer text ## Procedure To resize data table text: 1. Navigate to the Customize tab in the[Chart Builder.](https://mongodb.com/docs/charts/build-charts/)\n2. In the General section, set theText Size to the desired number of pixels. You can adjust text size to be between 8 and 24 pixels. The default is 14 pixels. For a complete list of Chart Customization options, see [Customize Charts.](https://mongodb.com/docs/charts/customize-charts/) ← [Sort and Resize Data Table Columns](https://mongodb.com/docs/charts/chart-type-reference/data-table/sort-resize-columns/ \"Previous Section\")[Toggle Data Table Row and Column Totals](https://mongodb.com/docs/charts/chart-type-reference/data-table/toggle-row-column-totals/ \"Next Section\") →",
  "https://www.mongodb.com/docs/charts/chart-type-reference/geospatial-scatter/": " [Docs Home](https://www.mongodb.com/docs/) → [MongoDB Charts](https://mongodb.com/docs/charts/) # Geospatial Scatter Chart On this page * [Geospatial Scatter Chart Encoding Channels](#geospatial-scatter-chart-encoding-channels)\n* [Customization Options](#customization-options)\n* [Tutorials](#tutorials)\n* [Limitations](#limitations) Geospatial scatter charts distribute data from a data source across geographic locations, and, optionally, color the data points based on the database field of your choice and scale the size of data points. The sample images in the next section demonstrate how to construct a geospatial scatter chart to locate the neighborhoods in NYC with the most rooms available at a specified price. ## Geospatial Scatter Chart Encoding Channels Geospatial scatter charts use the Coordinates,Color and Size encoding channels. ### Coordinates The Coordinates encoding channel defines the map area of geospatial charts. The image below distributes all of the instances of the `location` geopoint in the [Sample AirBnB Listings Dataset](https://docs.atlas.mongodb.com/sample-data/sample-airbnb). However, all of the circles are green and the same size since we have not yet specified fields for the Size and Colorencoding channels. ## Note Atlas provides [several sample data sets](https://docs.atlas.mongodb.com/sample-data/available-sample-datasets/)for download. See the [Geopoint](https://mongodb.com/docs/charts/encoding-channels/#std-label-geopoint-channel) reference page for more information about what types of data you can use in this channel. ![Geospatial scatter coordinates example](https://mongodb.com/docs/charts/images/charts/geospatial-scatter-coordinates-example.png) ### Color (_Optional_) The Color encoding channel changes the color of the data points to categorize the displayed geopoints by the value of the selected collection field. MongoDB Charts lists the colors used in a key to the right of the chart. In the image below, the `property_type`distributes the property types in NYC by color. The key to the right of the chart indicates green for guest suites and dark blue for apartments, for example. However, all of the circles are still the same size since we have not yet specified a field for the Size encoding channel. ![Geospatial scatter color example](https://mongodb.com/docs/charts/images/charts/geospatial-scatter-color-example.png) ### Size (_Optional_) The Size aggregation encoding channel changes the size of the data point markers, with larger sizes indicating larger aggregated values. The image below uses the mean of the `weekly_price`collection field to aggregate all instances of the geopoint that you chose for the Coordinates encoding channel. The key to right of the chart indicates the aggregation value for the different circle sizes. ![Geospatial scatter size example](https://mongodb.com/docs/charts/images/charts/geospatial-scatter-size-example.png) ## Note If no fields are encoded in the Size encoding channel,Charts displays all points with the same size. ### Tooltip Detail _(Optional)_ The Tooltip Detail encoding channel adds the value of the selected field to each data point's tooltip. To view a data point tooltip, hover over that point in the chart. In addition to the Tooltip Detail field, the tooltip also shows other fields used to construct the chart. For example, the following chart encodes the Summaryfield as a Tooltip Detail: ![Geospatial scatter tooltip example](https://mongodb.com/docs/charts/images/charts/geospatial-scatter-tooltip-example.png) ## Customization Options The following customization options are specific to geospatial scatter charts. For general customization options, see [Customize Charts.](https://mongodb.com/docs/charts/customize-charts/#std-label-customize-charts) ### Automatically Set Viewport By default, geospatial charts show a map which includes all the data point markers in your specified collection. You can pan and zoom to change the map view, but if you close the chart and re-open it the map reverts to its default state. This behavior is controlled by theAutomatically Set Viewport option. When you toggle the Automatically Set Viewport switch to`Off`, the area and zoom level at which the map is saved becomes the new default view. ## Note\n\n ### Opacity The Opacity level of a map modifies the degree to which the chart's map data shows through the data point markers. Geospatial scatter charts default to `20%`. ### Stroke Thickness You can set the Stroke Thickness, measured in pixels, of the map's data point markers. The default is `2`. ### Custom Color Palette The color palette specifies the range of colors that corresponds to relative aggregated values in your map. Geospatial scatter charts use a discrete color picker. To enable palette customization, toggle theCustom Color Palette switch in the Generalsection. For more information, see [Color Palette Customization.](https://mongodb.com/docs/charts/customize-charts/general-customization/#std-label-color-palette-customization) ## Tutorials See the following tutorials to build geospatial scatter charts: * [Create a Geospatial Scatter Chart Using GeoJSON Points](#std-label-create-scatter-chart-geojson)\n* [Create a Geospatial Scatter Chart Using Numeric or Numeric Array Fields](#std-label-create-scatter-chart-numeric) ### Prerequisites The tutorials on this page use the `sample_airbnb.listingsAndReviews`and `sample_geospatial.shipwrecks` collections. Before starting, you must load the sample data on your cluster. To learn how to load the sample data provided by Atlas into your cluster, see [Load Sample Data.](https://www.mongodb.com/docs/atlas/sample-data/) ### Create a Geospatial Scatter Chart Using GeoJSON Points This tutorial demonstrates how to create a geospatial scatter chart with fields that are [GeoJSON Points](https://www.mongodb.com/docs/manual/reference/geojson/). The final chart displays a scatter chart of AirBnB listings in New York. ## Note Charts automatically determines if field types in your collection are [GeoJSON Points](https://www.mongodb.com/docs/manual/reference/geojson/) by displaying the  icon. You can map these fields directly to a geopoint channel type in the Chart Builder. For more information, see [Geopoint Channel Type.](https://mongodb.com/docs/charts/encoding-channels/#std-label-geopoint-channel) 1 #### Add a geospatial scatter chart to your dashboard. 1. From the Dashboards page, select the dashboard where you want to add a new chart. For instructions on setting up a dashboard, see [Dashboards.](https://mongodb.com/docs/charts/dashboards/)\n2. Click Add Chart.\n3. In the Select Data Source modal, click theProject tab.\n4. In the cluster where you loaded the sample data, select the `listingsAndReviews` collection in the `sample_airbnb` database.\n5. In the Chart Type dropdown, click Geo Scatter. For more details, see [Create a Chart.](https://mongodb.com/docs/charts/build-charts/#std-label-create-new-chart) 2 #### Add fields to your chart. 1. Select the Encode tab.\n2. Navigate to the Fields pane on the left side of the Chart Builder. This section lists all available fields in the `listingsAndReviews` collection.\n3. Drag the `location` geopoint field nested in the `address`field to the Coordinates encoding channel.\n4. Drag the `property_type` field to the Colorencoding channel.\n5. Drag the `price` field to the Size encoding channel. Then, in the Aggregate dropdown that appears, set the aggregation method to mean.  \nCharts displays a scatter chart of AirBnB listings across the world. The color of each data point corresponds to the property type, and the size of each point corresponds to the mean price.  \n## Note  \nTo customize colors, click the Customize tab. Under General, enable theCustom Color Palette and set your preferred colors. For more information, see[Color Palette Customization.](https://mongodb.com/docs/charts/customize-charts/general-customization/#std-label-color-palette-customization) 3 #### Filter your results. 1. Select the Filter tab.\n2. Drag the `market` field nested in the `address` field to the Filter encoding channel.\n3. To filter your results to include only AirBnBs in New York, click Deselect All and then select `New York`. 4 #### Save the chart to your dashboard.\n\n ### Create a Geospatial Scatter Chart Using Numeric or Numeric Array Fields This tutorial demonstrates how to create a geospatial scatter chart with numeric or numeric array fields. The final chart displays a scatter chart of shipwrecks across the world. 1 #### Add a geospatial scatter chart to your dashboard. 1. From the Dashboards page, select the dashboard where you want to add a new chart. For instructions on setting up a dashboard, see [Dashboards.](https://mongodb.com/docs/charts/dashboards/)\n2. Click Add Chart.\n3. In the Select Data Source modal, click theProject tab.\n4. In the cluster where you loaded the sample data, select the `shipwrecks` collection in the `sample_geospatial` database.\n5. In the Chart Type dropdown, click Geo Scatter. For more details, see [Create a Chart.](https://mongodb.com/docs/charts/build-charts/#std-label-create-new-chart) 2 #### Add fields to your chart. 1. Select the Encode tab.\n2. Navigate to the Fields pane on the left side of the Chart Builder. This section lists all available fields in the `shipwrecks` collection.\n3. Drag the `coordinates` numeric array field to theCoordinates encoding channel.  \n## Note  \nAlternatively, you can specify the latitude and longitude coordinates separately. First, drag the `latdec` numeric field to the Coordinates encoding channel. Once theLongitude channel appears, drag the `londec`numeric field to the corresponding channel.\n4. Drag the `feature_type` field to the Color encoding channel.\n5. Drag the `depth` field to the Size encoding channel. Then, in the Aggregate dropdown that appears, set the aggregation method to mean.  \nCharts displays a scatter chart of shipwrecks across the world. The color of each data point corresponds to the shipwreck type, and the size of each point corresponds to the mean shipwreck depth.  \n## Note  \nTo customize colors, click the Customize tab. Under General, enable theCustom Color Palette and set your preferred colors. For more information, see[Color Palette Customization.](https://mongodb.com/docs/charts/customize-charts/general-customization/#std-label-color-palette-customization) 3 #### Save the chart to your dashboard. 1. Optionally, Enter a titleor Enter a description for your chart.\n2. Click Save and Closeat the upper right of the chart builder view. ## Limitations The maximum query response size for a geospatial scatter chart is 1000 documents. ← [Choropleth Chart Shape Schemes](https://mongodb.com/docs/charts/chart-type-reference/choropleth-regions/ \"Previous Section\")[Geospatial Heatmap](https://mongodb.com/docs/charts/chart-type-reference/geospatial-heatmap/ \"Next Section\") →"
}